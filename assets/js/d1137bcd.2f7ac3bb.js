"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[8680],{8453:(n,e,i)=>{i.d(e,{R:()=>l,x:()=>o});var r=i(6540);const t={},a=r.createContext(t);function l(n){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:l(n.components),r.createElement(a.Provider,{value:e},n.children)}},9577:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"advanced/unicode-support","title":"Unicode and Wide Character Support","description":"JLine provides robust support for Unicode and wide characters, allowing you to create applications that work with international text and special symbols. This guide covers how to handle Unicode characters, wide characters (like CJK characters), and emoji in your JLine applications.","source":"@site/docs/advanced/unicode-support.md","sourceDirName":"advanced","slug":"/advanced/unicode-support","permalink":"/docs/advanced/unicode-support","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/advanced/unicode-support.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6}}');var t=i(4848),a=i(8453);const l={sidebar_position:6},o="Unicode and Wide Character Support",d={},s=[{value:"Unicode Basics in JLine",id:"unicode-basics-in-jline",level:2},{value:"Wide Characters",id:"wide-characters",level:2},{value:"Emoji Support",id:"emoji-support",level:2},{value:"Bidirectional Text",id:"bidirectional-text",level:2},{value:"Character Width Calculation",id:"character-width-calculation",level:2},{value:"Unicode Normalization",id:"unicode-normalization",level:2},{value:"Terminal Encoding",id:"terminal-encoding",level:2},{value:"Best Practices",id:"best-practices",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"unicode-and-wide-character-support",children:"Unicode and Wide Character Support"})}),"\n",(0,t.jsx)(e.p,{children:"JLine provides robust support for Unicode and wide characters, allowing you to create applications that work with international text and special symbols. This guide covers how to handle Unicode characters, wide characters (like CJK characters), and emoji in your JLine applications."}),"\n",(0,t.jsx)(e.h2,{id:"unicode-basics-in-jline",children:"Unicode Basics in JLine"}),"\n",(0,t.jsx)(e.p,{children:"JLine is built on Java's Unicode support, which means it can handle the full range of Unicode characters:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:'title="UnicodeBasicsExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class UnicodeBasicsExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // Display Unicode examples\n        terminal.writer().println("JLine Unicode Support Examples:");\n        terminal.writer().println();\n        \n        // highlight-start\n        // Basic Latin and Latin-1 Supplement\n        terminal.writer().println("Latin characters: Hello, World! Caf\xe9 Fran\xe7ais");\n        \n        // Greek\n        terminal.writer().println("Greek: \u0393\u03b5\u03b9\u03ac \u03c3\u03bf\u03c5 \u039a\u03cc\u03c3\u03bc\u03b5");\n        \n        // Cyrillic\n        terminal.writer().println("Cyrillic: \u041f\u0440\u0438\u0432\u0435\u0442, \u043c\u0438\u0440");\n        \n        // Hebrew\n        terminal.writer().println("Hebrew: \u05e9\u05dc\u05d5\u05dd \u05e2\u05d5\u05dc\u05dd");\n        \n        // Arabic\n        terminal.writer().println("Arabic: \u0645\u0631\u062d\u0628\u0627 \u0628\u0627\u0644\u0639\u0627\u0644\u0645");\n        \n        // CJK (Chinese, Japanese, Korean)\n        terminal.writer().println("Chinese: \u4f60\u597d\uff0c\u4e16\u754c");\n        terminal.writer().println("Japanese: \u3053\u3093\u306b\u3061\u306f\u4e16\u754c");\n        terminal.writer().println("Korean: \uc548\ub155\ud558\uc138\uc694 \uc138\uacc4");\n        \n        // Emoji\n        terminal.writer().println("Emoji: \ud83d\ude00 \ud83d\ude80 \ud83c\udf0d \ud83c\udf89 \ud83d\udc4d");\n        // highlight-end\n        \n        terminal.writer().println();\n        terminal.writer().println("Try typing some Unicode characters:");\n        terminal.writer().flush();\n        \n        // Read a line with Unicode support\n        String line = reader.readLine("unicode> ");\n        terminal.writer().println("You entered: " + line);\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"wide-characters",children:"Wide Characters"}),"\n",(0,t.jsx)(e.p,{children:"Wide characters, such as CJK (Chinese, Japanese, Korean) characters, take up two columns in the terminal. JLine handles these characters correctly for cursor positioning and line editing:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:'title="WideCharactersExample.java"',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.WCWidth;\n\nimport java.io.IOException;\n\npublic class WideCharactersExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // Display wide character examples\n        terminal.writer().println("Wide Character Support in JLine:");\n        terminal.writer().println();\n        \n        // highlight-start\n        // Examples of wide characters\n        String[] examples = {\n            "\u4f60\u597d",         // Chinese\n            "\u3053\u3093\u306b\u3061\u306f",   // Japanese\n            "\uc548\ub155\ud558\uc138\uc694",   // Korean\n            "\u4f60\u597d\uff0c\u4e16\u754c\uff01", // Chinese with punctuation\n            "Hello \u4e16\u754c",   // Mixed Latin and CJK\n            "\ud83c\udc04 \ud83c\ude34 \ud83c\ude3a \ud83c\ude50"   // Wide emoji and symbols\n        };\n        \n        // Display examples with character width information\n        for (String example : examples) {\n            terminal.writer().println("Text: " + example);\n            \n            terminal.writer().print("Width: ");\n            int totalWidth = 0;\n            for (int i = 0; i < example.length(); i++) {\n                char c = example.charAt(i);\n                int width = WCWidth.wcwidth(c);\n                totalWidth += width;\n                terminal.writer().print(width + " ");\n            }\n            terminal.writer().println("\\nTotal display width: " + totalWidth);\n            terminal.writer().println();\n        }\n        // highlight-end\n        \n        terminal.writer().println("Try typing some wide characters:");\n        terminal.writer().flush();\n        \n        // Read a line with wide character support\n        String line = reader.readLine("wide> ");\n        \n        // Display the entered text with width information\n        terminal.writer().println("You entered: " + line);\n        terminal.writer().print("Character widths: ");\n        for (int i = 0; i < line.length(); i++) {\n            terminal.writer().print(WCWidth.wcwidth(line.charAt(i)) + " ");\n        }\n        terminal.writer().println();\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"emoji-support",children:"Emoji Support"}),"\n",(0,t.jsx)(e.p,{children:"JLine can handle emoji characters, which are becoming increasingly common in modern applications:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:'title="EmojiSupportExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\nimport org.jline.utils.AttributedStringBuilder;\nimport org.jline.utils.AttributedStyle;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class EmojiSupportExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // Display emoji examples\n        terminal.writer().println("Emoji Support in JLine:");\n        terminal.writer().println();\n        \n        // highlight-start\n        // Common emoji categories\n        Map<String, String[]> emojiCategories = new HashMap<>();\n        emojiCategories.put("Smileys", new String[] {"\ud83d\ude00", "\ud83d\ude03", "\ud83d\ude04", "\ud83d\ude01", "\ud83d\ude06", "\ud83d\ude05", "\ud83d\ude02", "\ud83e\udd23", "\ud83d\ude0a", "\ud83d\ude07"});\n        emojiCategories.put("People", new String[] {"\ud83d\udc4d", "\ud83d\udc4e", "\ud83d\udc4c", "\u270c\ufe0f", "\ud83e\udd1e", "\ud83e\udd1f", "\ud83e\udd18", "\ud83e\udd19", "\ud83d\udc4b", "\ud83d\udd90\ufe0f"});\n        emojiCategories.put("Animals", new String[] {"\ud83d\udc36", "\ud83d\udc31", "\ud83d\udc2d", "\ud83d\udc39", "\ud83d\udc30", "\ud83e\udd8a", "\ud83d\udc3b", "\ud83d\udc3c", "\ud83d\udc28", "\ud83d\udc2f"});\n        emojiCategories.put("Food", new String[] {"\ud83c\udf4e", "\ud83c\udf50", "\ud83c\udf4a", "\ud83c\udf4b", "\ud83c\udf4c", "\ud83c\udf49", "\ud83c\udf47", "\ud83c\udf53", "\ud83c\udf48", "\ud83c\udf52"});\n        emojiCategories.put("Travel", new String[] {"\ud83d\ude97", "\u2708\ufe0f", "\ud83d\ude80", "\ud83d\udef8", "\ud83d\ude82", "\ud83d\udea2", "\ud83d\ude81", "\ud83d\udef5", "\ud83d\udeb2", "\ud83d\udef4"});\n        emojiCategories.put("Objects", new String[] {"\u231a", "\ud83d\udcf1", "\ud83d\udcbb", "\u2328\ufe0f", "\ud83d\udda5\ufe0f", "\ud83d\uddb1\ufe0f", "\ud83d\udda8\ufe0f", "\ud83d\udd8b\ufe0f", "\ud83d\udcde", "\ud83d\udcdf"});\n        emojiCategories.put("Symbols", new String[] {"\u2764\ufe0f", "\ud83d\udc94", "\ud83d\udcaf", "\u2705", "\u274c", "\u2b55", "\ud83d\udd34", "\ud83d\udfe0", "\ud83d\udfe1", "\ud83d\udfe2"});\n        emojiCategories.put("Flags", new String[] {"\ud83c\udfc1", "\ud83d\udea9", "\ud83c\udf8c", "\ud83c\udff4", "\ud83c\udff3\ufe0f", "\ud83c\udff3\ufe0f\u200d\ud83c\udf08", "\ud83c\udff4\u200d\u2620\ufe0f", "\ud83c\uddfa\ud83c\uddf8", "\ud83c\uddec\ud83c\udde7", "\ud83c\uddef\ud83c\uddf5"});\n        \n        // Display emoji by category\n        for (Map.Entry<String, String[]> entry : emojiCategories.entrySet()) {\n            AttributedStringBuilder asb = new AttributedStringBuilder();\n            asb.style(AttributedStyle.DEFAULT.bold())\n               .append(entry.getKey())\n               .append(": ")\n               .style(AttributedStyle.DEFAULT);\n            \n            for (String emoji : entry.getValue()) {\n                asb.append(emoji + " ");\n            }\n            \n            asb.toAttributedString().println(terminal);\n        }\n        // highlight-end\n        \n        terminal.writer().println();\n        terminal.writer().println("Try typing some emoji:");\n        terminal.writer().flush();\n        \n        // Read a line with emoji support\n        String line = reader.readLine("emoji> ");\n        terminal.writer().println("You entered: " + line);\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"bidirectional-text",children:"Bidirectional Text"}),"\n",(0,t.jsx)(e.p,{children:"JLine can handle bidirectional text (like Arabic and Hebrew), but there are some limitations:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:'title="BidirectionalTextExample.java"',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class BidirectionalTextExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // Display bidirectional text examples\n        terminal.writer().println("Bidirectional Text Support in JLine:");\n        terminal.writer().println();\n        \n        // highlight-start\n        // Examples of bidirectional text\n        terminal.writer().println("Hebrew: \u05e9\u05dc\u05d5\u05dd \u05e2\u05d5\u05dc\u05dd (Hello World)");\n        terminal.writer().println("Arabic: \u0645\u0631\u062d\u0628\u0627 \u0628\u0627\u0644\u0639\u0627\u0644\u0645 (Hello World)");\n        terminal.writer().println("Mixed LTR and RTL: Hello \u05e9\u05dc\u05d5\u05dd");\n        terminal.writer().println("Mixed RTL and LTR: \u05e9\u05dc\u05d5\u05dd Hello");\n        terminal.writer().println("Complex mixed: Hello, \u05e9\u05dc\u05d5\u05dd! \u0645\u0631\u062d\u0628\u0627 - World");\n        // highlight-end\n        \n        terminal.writer().println();\n        terminal.writer().println("Note: JLine displays bidirectional text, but editing may not");\n        terminal.writer().println("behave as expected due to terminal limitations.");\n        terminal.writer().println();\n        terminal.writer().println("Try typing some bidirectional text:");\n        terminal.writer().flush();\n        \n        // Read a line with bidirectional text support\n        String line = reader.readLine("bidi> ");\n        terminal.writer().println("You entered: " + line);\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"character-width-calculation",children:"Character Width Calculation"}),"\n",(0,t.jsx)(e.p,{children:"JLine provides utilities for calculating the display width of characters:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:'title="CharacterWidthExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.WCWidth;\n\nimport java.io.IOException;\n\npublic class CharacterWidthExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // Display character width examples\n        terminal.writer().println("Character Width Calculation in JLine:");\n        terminal.writer().println();\n        \n        // highlight-start\n        // Examples of characters with different widths\n        String[] examples = {\n            "A",            // Latin letter (width 1)\n            "\xc1",            // Latin letter with accent (width 1)\n            "\u3042",           // Hiragana (width 2)\n            "\u6f22",           // Kanji (width 2)\n            "\ud83d\udc4d",           // Emoji (width 2)\n            "\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66",     // Complex emoji with ZWJ (width 2)\n            "\\u0000",       // Null character (width 0)\n            "\\u200B",       // Zero-width space (width 0)\n            "\\t",           // Tab (special handling)\n            "\\n"            // Newline (special handling)\n        };\n        \n        // Display width information for each example\n        for (String example : examples) {\n            terminal.writer().print("Character: ");\n            if (example.equals("\\u0000")) {\n                terminal.writer().print("\\\\u0000 (null)");\n            } else if (example.equals("\\u200B")) {\n                terminal.writer().print("\\\\u200B (zero-width space)");\n            } else if (example.equals("\\t")) {\n                terminal.writer().print("\\\\t (tab)");\n            } else if (example.equals("\\n")) {\n                terminal.writer().print("\\\\n (newline)");\n            } else {\n                terminal.writer().print(example);\n            }\n            \n            terminal.writer().print(", Code points: ");\n            example.codePoints().forEach(cp -> terminal.writer().print("U+" + Integer.toHexString(cp).toUpperCase() + " "));\n            \n            terminal.writer().print(", Width: ");\n            if (example.length() == 1) {\n                terminal.writer().println(WCWidth.wcwidth(example.charAt(0)));\n            } else {\n                terminal.writer().print("(String) ");\n                int width = 0;\n                for (int i = 0; i < example.length(); i++) {\n                    width += WCWidth.wcwidth(example.charAt(i));\n                }\n                terminal.writer().println(width);\n            }\n        }\n        // highlight-end\n        \n        terminal.writer().println();\n        terminal.writer().println("Enter some text to calculate its display width:");\n        terminal.writer().flush();\n        \n        // Read a line and calculate its display width\n        String line = reader.readLine("width> ");\n        \n        // Calculate the display width\n        int displayWidth = 0;\n        for (int i = 0; i < line.length(); i++) {\n            displayWidth += WCWidth.wcwidth(line.charAt(i));\n        }\n        \n        terminal.writer().println("You entered: " + line);\n        terminal.writer().println("Display width: " + displayWidth + " columns");\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"unicode-normalization",children:"Unicode Normalization"}),"\n",(0,t.jsx)(e.p,{children:"When working with Unicode, it's important to understand normalization forms:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:'title="UnicodeNormalizationExample.java"',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.text.Normalizer;\nimport java.text.Normalizer.Form;\n\npublic class UnicodeNormalizationExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // Display Unicode normalization examples\n        terminal.writer().println("Unicode Normalization Examples:");\n        terminal.writer().println();\n        \n        // highlight-start\n        // Example of composed and decomposed characters\n        String composed = "\xe9"; // U+00E9: LATIN SMALL LETTER E WITH ACUTE\n        String decomposed = "e\\u0301"; // U+0065 U+0301: LATIN SMALL LETTER E + COMBINING ACUTE ACCENT\n        \n        terminal.writer().println("Visually identical characters can have different representations:");\n        terminal.writer().println("  Composed (\xe9): U+00E9");\n        terminal.writer().println("  Decomposed (\xe9): U+0065 U+0301");\n        terminal.writer().println();\n        \n        terminal.writer().println("Comparison without normalization:");\n        terminal.writer().println("  composed.equals(decomposed): " + composed.equals(decomposed));\n        terminal.writer().println("  composed.length(): " + composed.length());\n        terminal.writer().println("  decomposed.length(): " + decomposed.length());\n        terminal.writer().println();\n        \n        // Normalize to different forms\n        String nfc = Normalizer.normalize(decomposed, Form.NFC); // Canonical composition\n        String nfd = Normalizer.normalize(composed, Form.NFD);   // Canonical decomposition\n        \n        terminal.writer().println("After normalization:");\n        terminal.writer().println("  NFC (decomposed): " + nfc);\n        terminal.writer().println("  NFD (composed): " + nfd);\n        terminal.writer().println("  nfc.equals(composed): " + nfc.equals(composed));\n        terminal.writer().println("  nfd.equals(decomposed): " + nfd.equals(decomposed));\n        // highlight-end\n        \n        terminal.writer().println();\n        terminal.writer().println("Enter text with accented characters to normalize:");\n        terminal.writer().flush();\n        \n        // Read a line and show normalization\n        String line = reader.readLine("normalize> ");\n        \n        terminal.writer().println("You entered: " + line);\n        terminal.writer().println("NFC form: " + Normalizer.normalize(line, Form.NFC));\n        terminal.writer().println("NFD form: " + Normalizer.normalize(line, Form.NFD));\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"terminal-encoding",children:"Terminal Encoding"}),"\n",(0,t.jsx)(e.p,{children:"Terminal encoding is important for proper Unicode display:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",metastring:'title="TerminalEncodingExample.java"',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.nio.charset.Charset;\n\npublic class TerminalEncodingExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        // Create a terminal with explicit encoding\n        Terminal terminal = TerminalBuilder.builder()\n                .encoding(Charset.forName("UTF-8"))\n                .build();\n        // highlight-end\n        \n        // Display encoding information\n        terminal.writer().println("Terminal Encoding Information:");\n        terminal.writer().println();\n        terminal.writer().println("Default charset: " + Charset.defaultCharset().name());\n        terminal.writer().println("Terminal encoding: " + terminal.encoding().name());\n        terminal.writer().println("File.encoding property: " + System.getProperty("file.encoding"));\n        terminal.writer().println();\n        \n        // Display Unicode examples to verify encoding\n        terminal.writer().println("Unicode display test:");\n        terminal.writer().println("  Latin: \xe9 \xe8 \xea \xeb \xf1 \xdf");\n        terminal.writer().println("  Greek: \u03b1 \u03b2 \u03b3 \u03b4 \u03b5 \u03b6");\n        terminal.writer().println("  Cyrillic: \u0430 \u0431 \u0432 \u0433 \u0434 \u0435");\n        terminal.writer().println("  CJK: \u4f60\u597d \u3053\u3093\u306b\u3061\u306f \uc548\ub155\ud558\uc138\uc694");\n        terminal.writer().println("  Emoji: \ud83d\ude00 \ud83d\ude80 \ud83c\udf0d");\n        terminal.writer().println();\n        \n        terminal.writer().println("Press Enter to exit...");\n        terminal.writer().flush();\n        terminal.reader().readLine();\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(e.p,{children:"When working with Unicode and wide characters in JLine, consider these best practices:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Use UTF-8 Encoding"}),": Always use UTF-8 encoding for your terminal to ensure proper Unicode support."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Calculate Display Width Correctly"}),": Use ",(0,t.jsx)(e.code,{children:"WCWidth.wcwidth()"})," to calculate the display width of characters."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Handle Combining Characters"}),": Be aware of combining characters and use normalization when comparing strings."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Test with Various Scripts"}),": Test your application with various scripts, including Latin, CJK, Arabic, and Hebrew."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Consider Terminal Limitations"}),": Some terminals may have limited Unicode support or display issues with certain characters."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Be Careful with Bidirectional Text"}),": Editing bidirectional text can be challenging due to terminal limitations."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Use Proper Line Breaking"}),": Consider proper line breaking for different scripts, especially for CJK characters."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Handle Zero-Width Characters"}),": Be aware of zero-width characters that can affect display but not width calculations."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Test Emoji Rendering"}),": Test emoji rendering in different terminals, as support can vary."]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Consider Font Support"}),": Ensure the terminal font supports the Unicode characters you're using."]}),"\n"]}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}}}]);