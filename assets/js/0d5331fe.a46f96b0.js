"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[6864],{8019:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"history","title":"History Management","description":"JLine provides sophisticated history management capabilities, allowing users to recall, search, and reuse previous commands.","source":"@site/docs/history.md","sourceDirName":".","slug":"/history","permalink":"/docs/history","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/history.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Tab Completion","permalink":"/docs/tab-completion"},"next":{"title":"Syntax Highlighting","permalink":"/docs/advanced/syntax-highlighting"}}');var r=i(4848),s=i(8453);const a={sidebar_position:5},o="History Management",l={},d=[{value:"Basic History Setup",id:"basic-history-setup",level:2},{value:"Persistent History",id:"persistent-history",level:2},{value:"History Size",id:"history-size",level:2},{value:"History Filtering",id:"history-filtering",level:2},{value:"History Navigation",id:"history-navigation",level:2},{value:"Programmatic History Access",id:"programmatic-history-access",level:2},{value:"History Expansion",id:"history-expansion",level:2},{value:"Custom History Implementation",id:"custom-history-implementation",level:2},{value:"Advanced History Features",id:"advanced-history-features",level:2},{value:"Timestamped History",id:"timestamped-history",level:3},{value:"Searchable History",id:"searchable-history",level:3},{value:"History Event Listeners",id:"history-event-listeners",level:3},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"history-management",children:"History Management"})}),"\n",(0,r.jsx)(n.p,{children:"JLine provides sophisticated history management capabilities, allowing users to recall, search, and reuse previous commands."}),"\n",(0,r.jsx)(n.h2,{id:"basic-history-setup",children:"Basic History Setup"}),"\n",(0,r.jsx)(n.p,{children:"To set up history in your JLine application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import org.jline.reader.History;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.history.DefaultHistory;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.nio.file.Paths;\n\n// Create a terminal\nTerminal terminal = TerminalBuilder.builder().build();\n\n// Create a history instance\nHistory history = new DefaultHistory();\n\n// Create a line reader with history\nLineReader reader = LineReaderBuilder.builder()\n        .terminal(terminal)\n        .history(history)\n        .variable(LineReader.HISTORY_FILE, Paths.get("history.txt"))\n        .build();\n\n// Now the user can navigate history with up/down arrows\nString line = reader.readLine("prompt> ");\n'})}),"\n",(0,r.jsx)(n.h2,{id:"persistent-history",children:"Persistent History"}),"\n",(0,r.jsx)(n.p,{children:"JLine can save history to a file and load it when your application restarts:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Set the history file\nreader.setVariable(LineReader.HISTORY_FILE, Paths.get("~/.myapp_history"));\n\n// Save history explicitly (though it\'s usually done automatically)\n((DefaultHistory) reader.getHistory()).save();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"history-size",children:"History Size"}),"\n",(0,r.jsx)(n.p,{children:"You can control how many entries are kept in history:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Set maximum history size\nreader.setVariable(LineReader.HISTORY_SIZE, 1000);\n\n// Set maximum size of history file\nreader.setVariable(LineReader.HISTORY_FILE_SIZE, 2000);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"history-filtering",children:"History Filtering"}),"\n",(0,r.jsx)(n.p,{children:"JLine provides options to filter what gets added to history:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Don't add duplicate entries\nreader.setOption(LineReader.Option.HISTORY_IGNORE_DUPS, true);\n\n// Don't add entries that start with space\nreader.setOption(LineReader.Option.HISTORY_IGNORE_SPACE, true);\n\n// Beep when trying to navigate past the end of history\nreader.setOption(LineReader.Option.HISTORY_BEEP, true);\n\n// Verify history expansion (like !!, !$, etc.)\nreader.setOption(LineReader.Option.HISTORY_VERIFY, true);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"history-navigation",children:"History Navigation"}),"\n",(0,r.jsx)(n.p,{children:"Users can navigate history using:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Up/Down arrows"}),": Move through history entries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ctrl+R"}),": Reverse incremental search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ctrl+S"}),": Forward incremental search (if supported by terminal)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Alt+<"}),": Go to the first history entry"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Alt+>"}),": Go to the last history entry"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"programmatic-history-access",children:"Programmatic History Access"}),"\n",(0,r.jsx)(n.p,{children:"You can access and manipulate history programmatically:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Get the history\nHistory history = reader.getHistory();\n\n// Iterate through history entries\nfor (History.Entry entry : history) {\n    System.out.println(entry.index() + ": " + entry.line());\n}\n\n// Get a specific entry\nString lastCommand = history.get(history.size() - 1);\n\n// Add an entry programmatically\nhistory.add("manually added command");\n\n// Clear history\nhistory.purge();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"history-expansion",children:"History Expansion"}),"\n",(0,r.jsx)(n.p,{children:"JLine supports history expansion similar to Bash:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Enable history expansion\nreader.setOption(LineReader.Option.HISTORY_EXPAND, true);\n\n// Now users can use:\n// !! - repeat the last command\n// !n - repeat command number n\n// !-n - repeat nth previous command\n// !string - repeat last command starting with string\n// !?string - repeat last command containing string\n// ^string1^string2 - replace string1 with string2 in the last command\n"})}),"\n",(0,r.jsx)(n.h2,{id:"custom-history-implementation",children:"Custom History Implementation"}),"\n",(0,r.jsxs)(n.p,{children:["You can create your own history implementation by implementing the ",(0,r.jsx)(n.code,{children:"History"})," interface:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class CustomHistory implements History {\n    private final List<String> entries = new ArrayList<>();\n\n    @Override\n    public void add(String line) {\n        // Custom logic for adding entries\n        entries.add(line);\n        // Maybe save to a database or other storage\n    }\n\n    @Override\n    public String get(int index) {\n        return entries.get(index);\n    }\n\n    @Override\n    public int size() {\n        return entries.size();\n    }\n\n    @Override\n    public int index() {\n        return entries.size() - 1;\n    }\n\n    // Implement other required methods...\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-history-features",children:"Advanced History Features"}),"\n",(0,r.jsx)(n.h3,{id:"timestamped-history",children:"Timestamped History"}),"\n",(0,r.jsx)(n.p,{children:"You can create a history implementation that records timestamps:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class TimestampedHistory extends DefaultHistory {\n    private final Map<String, Instant> timestamps = new HashMap<>();\n\n    @Override\n    public void add(String line) {\n        super.add(line);\n        timestamps.put(line, Instant.now());\n    }\n\n    public Instant getTimestamp(String line) {\n        return timestamps.get(line);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"searchable-history",children:"Searchable History"}),"\n",(0,r.jsx)(n.p,{children:"Implement custom search functionality:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public List<String> searchHistory(String term) {\n    List<String> results = new ArrayList<>();\n    History history = reader.getHistory();\n\n    for (History.Entry entry : history) {\n        if (entry.line().contains(term)) {\n            results.add(entry.line());\n        }\n    }\n\n    return results;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"history-event-listeners",children:"History Event Listeners"}),"\n",(0,r.jsx)(n.p,{children:"You can listen for history events:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Create a history listener\nHistory.Listener historyListener = new History.Listener() {\n    @Override\n    public void onAdd(History history, String line) {\n        System.out.println("Added to history: " + line);\n    }\n\n    @Override\n    public void onRemove(History history, String line) {\n        System.out.println("Removed from history: " + line);\n    }\n};\n\n// Add the listener to a DefaultHistory instance\nDefaultHistory history = new DefaultHistory();\nhistory.addListener(historyListener);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Always set a history file for persistent history"}),"\n",(0,r.jsx)(n.li,{children:"Configure appropriate history size limits"}),"\n",(0,r.jsx)(n.li,{children:"Consider enabling HISTORY_IGNORE_DUPS to avoid clutter"}),"\n",(0,r.jsx)(n.li,{children:"Provide clear documentation on history navigation for users"}),"\n",(0,r.jsx)(n.li,{children:"Consider security implications of storing sensitive commands"}),"\n",(0,r.jsx)(n.li,{children:"Implement history purging for sensitive operations"}),"\n",(0,r.jsx)(n.li,{children:"Test history functionality with various input patterns"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);