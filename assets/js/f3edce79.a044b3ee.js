"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[9965],{131:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"advanced/mouse-support","title":"Mouse Support","description":"JLine provides support for mouse events in terminal applications, allowing you to create more interactive and user-friendly command-line interfaces. This feature is particularly useful for applications that require point-and-click interactions, such as text editors, file browsers, or interactive menus.","source":"@site/docs/advanced/mouse-support.md","sourceDirName":"advanced","slug":"/advanced/mouse-support","permalink":"/docs/advanced/mouse-support","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/advanced/mouse-support.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Custom Widgets","permalink":"/docs/advanced/widgets"},"next":{"title":"Terminal Size Changes","permalink":"/docs/advanced/terminal-size"}}');var r=t(4848),s=t(8453);const l={sidebar_position:6},a="Mouse Support",o={},c=[{value:"Mouse Support Basics",id:"mouse-support-basics",level:2},{value:"Enabling Mouse Support",id:"enabling-mouse-support",level:3},{value:"Mouse Event Types",id:"mouse-event-types",level:2},{value:"Handling Mouse Events",id:"handling-mouse-events",level:2},{value:"Mouse Tracking Modes",id:"mouse-tracking-modes",level:2},{value:"Creating Interactive UI Elements",id:"creating-interactive-ui-elements",level:2},{value:"Mouse Support in LineReader",id:"mouse-support-in-linereader",level:2},{value:"Terminal Compatibility",id:"terminal-compatibility",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"mouse-support",children:"Mouse Support"})}),"\n",(0,r.jsx)(n.p,{children:"JLine provides support for mouse events in terminal applications, allowing you to create more interactive and user-friendly command-line interfaces. This feature is particularly useful for applications that require point-and-click interactions, such as text editors, file browsers, or interactive menus."}),"\n",(0,r.jsx)(n.h2,{id:"mouse-support-basics",children:"Mouse Support Basics"}),"\n",(0,r.jsx)(n.p,{children:"Terminal mouse support works by capturing mouse events (clicks, movements, wheel scrolling) and translating them into escape sequences that can be processed by your application. JLine provides an abstraction layer that makes it easy to work with these events."}),"\n",(0,r.jsx)(n.h3,{id:"enabling-mouse-support",children:"Enabling Mouse Support"}),"\n",(0,r.jsx)(n.p,{children:"To enable mouse support in your JLine application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="MouseSupportBasicsExample.java" showLineNumbers',children:"import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\n\npublic class MouseSupportBasicsExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        try {\n            // highlight-start\n            // Enable mouse tracking\n            terminal.puts(Capability.enter_mouse_mode);\n            terminal.flush();\n            // highlight-end\n            \n            System.out.println(\"Mouse tracking enabled. Click anywhere in the terminal...\");\n            System.out.println(\"Press Enter to exit.\");\n            \n            // Simple event loop\n            while (true) {\n                int c = terminal.reader().read();\n                if (c == '\\r' || c == '\\n') {\n                    break;\n                }\n                \n                // Process input (including mouse events)\n                // Mouse events come as escape sequences\n                // We'll see how to properly handle these in the next examples\n            }\n        } finally {\n            // highlight-start\n            // Disable mouse tracking before exiting\n            terminal.puts(Capability.exit_mouse_mode);\n            terminal.flush();\n            // highlight-end\n            \n            terminal.close();\n        }\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"mouse-event-types",children:"Mouse Event Types"}),"\n",(0,r.jsx)(n.p,{children:"JLine can capture several types of mouse events:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mouse Clicks"}),": Left, middle, and right button clicks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mouse Movement"}),": Movement with buttons pressed or released"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mouse Wheel"}),": Scrolling up or down"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mouse Position"}),": Coordinates of the mouse pointer"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"handling-mouse-events",children:"Handling Mouse Events"}),"\n",(0,r.jsxs)(n.p,{children:["To properly handle mouse events, you need to parse the escape sequences that represent mouse actions. JLine's ",(0,r.jsx)(n.code,{children:"Terminal.MouseEvent"})," class helps with this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="MouseEventHandlingExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.terminal.Terminal.MouseEvent;\nimport org.jline.terminal.Terminal.MouseEventType;\nimport org.jline.terminal.Terminal.SignalHandler;\nimport org.jline.terminal.Terminal.Signal;\nimport org.jline.utils.InfoCmp.Capability;\nimport org.jline.utils.NonBlockingReader;\n\nimport java.io.IOException;\n\npublic class MouseEventHandlingExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        try {\n            // Set up signal handler for CTRL+C\n            terminal.handle(Signal.INT, SignalHandler.SIG_IGN);\n            \n            // Enable mouse tracking\n            terminal.puts(Capability.enter_mouse_mode);\n            terminal.flush();\n            \n            System.out.println("Mouse tracking enabled. Click or move the mouse in the terminal...");\n            System.out.println("Press \'q\' to exit.");\n            \n            NonBlockingReader reader = terminal.reader();\n            StringBuilder buffer = new StringBuilder();\n            boolean esc = false;\n            boolean bracket = false;\n            boolean mouse = false;\n            \n            // Event loop\n            while (true) {\n                int c = reader.read();\n                \n                // Check for \'q\' to exit\n                if (c == \'q\') {\n                    break;\n                }\n                \n                // highlight-start\n                // Parse escape sequences for mouse events\n                if (c == \'\\033\') {\n                    // ESC character - start of escape sequence\n                    esc = true;\n                    buffer.setLength(0);\n                } else if (esc && c == \'[\') {\n                    // [ character after ESC - potential mouse event\n                    bracket = true;\n                } else if (esc && bracket && c == \'M\') {\n                    // M character after ESC[ - confirmed mouse event\n                    mouse = true;\n                    buffer.setLength(0);\n                } else if (mouse && buffer.length() < 3) {\n                    // Collect the 3 bytes that define the mouse event\n                    buffer.append((char) c);\n                    \n                    if (buffer.length() == 3) {\n                        // We have a complete mouse event\n                        int b = buffer.charAt(0) - 32;\n                        int x = buffer.charAt(1) - 32;\n                        int y = buffer.charAt(2) - 32;\n                        \n                        // Decode the event type\n                        boolean press = (b & 3) != 3;\n                        boolean release = (b & 3) == 3;\n                        boolean wheel = (b & 64) != 0;\n                        \n                        // Determine which button was used\n                        String button = "unknown";\n                        if ((b & 3) == 0) button = "left";\n                        if ((b & 3) == 1) button = "middle";\n                        if ((b & 3) == 2) button = "right";\n                        \n                        // Print the event details\n                        terminal.writer().println(String.format(\n                            "Mouse event: %s button %s at position (%d,%d)",\n                            press ? "pressed" : (release ? "released" : (wheel ? "wheel" : "moved")),\n                            button,\n                            x, y\n                        ));\n                        terminal.flush();\n                        \n                        // Reset state\n                        esc = false;\n                        bracket = false;\n                        mouse = false;\n                    }\n                } else {\n                    // Not a mouse event or incomplete sequence\n                    esc = false;\n                    bracket = false;\n                    mouse = false;\n                }\n                // highlight-end\n            }\n        } finally {\n            // Disable mouse tracking before exiting\n            terminal.puts(Capability.exit_mouse_mode);\n            terminal.flush();\n            \n            terminal.close();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mouse-tracking-modes",children:"Mouse Tracking Modes"}),"\n",(0,r.jsx)(n.p,{children:"JLine supports different mouse tracking modes, which determine what types of events are reported:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="MouseTrackingModesExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\n\npublic class MouseTrackingModesExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        try {\n            // highlight-start\n            // Different mouse tracking modes\n            \n            // 1. Basic mouse tracking (clicks only)\n            terminal.puts(Capability.enter_mouse_mode);\n            \n            // 2. Extended mouse tracking (clicks and movement)\n            // This is terminal-dependent and may require specific escape sequences\n            terminal.writer().write("\\033[?1000;1002;1006;1015h");\n            \n            // 3. Any event tracking (clicks, movement, and position reports)\n            // This is terminal-dependent and may require specific escape sequences\n            terminal.writer().write("\\033[?1000;1003;1006;1015h");\n            // highlight-end\n            \n            terminal.flush();\n            \n            System.out.println("Enhanced mouse tracking enabled.");\n            System.out.println("Try clicking, moving, and scrolling the mouse.");\n            System.out.println("Press Enter to exit.");\n            \n            // Wait for Enter key\n            while (terminal.reader().read() != \'\\n\') {\n                // Process events\n            }\n        } finally {\n            // Disable all mouse tracking modes\n            terminal.puts(Capability.exit_mouse_mode);\n            terminal.writer().write("\\033[?1000;1002;1003;1006;1015l");\n            terminal.flush();\n            \n            terminal.close();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"creating-interactive-ui-elements",children:"Creating Interactive UI Elements"}),"\n",(0,r.jsx)(n.p,{children:"With mouse support, you can create interactive UI elements like buttons, menus, and selection lists:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="MouseInteractiveUIExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\nimport org.jline.utils.AttributedStyle;\nimport org.jline.utils.InfoCmp.Capability;\nimport org.jline.utils.Display;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MouseInteractiveUIExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        try {\n            // Enable mouse tracking\n            terminal.puts(Capability.enter_mouse_mode);\n            terminal.writer().write("\\033[?1000;1002;1006;1015h");\n            terminal.flush();\n            \n            // Create a display for managing the screen\n            Display display = new Display(terminal, true);\n            \n            // Define some buttons\n            List<Button> buttons = new ArrayList<>();\n            buttons.add(new Button(5, 3, "Button 1", () -> {\n                terminal.writer().println("Button 1 clicked!");\n                terminal.flush();\n            }));\n            buttons.add(new Button(5, 5, "Button 2", () -> {\n                terminal.writer().println("Button 2 clicked!");\n                terminal.flush();\n            }));\n            buttons.add(new Button(5, 7, "Exit", () -> {\n                // This will be used to exit the application\n            }));\n            \n            // Initial render\n            display.clear();\n            terminal.writer().println("Interactive UI Example");\n            terminal.writer().println("Click on the buttons below:");\n            terminal.writer().println();\n            \n            for (Button button : buttons) {\n                button.render(terminal);\n            }\n            \n            terminal.flush();\n            \n            // Event loop\n            boolean running = true;\n            StringBuilder buffer = new StringBuilder();\n            boolean esc = false;\n            boolean bracket = false;\n            boolean mouse = false;\n            \n            while (running) {\n                int c = terminal.reader().read();\n                \n                // Parse escape sequences for mouse events\n                if (c == \'\\033\') {\n                    esc = true;\n                    buffer.setLength(0);\n                } else if (esc && c == \'[\') {\n                    bracket = true;\n                } else if (esc && bracket && c == \'M\') {\n                    mouse = true;\n                    buffer.setLength(0);\n                } else if (mouse && buffer.length() < 3) {\n                    buffer.append((char) c);\n                    \n                    if (buffer.length() == 3) {\n                        int b = buffer.charAt(0) - 32;\n                        int x = buffer.charAt(1) - 32;\n                        int y = buffer.charAt(2) - 32;\n                        \n                        // Check if this is a mouse press event\n                        if ((b & 3) != 3 && (b & 64) == 0) {\n                            // Check if any button was clicked\n                            for (Button button : buttons) {\n                                if (button.isInside(x, y)) {\n                                    button.click();\n                                    \n                                    // Check if Exit button was clicked\n                                    if (button.getText().equals("Exit")) {\n                                        running = false;\n                                    }\n                                    \n                                    break;\n                                }\n                            }\n                        }\n                        \n                        // Reset state\n                        esc = false;\n                        bracket = false;\n                        mouse = false;\n                    }\n                } else {\n                    // Not a mouse event or incomplete sequence\n                    esc = false;\n                    bracket = false;\n                    mouse = false;\n                }\n            }\n        } finally {\n            // Disable mouse tracking before exiting\n            terminal.puts(Capability.exit_mouse_mode);\n            terminal.writer().write("\\033[?1000;1002;1003;1006;1015l");\n            terminal.flush();\n            \n            terminal.close();\n        }\n    }\n    \n    // Simple button class for demonstration\n    static class Button {\n        private final int x;\n        private final int y;\n        private final String text;\n        private final Runnable action;\n        \n        public Button(int x, int y, String text, Runnable action) {\n            this.x = x;\n            this.y = y;\n            this.text = text;\n            this.action = action;\n        }\n        \n        public void render(Terminal terminal) {\n            // Position cursor\n            terminal.writer().write("\\033[" + y + ";" + x + "H");\n            \n            // Draw button\n            AttributedString buttonText = new AttributedString(\n                "[ " + text + " ]",\n                AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE).bold()\n            );\n            buttonText.print(terminal.writer());\n        }\n        \n        public boolean isInside(int mouseX, int mouseY) {\n            return mouseY == y && mouseX >= x && mouseX < x + text.length() + 4;\n        }\n        \n        public void click() {\n            action.run();\n        }\n        \n        public String getText() {\n            return text;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"mouse-support-in-linereader",children:"Mouse Support in LineReader"}),"\n",(0,r.jsxs)(n.p,{children:["JLine's ",(0,r.jsx)(n.code,{children:"LineReader"})," can also be configured to handle mouse events:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="LineReaderMouseExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\n\npublic class LineReaderMouseExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        try {\n            // Enable mouse support\n            terminal.puts(Capability.enter_mouse_mode);\n            terminal.flush();\n            \n            // highlight-start\n            // Create a LineReader with mouse support\n            LineReader reader = LineReaderBuilder.builder()\n                    .terminal(terminal)\n                    .variable(LineReader.MOUSE, true)  // Enable mouse support\n                    .build();\n            // highlight-end\n            \n            System.out.println("Mouse support enabled in LineReader.");\n            System.out.println("Try clicking in the input line or using the mouse wheel.");\n            System.out.println("Type \'exit\' to quit.");\n            \n            // Read lines with mouse support\n            String line;\n            while (!(line = reader.readLine("prompt> ")).equalsIgnoreCase("exit")) {\n                System.out.println("You entered: " + line);\n            }\n        } finally {\n            // Disable mouse tracking before exiting\n            terminal.puts(Capability.exit_mouse_mode);\n            terminal.flush();\n            \n            terminal.close();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"terminal-compatibility",children:"Terminal Compatibility"}),"\n",(0,r.jsx)(n.p,{children:"Mouse support depends on the capabilities of the terminal emulator being used. Not all terminals support mouse events, and those that do may support different features or use different escape sequences."}),"\n",(0,r.jsx)(n.p,{children:"Here's a compatibility table for common terminal emulators:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Terminal Emulator"}),(0,r.jsx)(n.th,{children:"Basic Clicks"}),(0,r.jsx)(n.th,{children:"Mouse Movement"}),(0,r.jsx)(n.th,{children:"Mouse Wheel"}),(0,r.jsx)(n.th,{children:"Extended Reporting"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"xterm"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iTerm2"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GNOME Terminal"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Konsole"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"PuTTY"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Partial"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Windows Terminal"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"CMD.exe"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"No"}),(0,r.jsx)(n.td,{children:"No"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"MinTTY (Git Bash)"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"}),(0,r.jsx)(n.td,{children:"Yes"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"To check if a terminal supports mouse events:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"boolean supportsMouseTracking = terminal.getStringCapability(Capability.enter_mouse_mode) != null;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.p,{children:"When implementing mouse support in your JLine applications:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Always disable mouse tracking before exiting"}),": Failing to do so can leave the terminal in an inconsistent state."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Provide keyboard alternatives"}),": Not all users can or want to use a mouse, so always provide keyboard shortcuts for mouse actions."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Check for terminal capabilities"}),": Before enabling mouse support, check if the terminal supports it."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Handle terminal resizing"}),": Mouse coordinates can change when the terminal is resized, so be prepared to update your UI accordingly."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use clear visual indicators"}),": Make it obvious which elements are clickable and provide visual feedback on mouse hover and click."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test in different terminals"}),": Mouse support varies across terminal emulators, so test your application in multiple environments."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Consider accessibility"}),": Some users rely on screen readers or other assistive technologies that may not work well with mouse-based interfaces."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Mouse support in JLine allows you to create more interactive and user-friendly terminal applications. By capturing and processing mouse events, you can implement clickable buttons, menus, selection lists, and other UI elements that would be cumbersome to navigate using only the keyboard."}),"\n",(0,r.jsx)(n.p,{children:"Remember that mouse support is an enhancement, not a replacement for keyboard navigation. Always ensure your application is fully usable without a mouse for maximum accessibility and compatibility."})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);