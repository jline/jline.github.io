"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[5456],{8047:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"modules/style","title":"JLine Style","description":"The jline-style module provides a powerful styling API for terminal output. It allows you to define and apply styles to text, create color schemes, and maintain consistent styling across your application.","source":"@site/docs/modules/style.md","sourceDirName":"modules","slug":"/modules/style","permalink":"/docs/modules/style","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/modules/style.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"JLine Builtins","permalink":"/docs/modules/builtins"},"next":{"title":"JLine Console","permalink":"/docs/modules/console"}}');var i=t(4848),l=t(8453);const s={sidebar_position:3},a="JLine Style",o={},d=[{value:"Maven Dependency",id:"maven-dependency",level:2},{value:"Basic Styling",id:"basic-styling",level:2},{value:"Style Expressions",id:"style-expressions",level:2},{value:"Style Resolver",id:"style-resolver",level:2},{value:"Style Configuration",id:"style-configuration",level:2},{value:"Styling Tables and Structured Output",id:"styling-tables-and-structured-output",level:2},{value:"Styling Progress Indicators",id:"styling-progress-indicators",level:2},{value:"Best Practices",id:"best-practices",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"jline-style",children:"JLine Style"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"jline-style"})," module provides a powerful styling API for terminal output. It allows you to define and apply styles to text, create color schemes, and maintain consistent styling across your application."]}),"\n",(0,i.jsx)(n.h2,{id:"maven-dependency",children:"Maven Dependency"}),"\n",(0,i.jsx)(n.p,{children:"To use the style module, add the following dependency to your project:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.jline</groupId>\n    <artifactId>jline-style</artifactId>\n    <version>3.25.0</version>\n</dependency>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"basic-styling",children:"Basic Styling"}),"\n",(0,i.jsx)(n.p,{children:"The style module provides a high-level API for styling text:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="BasicStylingExample.java" showLineNumbers',children:'import org.jline.style.StyleExpression;\nimport org.jline.style.StyleResolver;\nimport org.jline.style.Styler;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\npublic class BasicStylingExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        PrintWriter writer = terminal.writer();\n        \n        // highlight-start\n        // Create a styler\n        Styler styler = Styler.defaultStyler();\n        \n        // Style text using style expressions\n        AttributedString styledText = styler.style("This is @{bold,fg:red}red bold text@{} and this is @{italic,fg:blue}blue italic text@{}.");\n        // highlight-end\n        \n        // Print the styled text\n        styledText.println(terminal);\n        writer.flush();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"style-expressions",children:"Style Expressions"}),"\n",(0,i.jsx)(n.p,{children:"Style expressions use a simple syntax to define text styles:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"@{style-attributes}text@{}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Where ",(0,i.jsx)(n.code,{children:"style-attributes"})," is a comma-separated list of style attributes:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="StyleExpressionExample.java"',children:'import org.jline.style.Styler;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class StyleExpressionExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        Styler styler = Styler.defaultStyler();\n        \n        // highlight-start\n        // Basic foreground and background colors\n        styler.style("@{fg:red}Red text@{}").println(terminal);\n        styler.style("@{bg:blue}Blue background@{}").println(terminal);\n        \n        // Text attributes\n        styler.style("@{bold}Bold text@{}").println(terminal);\n        styler.style("@{italic}Italic text@{}").println(terminal);\n        styler.style("@{underline}Underlined text@{}").println(terminal);\n        styler.style("@{blink}Blinking text@{}").println(terminal);\n        styler.style("@{inverse}Inverse text@{}").println(terminal);\n        \n        // Combining attributes\n        styler.style("@{bold,fg:green,bg:black}Bold green text on black background@{}").println(terminal);\n        // highlight-end\n        \n        // Named styles (defined in the styler)\n        styler.style("@{error}Error message@{}").println(terminal);\n        styler.style("@{warning}Warning message@{}").println(terminal);\n        styler.style("@{info}Info message@{}").println(terminal);\n        \n        terminal.flush();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"style-resolver",children:"Style Resolver"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"StyleResolver"})," allows you to define named styles and resolve style expressions:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="StyleResolverExample.java" showLineNumbers',children:'import org.jline.style.StyleExpression;\nimport org.jline.style.StyleResolver;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\nimport org.jline.utils.AttributedStyle;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class StyleResolverExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // highlight-start\n        // Create a map of named styles\n        Map<String, AttributedStyle> styles = new HashMap<>();\n        styles.put("error", AttributedStyle.DEFAULT.foreground(AttributedStyle.RED).bold());\n        styles.put("warning", AttributedStyle.DEFAULT.foreground(AttributedStyle.YELLOW));\n        styles.put("info", AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE));\n        styles.put("success", AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN));\n        \n        // Create a style resolver with the named styles\n        StyleResolver resolver = new StyleResolver(styles);\n        // highlight-end\n        \n        // Resolve style expressions\n        AttributedString errorMessage = resolver.resolve("@{error}Something went wrong!@{}");\n        AttributedString warningMessage = resolver.resolve("@{warning}Be careful!@{}");\n        AttributedString infoMessage = resolver.resolve("@{info}Just so you know...@{}");\n        AttributedString successMessage = resolver.resolve("@{success}Operation completed successfully.@{}");\n        \n        // Print the styled messages\n        errorMessage.println(terminal);\n        warningMessage.println(terminal);\n        infoMessage.println(terminal);\n        successMessage.println(terminal);\n        \n        // Combine named styles with inline styles\n        AttributedString combinedStyle = resolver.resolve(\n                "@{error}Error:@{} @{bold,fg:white}Cannot open file @{italic}\'example.txt\'@{}");\n        combinedStyle.println(terminal);\n        \n        terminal.flush();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"style-configuration",children:"Style Configuration"}),"\n",(0,i.jsx)(n.p,{children:"You can load style definitions from configuration files:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="StyleConfigurationExample.java"',children:'import org.jline.style.StyleExpression;\nimport org.jline.style.StyleResolver;\nimport org.jline.style.Styler;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.Properties;\n\npublic class StyleConfigurationExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // highlight-start\n        // Define styles in a properties format\n        String styleConfig = \n                "error = fg:red,bold\\n" +\n                "warning = fg:yellow\\n" +\n                "info = fg:blue\\n" +\n                "success = fg:green\\n" +\n                "header = fg:cyan,underline\\n" +\n                "highlight = bg:yellow,fg:black";\n        \n        // Load the styles\n        Properties props = new Properties();\n        props.load(new StringReader(styleConfig));\n        \n        // Create a styler with the loaded styles\n        Styler styler = Styler.create(props);\n        // highlight-end\n        \n        // Use the configured styles\n        styler.style("@{header}System Information@{}").println(terminal);\n        styler.style("@{info}OS: @{highlight}Linux@{}").println(terminal);\n        styler.style("@{info}User: @{highlight}admin@{}").println(terminal);\n        styler.style("@{success}All systems operational@{}").println(terminal);\n        \n        terminal.flush();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"styling-tables-and-structured-output",children:"Styling Tables and Structured Output"}),"\n",(0,i.jsx)(n.p,{children:"The style module works well with structured output like tables:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="StyledTableExample.java" showLineNumbers',children:'import org.jline.builtins.Tables;\nimport org.jline.builtins.Tables.Column;\nimport org.jline.builtins.Tables.ColumnType;\nimport org.jline.style.Styler;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Properties;\n\npublic class StyledTableExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Define styles\n        Properties styleProps = new Properties();\n        styleProps.setProperty("header", "fg:cyan,bold");\n        styleProps.setProperty("error", "fg:red");\n        styleProps.setProperty("warning", "fg:yellow");\n        styleProps.setProperty("ok", "fg:green");\n        \n        Styler styler = Styler.create(styleProps);\n        \n        // Define table columns\n        List<Column> columns = Arrays.asList(\n                new Column("Service", ColumnType.String),\n                new Column("Status", ColumnType.String),\n                new Column("Message", ColumnType.String)\n        );\n        \n        // Create table data with styled content\n        List<List<AttributedString>> data = new ArrayList<>();\n        data.add(Arrays.asList(\n                new AttributedString("Database"),\n                styler.style("@{ok}Running@{}"),\n                new AttributedString("Connected to MySQL 8.0")\n        ));\n        data.add(Arrays.asList(\n                new AttributedString("Web Server"),\n                styler.style("@{warning}Degraded@{}"),\n                new AttributedString("High load detected")\n        ));\n        data.add(Arrays.asList(\n                new AttributedString("Cache"),\n                styler.style("@{error}Down@{}"),\n                new AttributedString("Connection refused")\n        ));\n        \n        // Build and display the table\n        Tables.TableBuilder tableBuilder = new Tables.TableBuilder(columns);\n        tableBuilder.addAllAttributedString(data);\n        \n        Tables.Table table = tableBuilder.build();\n        AttributedString tableString = table.toAttributedString(\n                terminal.getWidth(), \n                true,  // display borders\n                true   // display header\n        );\n        \n        tableString.println(terminal);\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"styling-progress-indicators",children:"Styling Progress Indicators"}),"\n",(0,i.jsx)(n.p,{children:"You can use the style module to create styled progress indicators:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="StyledProgressExample.java"',children:'import org.jline.style.Styler;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedStringBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\n\npublic class StyledProgressExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        Styler styler = Styler.defaultStyler();\n        \n        // Clear screen\n        terminal.puts(Capability.clear_screen);\n        \n        // highlight-start\n        // Create a styled progress bar\n        for (int i = 0; i <= 100; i++) {\n            // Calculate progress bar width\n            int width = 50;\n            int completed = width * i / 100;\n            \n            // Build the progress bar\n            AttributedStringBuilder builder = new AttributedStringBuilder();\n            builder.append("\\r");\n            builder.append(styler.style("@{bold}Progress: @{fg:green}["));\n            \n            // Completed portion\n            builder.append(styler.style("@{fg:green}" + "=".repeat(completed)));\n            \n            // Remaining portion\n            builder.append(styler.style("@{fg:black,bg:white}" + " ".repeat(width - completed)));\n            \n            builder.append(styler.style("@{fg:green}]@{} "));\n            builder.append(styler.style("@{bold}" + i + "%"));\n            \n            // Print the progress bar\n            terminal.writer().print(builder.toAnsi(terminal));\n            terminal.flush();\n            \n            // Simulate work\n            try {\n                Thread.sleep(50);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n        // highlight-end\n        \n        terminal.writer().println();\n        terminal.writer().println(styler.style("@{bold,fg:green}Complete!@{}"));\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(n.p,{children:"When using the JLine style module, consider these best practices:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Define a Consistent Style Palette"}),": Create a set of named styles for your application and use them consistently."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Load Styles from Configuration"}),": Allow users to customize styles by loading style definitions from configuration files."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Semantic Style Names"}),': Name styles based on their semantic meaning (e.g., "error", "warning", "info") rather than their appearance.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Check Terminal Capabilities"}),": Some terminals may not support all styling features, so check capabilities before using advanced styles."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Provide Fallbacks"}),": Define fallback styles for terminals with limited capabilities."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Separate Style from Content"}),": Keep style definitions separate from content to make it easier to change the appearance without modifying the code."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Style Expressions for Complex Styling"}),": Style expressions provide a concise way to apply multiple style attributes."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Consider Accessibility"}),": Choose colors and styles that are accessible to users with visual impairments."]}),"\n"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const i={},l=r.createContext(i);function s(e){const n=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(l.Provider,{value:n},e.children)}}}]);