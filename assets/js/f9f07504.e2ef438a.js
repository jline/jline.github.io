"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[6594],{7907:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"advanced/screen-clearing","title":"Screen Clearing and Terminal Control","description":"Controlling the terminal display is an important aspect of creating interactive command-line applications. JLine provides several methods for clearing the screen, positioning the cursor, and controlling other terminal attributes. This guide covers the proper techniques for screen clearing and terminal control in JLine applications.","source":"@site/docs/advanced/screen-clearing.md","sourceDirName":"advanced","slug":"/advanced/screen-clearing","permalink":"/docs/advanced/screen-clearing","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/advanced/screen-clearing.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Terminal Size Changes","permalink":"/docs/advanced/terminal-size"},"next":{"title":"JLine Integration with Other Libraries","permalink":"/docs/advanced/library-integration"}}');var r=i(4848),a=i(8453);const l={sidebar_position:10},s="Screen Clearing and Terminal Control",o={},c=[{value:"Clearing the Screen",id:"clearing-the-screen",level:2},{value:"Using Terminal Capabilities",id:"using-terminal-capabilities",level:3},{value:"Using the LineReader Widget",id:"using-the-linereader-widget",level:3},{value:"Using ANSI Escape Sequences",id:"using-ansi-escape-sequences",level:3},{value:"Cursor Positioning",id:"cursor-positioning",level:2},{value:"Moving the Cursor",id:"moving-the-cursor",level:3},{value:"Saving and Restoring Cursor Position",id:"saving-and-restoring-cursor-position",level:3},{value:"Erasing Parts of the Screen",id:"erasing-parts-of-the-screen",level:2},{value:"Terminal Control Sequences",id:"terminal-control-sequences",level:2},{value:"Creating a Status Line",id:"creating-a-status-line",level:2},{value:"Using the Display Class",id:"using-the-display-class",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"screen-clearing-and-terminal-control",children:"Screen Clearing and Terminal Control"})}),"\n",(0,r.jsx)(n.p,{children:"Controlling the terminal display is an important aspect of creating interactive command-line applications. JLine provides several methods for clearing the screen, positioning the cursor, and controlling other terminal attributes. This guide covers the proper techniques for screen clearing and terminal control in JLine applications."}),"\n",(0,r.jsx)(n.h2,{id:"clearing-the-screen",children:"Clearing the Screen"}),"\n",(0,r.jsx)(n.p,{children:"There are several ways to clear the screen in JLine, each with its own advantages:"}),"\n",(0,r.jsx)(n.h3,{id:"using-terminal-capabilities",children:"Using Terminal Capabilities"}),"\n",(0,r.jsx)(n.p,{children:"The most reliable way to clear the screen is to use terminal capabilities:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="ClearScreenCapabilityExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\n\npublic class ClearScreenCapabilityExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Display some text\n        terminal.writer().println("This text will be cleared...");\n        terminal.writer().println("Wait for it...");\n        terminal.flush();\n        \n        // Wait for 2 seconds\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        \n        // highlight-start\n        // Clear the screen using terminal capabilities\n        terminal.puts(Capability.clear_screen);\n        terminal.flush();\n        // highlight-end\n        \n        terminal.writer().println("Screen has been cleared!");\n        terminal.writer().println("This is new content after clearing.");\n        terminal.flush();\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This method uses the terminal's native capability to clear the screen, which is the most compatible approach across different terminal types."}),"\n",(0,r.jsx)(n.h3,{id:"using-the-linereader-widget",children:"Using the LineReader Widget"}),"\n",(0,r.jsxs)(n.p,{children:["If you're using a ",(0,r.jsx)(n.code,{children:"LineReader"}),", you can use the built-in clear screen widget:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="ClearScreenWidgetExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class ClearScreenWidgetExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // Display some text\n        terminal.writer().println("This text will be cleared...");\n        terminal.writer().println("Wait for it...");\n        terminal.flush();\n        \n        // Wait for 2 seconds\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        \n        // highlight-start\n        // Clear the screen using the LineReader widget\n        reader.callWidget(LineReader.CLEAR_SCREEN);\n        // highlight-end\n        \n        terminal.writer().println("Screen has been cleared!");\n        terminal.writer().println("This is new content after clearing.");\n        terminal.flush();\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This method is convenient when you're already using a ",(0,r.jsx)(n.code,{children:"LineReader"})," in your application."]}),"\n",(0,r.jsx)(n.h3,{id:"using-ansi-escape-sequences",children:"Using ANSI Escape Sequences"}),"\n",(0,r.jsx)(n.p,{children:"You can also use ANSI escape sequences directly, though this is less portable:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="ClearScreenAnsiExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class ClearScreenAnsiExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Display some text\n        terminal.writer().println("This text will be cleared...");\n        terminal.writer().println("Wait for it...");\n        terminal.flush();\n        \n        // Wait for 2 seconds\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        \n        // highlight-start\n        // Clear the screen using ANSI escape sequence\n        terminal.writer().print("\\033[2J\\033[H");\n        terminal.flush();\n        // highlight-end\n        \n        terminal.writer().println("Screen has been cleared!");\n        terminal.writer().println("This is new content after clearing.");\n        terminal.flush();\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"This method works in most modern terminals but may not be supported in all environments."}),"\n",(0,r.jsx)(n.h2,{id:"cursor-positioning",children:"Cursor Positioning"}),"\n",(0,r.jsx)(n.p,{children:"Controlling the cursor position is essential for creating interactive terminal interfaces:"}),"\n",(0,r.jsx)(n.h3,{id:"moving-the-cursor",children:"Moving the Cursor"}),"\n",(0,r.jsx)(n.p,{children:"You can move the cursor to a specific position using terminal capabilities:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="CursorPositioningExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\n\npublic class CursorPositioningExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Clear the screen first\n        terminal.puts(Capability.clear_screen);\n        terminal.flush();\n        \n        // highlight-start\n        // Move cursor to position (5, 10) - row 5, column 10\n        moveCursor(terminal, 5, 10);\n        terminal.writer().print("Text at position (5, 10)");\n        \n        // Move cursor to position (8, 15)\n        moveCursor(terminal, 8, 15);\n        terminal.writer().print("Text at position (8, 15)");\n        \n        // Move cursor to position (12, 5)\n        moveCursor(terminal, 12, 5);\n        terminal.writer().print("Text at position (12, 5)");\n        // highlight-end\n        \n        terminal.flush();\n        \n        // Move cursor to the bottom\n        moveCursor(terminal, 20, 1);\n        terminal.writer().println("\\nPress Enter to exit.");\n        terminal.flush();\n        \n        terminal.reader().readLine();\n        terminal.close();\n    }\n    \n    // highlight-start\n    // Helper method to move the cursor to a specific position\n    private static void moveCursor(Terminal terminal, int row, int column) {\n        // Use the cursor_address capability if available\n        String cap = terminal.getStringCapability(Capability.cursor_address);\n        if (cap != null) {\n            terminal.puts(Capability.cursor_address, row, column);\n        } else {\n            // Fall back to ANSI escape sequence\n            terminal.writer().print("\\033[" + row + ";" + column + "H");\n        }\n        terminal.flush();\n    }\n    // highlight-end\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"saving-and-restoring-cursor-position",children:"Saving and Restoring Cursor Position"}),"\n",(0,r.jsx)(n.p,{children:"You can save and restore the cursor position:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="SaveRestoreCursorExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\n\npublic class SaveRestoreCursorExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Clear the screen\n        terminal.puts(Capability.clear_screen);\n        terminal.flush();\n        \n        // Write some initial text\n        terminal.writer().println("Initial text line 1");\n        terminal.writer().println("Initial text line 2");\n        terminal.writer().println("Initial text line 3");\n        terminal.flush();\n        \n        // highlight-start\n        // Save cursor position\n        terminal.puts(Capability.save_cursor);\n        terminal.flush();\n        \n        // Move cursor to a different position\n        terminal.puts(Capability.cursor_address, 10, 5);\n        terminal.writer().print("This text is at position (10, 5)");\n        terminal.flush();\n        \n        // Wait for 2 seconds\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        \n        // Restore cursor position\n        terminal.puts(Capability.restore_cursor);\n        terminal.flush();\n        // highlight-end\n        \n        terminal.writer().println("Cursor has been restored to its original position");\n        terminal.writer().println("This text continues from where we left off");\n        terminal.flush();\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"erasing-parts-of-the-screen",children:"Erasing Parts of the Screen"}),"\n",(0,r.jsx)(n.p,{children:"Sometimes you need to erase only part of the screen:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="ErasePartsExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\n\npublic class ErasePartsExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Clear the screen\n        terminal.puts(Capability.clear_screen);\n        terminal.flush();\n        \n        // Write some text\n        terminal.writer().println("Line 1: This line will remain");\n        terminal.writer().println("Line 2: This line will be erased");\n        terminal.writer().println("Line 3: This line will be erased");\n        terminal.writer().println("Line 4: This line will remain");\n        terminal.flush();\n        \n        // Wait for 2 seconds\n        try {\n            Thread.sleep(2000);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        \n        // highlight-start\n        // Move cursor to the beginning of line 2\n        terminal.puts(Capability.cursor_address, 2, 1);\n        \n        // Erase from cursor to end of line\n        terminal.puts(Capability.clr_eol);\n        \n        // Move cursor to the beginning of line 3\n        terminal.puts(Capability.cursor_address, 3, 1);\n        \n        // Erase from cursor to end of line\n        terminal.puts(Capability.clr_eol);\n        // highlight-end\n        \n        terminal.flush();\n        \n        // Move cursor to the bottom\n        terminal.puts(Capability.cursor_address, 5, 1);\n        terminal.writer().println("Lines 2 and 3 have been erased");\n        terminal.flush();\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"terminal-control-sequences",children:"Terminal Control Sequences"}),"\n",(0,r.jsxs)(n.p,{children:["JLine provides access to various terminal control sequences through the ",(0,r.jsx)(n.code,{children:"Capability"})," enum:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="TerminalControlSequencesExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\n\npublic class TerminalControlSequencesExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Clear the screen\n        terminal.puts(Capability.clear_screen);\n        terminal.flush();\n        \n        terminal.writer().println("Terminal Control Sequences Example");\n        terminal.writer().println("----------------------------------");\n        terminal.writer().println();\n        terminal.flush();\n        \n        // highlight-start\n        // Turn on bold mode\n        terminal.puts(Capability.enter_bold_mode);\n        terminal.writer().println("This text is bold");\n        \n        // Turn off attributes\n        terminal.puts(Capability.exit_attribute_mode);\n        terminal.writer().println("This text is normal");\n        \n        // Turn on underline mode\n        terminal.puts(Capability.enter_underline_mode);\n        terminal.writer().println("This text is underlined");\n        \n        // Turn off attributes\n        terminal.puts(Capability.exit_attribute_mode);\n        terminal.writer().println("This text is normal");\n        \n        // Turn on standout mode (usually reverse video)\n        terminal.puts(Capability.enter_standout_mode);\n        terminal.writer().println("This text is in standout mode");\n        \n        // Turn off attributes\n        terminal.puts(Capability.exit_attribute_mode);\n        terminal.writer().println("This text is normal");\n        \n        // Turn on blinking mode\n        terminal.puts(Capability.enter_blink_mode);\n        terminal.writer().println("This text is blinking (if supported)");\n        \n        // Turn off attributes\n        terminal.puts(Capability.exit_attribute_mode);\n        // highlight-end\n        \n        terminal.writer().println();\n        terminal.writer().println("Press Enter to exit.");\n        terminal.flush();\n        \n        terminal.reader().readLine();\n        terminal.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-status-line",children:"Creating a Status Line"}),"\n",(0,r.jsx)(n.p,{children:"You can use terminal control to create a persistent status line:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="StatusLineExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\npublic class StatusLineExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Clear the screen\n        terminal.puts(Capability.clear_screen);\n        terminal.flush();\n        \n        // Get terminal dimensions\n        int height = terminal.getHeight();\n        int width = terminal.getWidth();\n        \n        // Main content\n        terminal.writer().println("Status Line Example");\n        terminal.writer().println("------------------");\n        terminal.writer().println();\n        terminal.writer().println("This example demonstrates a persistent status line");\n        terminal.writer().println("at the bottom of the terminal.");\n        terminal.writer().println();\n        terminal.writer().println("The status line will update every second.");\n        terminal.writer().println();\n        terminal.writer().println("Press Enter to exit.");\n        terminal.flush();\n        \n        // Create a thread to update the status line\n        Thread statusThread = new Thread(() -> {\n            try {\n                while (!Thread.interrupted()) {\n                    updateStatusLine(terminal, height, width);\n                    Thread.sleep(1000);\n                }\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n        statusThread.setDaemon(true);\n        statusThread.start();\n        \n        // Wait for Enter key\n        terminal.reader().readLine();\n        \n        // Clean up\n        statusThread.interrupt();\n        terminal.close();\n    }\n    \n    // highlight-start\n    private static void updateStatusLine(Terminal terminal, int height, int width) throws IOException {\n        // Save cursor position\n        terminal.puts(Capability.save_cursor);\n        \n        // Move to the bottom line\n        terminal.puts(Capability.cursor_address, height - 1, 1);\n        \n        // Clear the line\n        terminal.puts(Capability.clr_eol);\n        \n        // Create status line content\n        String time = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));\n        String status = "Status: Running";\n        String memory = "Memory: " + (Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory()) / (1024 * 1024) + "MB";\n        \n        // Format the status line\n        StringBuilder statusLine = new StringBuilder();\n        \n        // Add reverse video for the entire line\n        terminal.puts(Capability.enter_standout_mode);\n        \n        // Left-aligned time\n        statusLine.append(time);\n        \n        // Center-aligned status\n        int leftPadding = (width - status.length()) / 2 - time.length();\n        if (leftPadding > 0) {\n            statusLine.append(" ".repeat(leftPadding));\n        }\n        statusLine.append(status);\n        \n        // Right-aligned memory usage\n        int rightPadding = width - statusLine.length() - memory.length();\n        if (rightPadding > 0) {\n            statusLine.append(" ".repeat(rightPadding));\n        }\n        statusLine.append(memory);\n        \n        // Ensure the line fills the width\n        if (statusLine.length() < width) {\n            statusLine.append(" ".repeat(width - statusLine.length()));\n        }\n        \n        // Write the status line\n        terminal.writer().print(statusLine.toString());\n        \n        // Turn off reverse video\n        terminal.puts(Capability.exit_standout_mode);\n        \n        // Restore cursor position\n        terminal.puts(Capability.restore_cursor);\n        \n        terminal.flush();\n    }\n    // highlight-end\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"using-the-display-class",children:"Using the Display Class"}),"\n",(0,r.jsxs)(n.p,{children:["For more complex screen management, JLine provides the ",(0,r.jsx)(n.code,{children:"Display"})," class:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="DisplayClassExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\nimport org.jline.utils.AttributedStyle;\nimport org.jline.utils.Display;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DisplayClassExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // highlight-start\n        // Create a display for managing the screen\n        Display display = new Display(terminal, true);\n        \n        // Create a list of lines to display\n        List<AttributedString> lines = new ArrayList<>();\n        lines.add(new AttributedString("Display Class Example", \n                AttributedStyle.DEFAULT.bold()));\n        lines.add(new AttributedString("---------------------"));\n        lines.add(new AttributedString(""));\n        lines.add(new AttributedString("The Display class provides efficient screen management."));\n        lines.add(new AttributedString("It only updates the parts of the screen that have changed."));\n        lines.add(new AttributedString(""));\n        lines.add(new AttributedString("This example will update a counter every second."));\n        lines.add(new AttributedString(""));\n        lines.add(new AttributedString("Counter: 0", \n                AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE)));\n        lines.add(new AttributedString(""));\n        lines.add(new AttributedString("Press Enter to exit."));\n        \n        // Update the display\n        display.update(lines, 0);\n        // highlight-end\n        \n        // Create a thread to update the counter\n        Thread counterThread = new Thread(() -> {\n            try {\n                for (int i = 1; i <= 10 && !Thread.interrupted(); i++) {\n                    Thread.sleep(1000);\n                    \n                    // Update only the counter line\n                    lines.set(8, new AttributedString("Counter: " + i, \n                            AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE)));\n                    \n                    // Redisplay\n                    display.update(lines, 0);\n                }\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n        counterThread.setDaemon(true);\n        counterThread.start();\n        \n        // Wait for Enter key\n        terminal.reader().readLine();\n        \n        // Clean up\n        counterThread.interrupt();\n        terminal.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.p,{children:"When working with screen clearing and terminal control:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use terminal capabilities"}),": Prefer using terminal capabilities over hardcoded ANSI escape sequences for better compatibility."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Check capability support"}),": Not all terminals support all capabilities. Check if a capability is supported before using it:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"if (terminal.getStringCapability(Capability.clear_screen) != null) {\n    terminal.puts(Capability.clear_screen);\n} else {\n    // Fall back to a different method\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Flush after terminal operations"}),": Always call ",(0,r.jsx)(n.code,{children:"terminal.flush()"})," after using ",(0,r.jsx)(n.code,{children:"terminal.puts()"})," to ensure the changes are sent to the terminal."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Save and restore cursor position"}),": When temporarily moving the cursor, save its position first and restore it afterward."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Handle terminal resize"}),": Update your display when the terminal is resized to ensure proper layout."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Clean up on exit"}),": Restore the terminal to a clean state before exiting your application."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use the Display class for complex UIs"}),": For complex screen management, use the ",(0,r.jsx)(n.code,{children:"Display"})," class to efficiently update only the changed parts of the screen."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Provide keyboard navigation"}),": Don't rely solely on cursor positioning; provide keyboard navigation for accessibility."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test in different terminals"}),": Test your application in various terminal emulators to ensure compatibility."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Gracefully handle unsupported features"}),": Provide fallbacks for terminals that don't support certain capabilities."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["JLine provides powerful tools for screen clearing and terminal control, allowing you to create sophisticated terminal user interfaces. By using terminal capabilities and the ",(0,r.jsx)(n.code,{children:"Display"})," class, you can create responsive, efficient, and compatible terminal applications that provide a great user experience across different terminal environments."]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>s});var t=i(6540);const r={},a=t.createContext(r);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);