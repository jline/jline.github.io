"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[9441],{8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>d});var r=i(6540);const t={},a=r.createContext(t);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(a.Provider,{value:n},e.children)}},9472:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"line-reader","title":"Line Reading","description":"The LineReader is one of JLine\'s core components, providing sophisticated line editing capabilities for your command-line applications.","source":"@site/docs/line-reader.md","sourceDirName":".","slug":"/line-reader","permalink":"/docs/line-reader","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/line-reader.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Terminal Handling","permalink":"/docs/terminal"},"next":{"title":"Tab Completion","permalink":"/docs/tab-completion"}}');var t=i(4848),a=i(8453);const l={sidebar_position:3},d="Line Reading",s={},o=[{value:"Creating a LineReader",id:"creating-a-linereader",level:2},{value:"Reading Input",id:"reading-input",level:2},{value:"Line Reader Options",id:"line-reader-options",level:2},{value:"Customizing Prompts",id:"customizing-prompts",level:2},{value:"Handling Special Keys",id:"handling-special-keys",level:2},{value:"Line Editing Features",id:"line-editing-features",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Multi-line Input",id:"multi-line-input",level:3},{value:"Custom Validators",id:"custom-validators",level:3},{value:"Custom Highlighters",id:"custom-highlighters",level:3},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"line-reading",children:"Line Reading"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"LineReader"})," is one of JLine's core components, providing sophisticated line editing capabilities for your command-line applications."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-linereader",children:"Creating a LineReader"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"LineReaderBuilder"})," to create a ",(0,t.jsx)(n.code,{children:"LineReader"})," instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="LineReaderCreationExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.nio.file.Paths;\n\npublic class LineReaderCreationExample {\n    public static void main(String[] args) throws IOException {\n        // Create a terminal\n        Terminal terminal = TerminalBuilder.builder().build();\n\n        // highlight-start\n        // Create a basic line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        // highlight-end\n\n        // Create a line reader with custom configuration\n        LineReader customReader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .appName("MyApp")\n                .variable(LineReader.HISTORY_FILE, Paths.get("history.txt"))\n                .option(LineReader.Option.AUTO_FRESH_LINE, true)\n                .option(LineReader.Option.HISTORY_BEEP, false)\n                .build();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"reading-input",children:"Reading Input"}),"\n",(0,t.jsxs)(n.p,{children:["The basic method for reading input is ",(0,t.jsx)(n.code,{children:"readLine()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="LineReaderInputExample.java"',children:'import org.jline.reader.LineReader;\n\npublic class LineReaderInputExample {\n    public void demonstrateInput(LineReader reader) {\n        // Read a line with a prompt\n        String line = reader.readLine("prompt> ");\n        System.out.println("You entered: " + line);\n\n        // highlight-start\n        // Read a line with a right prompt (displayed at the right edge)\n        String lineWithRightPrompt = reader.readLine("prompt> ", "right prompt", (Character) null);\n        System.out.println("You entered: " + lineWithRightPrompt);\n        // highlight-end\n\n        // Read a masked line (for passwords)\n        String password = reader.readLine("Password: ", \'*\');\n        System.out.println("Password accepted");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"line-reader-options",children:"Line Reader Options"}),"\n",(0,t.jsxs)(n.p,{children:["JLine's ",(0,t.jsx)(n.code,{children:"LineReader"})," supports numerous options to customize behavior:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="LineReaderOptionsExample.java"',children:"import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\n\npublic class LineReaderOptionsExample {\n    public LineReader configureOptions(Terminal terminal) {\n        // highlight-start\n        // Configure options during creation\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .option(LineReader.Option.CASE_INSENSITIVE, true)\n                .option(LineReader.Option.AUTO_REMOVE_SLASH, true)\n                .build();\n        // highlight-end\n\n        // Or set options after creation\n        reader.setOpt(LineReader.Option.HISTORY_IGNORE_DUPS);\n        reader.unsetOpt(LineReader.Option.HISTORY_BEEP);\n\n        return reader;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Common options include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CASE_INSENSITIVE"}),": Case-insensitive completion"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"AUTO_FRESH_LINE"}),": Automatically add a newline if the cursor isn't at the start of a line"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HISTORY_BEEP"}),": Beep when navigating past the end of history"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HISTORY_IGNORE_DUPS"}),": Don't add duplicate entries to history"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HISTORY_IGNORE_SPACE"}),": Don't add entries starting with space to history"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"MENU_COMPLETE"}),": Cycle through completions on tab"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"customizing-prompts",children:"Customizing Prompts"}),"\n",(0,t.jsx)(n.p,{children:"JLine supports rich prompt customization:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="CustomPromptExample.java"',children:'import org.jline.reader.LineReader;\n\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.function.Supplier;\n\npublic class CustomPromptExample {\n    public void demonstratePrompts(LineReader reader) {\n        // Simple text prompt\n        String line1 = reader.readLine("simple> ");\n\n        // highlight-start\n        // Colored prompt (ANSI escape sequences)\n        String line2 = reader.readLine("\\u001B[1;32msimple>\\u001B[0m ");\n        // highlight-end\n\n        // Dynamic prompt\n        Supplier<String> timePrompt = () -> {\n            LocalTime now = LocalTime.now();\n            return now.format(DateTimeFormatter.ofPattern("HH:mm:ss")) + "> ";\n        };\n        String line3 = reader.readLine(timePrompt);\n\n        System.out.printf("Lines entered: %s, %s, %s%n", line1, line2, line3);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"handling-special-keys",children:"Handling Special Keys"}),"\n",(0,t.jsxs)(n.p,{children:["You can customize how the ",(0,t.jsx)(n.code,{children:"LineReader"})," responds to key presses:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="KeyBindingExample.java" showLineNumbers',children:'import org.jline.keymap.Binding;\nimport org.jline.keymap.KeyMap;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.Reference;\n\npublic class KeyBindingExample {\n    public void customizeKeyBindings(LineReader reader) {\n        // Create a custom key map\n        KeyMap<Binding> keyMap = reader.getKeyMaps().get(LineReader.MAIN);\n\n        // Bind a key to a widget\n        keyMap.bind(new Reference("clear-screen"), KeyMap.ctrl(\'L\'));\n\n        // highlight-start\n        // Bind a key to a custom action\n        keyMap.bind(\n            () -> {\n                System.out.println("Custom action executed!");\n                return true;\n            },\n            KeyMap.alt(\'X\')\n        );\n        // highlight-end\n\n        System.out.println("Key bindings configured");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"line-editing-features",children:"Line Editing Features"}),"\n",(0,t.jsxs)(n.p,{children:["JLine's ",(0,t.jsx)(n.code,{children:"LineReader"})," provides numerous line editing features:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Navigation"}),": Move by character, word, or line"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Editing"}),": Insert, delete, cut, paste, transpose"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"History"}),": Navigate, search, and filter command history"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Completion"}),": Tab completion with customizable behavior"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Search"}),": Incremental search through current line or history"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,t.jsx)(n.h3,{id:"multi-line-input",children:"Multi-line Input"}),"\n",(0,t.jsx)(n.p,{children:"JLine supports multi-line input with proper continuation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="MultiLineInputExample.java"',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.DefaultParser;\nimport org.jline.terminal.Terminal;\n\npublic class MultiLineInputExample {\n    public String readMultiLineInput(Terminal terminal) {\n        // highlight-start\n        // Configure multi-line support\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .parser(new DefaultParser())\n                .variable(LineReader.SECONDARY_PROMPT_PATTERN, "%M> ")\n                .build();\n        // highlight-end\n\n        System.out.println("Enter a multi-line input (e.g., with unclosed quotes or brackets):");\n        // Read multi-line input\n        String multiLine = reader.readLine("multi> ");\n\n        return multiLine;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"custom-validators",children:"Custom Validators"}),"\n",(0,t.jsx)(n.p,{children:"You can validate input before accepting it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="ValidatorExample.java"',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.ValidationException;\nimport org.jline.reader.Validator;\nimport org.jline.terminal.Terminal;\n\npublic class ValidatorExample {\n    public LineReader createValidatingReader(Terminal terminal) {\n        // Create a validator\n        Validator validator = line -> {\n            // error-start\n            if (line.isEmpty()) {\n                throw new ValidationException("Input cannot be empty");\n            }\n            // error-end\n\n            if (line.length() < 3) {\n                throw new ValidationException("Input must be at least 3 characters");\n            }\n        };\n\n        // Use the validator\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .validator(validator)\n                .build();\n\n        return reader;\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"custom-highlighters",children:"Custom Highlighters"}),"\n",(0,t.jsx)(n.p,{children:"JLine can highlight input as it's typed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="HighlighterExample.java"',children:"import org.jline.reader.Highlighter;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.utils.AttributedString;\nimport org.jline.utils.AttributedStringBuilder;\nimport org.jline.utils.AttributedStyle;\n\nimport java.util.List;\n\npublic class HighlighterExample {\n    public LineReader createHighlightingReader(Terminal terminal) {\n        // highlight-start\n        // Create a highlighter\n        Highlighter highlighter = (reader, buffer, list) -> {\n            AttributedString highlighted = new AttributedStringBuilder()\n                    .append(buffer.toString(), AttributedStyle.BOLD)\n                    .toAttributedString();\n            list.add(highlighted);\n            return highlighted;\n        };\n        // highlight-end\n\n        // Use the highlighter\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .highlighter(highlighter)\n                .build();\n\n        return reader;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Always close the terminal when your application exits"}),"\n",(0,t.jsx)(n.li,{children:"Use try-with-resources for automatic resource management"}),"\n",(0,t.jsx)(n.li,{children:"Configure history appropriately for your application"}),"\n",(0,t.jsx)(n.li,{children:"Consider using a parser for complex command syntax"}),"\n",(0,t.jsx)(n.li,{children:"Provide helpful completion options for better user experience"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);