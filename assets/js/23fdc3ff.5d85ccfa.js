"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[5766],{7388:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>m,contentTitle:()=>a,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"tab-completion","title":"Tab Completion","description":"Tab completion is one of JLine\'s most powerful features, allowing users to efficiently navigate and use your command-line application.","source":"@site/docs/tab-completion.md","sourceDirName":".","slug":"/tab-completion","permalink":"/docs/tab-completion","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/tab-completion.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Line Reading","permalink":"/docs/line-reader"},"next":{"title":"History Management","permalink":"/docs/history"}}');var t=r(4848),l=r(8453);const o={sidebar_position:4},a="Tab Completion",m={},p=[{value:"Basic Completion",id:"basic-completion",level:2},{value:"Completer Types",id:"completer-types",level:2},{value:"StringsCompleter",id:"stringscompleter",level:3},{value:"FileNameCompleter",id:"filenamecompleter",level:3},{value:"ArgumentCompleter",id:"argumentcompleter",level:3},{value:"TreeCompleter",id:"treecompleter",level:3},{value:"AggregateCompleter",id:"aggregatecompleter",level:3},{value:"Custom Completers",id:"custom-completers",level:2},{value:"Completion Behavior",id:"completion-behavior",level:2},{value:"Advanced Completion Features",id:"advanced-completion-features",level:2},{value:"Completion with Descriptions",id:"completion-with-descriptions",level:3},{value:"Context-Aware Completion",id:"context-aware-completion",level:3},{value:"Completion with Colors",id:"completion-with-colors",level:3},{value:"Additional Completers in org.jline.reader.impl.completer",id:"additional-completers-in-orgjlinereaderimplcompleter",level:2},{value:"NullCompleter",id:"nullcompleter",level:3},{value:"DirectoriesCompleter",id:"directoriescompleter",level:3},{value:"FilesCompleter",id:"filescompleter",level:3},{value:"RegexCompleter",id:"regexcompleter",level:3},{value:"EnumCompleter",id:"enumcompleter",level:3},{value:"Completers in org.jline.builtins.Completers",id:"completers-in-orgjlinebuiltinscompleters",level:2},{value:"SystemCompleter",id:"systemcompleter",level:3},{value:"TreeCompleter (from builtins package)",id:"treecompleter-from-builtins-package",level:3},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"tab-completion",children:"Tab Completion"})}),"\n",(0,t.jsx)(n.p,{children:"Tab completion is one of JLine's most powerful features, allowing users to efficiently navigate and use your command-line application."}),"\n",(0,t.jsx)(n.h2,{id:"basic-completion",children:"Basic Completion"}),"\n",(0,t.jsxs)(n.p,{children:["To add completion to your ",(0,t.jsx)(n.code,{children:"LineReader"}),", you need to implement the ",(0,t.jsx)(n.code,{children:"Completer"})," interface:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="BasicCompletionExample.java" showLineNumbers',children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.StringsCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class BasicCompletionExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        // Create a simple completer with fixed options\n        Completer completer = new StringsCompleter("help", "exit", "list", "version");\n        // highlight-end\n\n        // Create a line reader with the completer\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(completer)\n                .build();\n\n        System.out.println("Type a command and press Tab to see completions");\n        // Now when the user presses Tab, they\'ll see the available commands\n        String line = reader.readLine("prompt> ");\n        System.out.println("You entered: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"completer-types",children:"Completer Types"}),"\n",(0,t.jsx)(n.p,{children:"JLine provides several built-in completers:"}),"\n",(0,t.jsx)(n.h3,{id:"stringscompleter",children:"StringsCompleter"}),"\n",(0,t.jsx)(n.p,{children:"Completes from a fixed set of strings:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="StringsCompleterExample.java"',children:'import org.jline.reader.Completer;\nimport org.jline.reader.impl.completer.StringsCompleter;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.function.Supplier;\n\npublic class StringsCompleterExample {\n    public void demonstrateStringsCompleter() {\n        // Complete with fixed strings\n        Completer stringsCompleter = new StringsCompleter("add", "remove", "list", "help");\n\n        // highlight-start\n        // Complete with dynamic strings\n        Supplier<Collection<String>> dynamicStrings = this::getCurrentCommands;\n        Completer dynamicCompleter = new StringsCompleter(dynamicStrings);\n        // highlight-end\n\n        System.out.println("Completers created successfully");\n    }\n\n    private Collection<String> getCurrentCommands() {\n        // In a real application, this might fetch commands from a registry\n        return Arrays.asList("connect", "disconnect", "status", "help");\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"filenamecompleter",children:"FileNameCompleter"}),"\n",(0,t.jsx)(n.p,{children:"Completes file and directory names:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="FileNameCompleterExample.java"',children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.FileNameCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class FileNameCompleterExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-next-line\n        Completer fileCompleter = new FileNameCompleter();\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(fileCompleter)\n                .build();\n\n        System.out.println("Type a file path and press Tab to complete it");\n        String line = reader.readLine("file> ");\n        System.out.println("You selected: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"argumentcompleter",children:"ArgumentCompleter"}),"\n",(0,t.jsx)(n.p,{children:"Handles command-line arguments with different completers for each position:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="ArgumentCompleterExample.java"',children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.ArgumentCompleter;\nimport org.jline.reader.impl.completer.FileNameCompleter;\nimport org.jline.reader.impl.completer.StringsCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class ArgumentCompleterExample {\n    public static void main(String[] args) throws IOException {\n        // First argument is a command, second is a file\n        Completer commandCompleter = new StringsCompleter("open", "save", "delete");\n        Completer fileCompleter = new FileNameCompleter();\n\n        // highlight-start\n        Completer argCompleter = new ArgumentCompleter(\n                commandCompleter,\n                fileCompleter\n        );\n        // highlight-end\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(argCompleter)\n                .build();\n\n        System.out.println("Type a command followed by a file path and press Tab");\n        String line = reader.readLine("cmd> ");\n        System.out.println("You entered: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"treecompleter",children:"TreeCompleter"}),"\n",(0,t.jsx)(n.p,{children:"Creates a tree of completion options:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="TreeCompleterExample.java" showLineNumbers',children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.TreeCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\nimport static org.jline.reader.impl.completer.TreeCompleter.node;\n\npublic class TreeCompleterExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        Completer treeCompleter = new TreeCompleter(\n                node("help",\n                        node("commands"),\n                        node("syntax")\n                ),\n                node("set",\n                        node("color",\n                                node("red", "green", "blue")\n                        ),\n                        node("size",\n                                node("small", "medium", "large")\n                        )\n                )\n        );\n        // highlight-end\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(treeCompleter)\n                .build();\n\n        System.out.println("Type a command and press Tab to navigate the command tree");\n        String line = reader.readLine("tree> ");\n        System.out.println("You entered: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"aggregatecompleter",children:"AggregateCompleter"}),"\n",(0,t.jsx)(n.p,{children:"Combines multiple completers:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="AggregateCompleterExample.java"',children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.AggregateCompleter;\nimport org.jline.reader.impl.completer.ArgumentCompleter;\nimport org.jline.reader.impl.completer.FileNameCompleter;\nimport org.jline.reader.impl.completer.StringsCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class AggregateCompleterExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        Completer aggregateCompleter = new AggregateCompleter(\n                new StringsCompleter("help", "exit"),\n                new ArgumentCompleter(\n                        new StringsCompleter("open"),\n                        new FileNameCompleter()\n                )\n        );\n        // highlight-end\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(aggregateCompleter)\n                .build();\n\n        System.out.println("Type a command and press Tab to see completions");\n        String line = reader.readLine("agg> ");\n        System.out.println("You entered: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"custom-completers",children:"Custom Completers"}),"\n",(0,t.jsxs)(n.p,{children:["You can create your own completers by implementing the ",(0,t.jsx)(n.code,{children:"Completer"})," interface:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="CustomCompleter.java" showLineNumbers',children:'import org.jline.reader.Candidate;\nimport org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.ParsedLine;\n\nimport java.util.List;\n\npublic class CustomCompleter implements Completer {\n    @Override\n    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {\n        // Get the word being completed\n        String word = line.word();\n\n        // highlight-start\n        // Add completion candidates based on the current word\n        if ("he".startsWith(word)) {\n            candidates.add(new Candidate("help", "help", null, "Show help", null, null, true));\n        }\n        if ("ex".startsWith(word)) {\n            candidates.add(new Candidate("exit", "exit", null, "Exit application", null, null, true));\n        }\n        // highlight-end\n\n        // You can add more sophisticated logic here\n        if ("co".startsWith(word)) {\n            candidates.add(new Candidate("connect", "connect", null, "Connect to server", null, null, true));\n        }\n        if ("di".startsWith(word)) {\n            candidates.add(new Candidate("disconnect", "disconnect", null, "Disconnect from server", null, null, true));\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"completion-behavior",children:"Completion Behavior"}),"\n",(0,t.jsx)(n.p,{children:"You can customize how completion works:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="CompletionBehaviorExample.java"',children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.StringsCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class CompletionBehaviorExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        Completer completer = new StringsCompleter("help", "exit", "list", "connect", "disconnect");\n\n        // highlight-start\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(completer)\n                .option(LineReader.Option.AUTO_LIST, true)  // Automatically list options\n                .option(LineReader.Option.LIST_PACKED, true)  // Display completions in a compact form\n                .option(LineReader.Option.AUTO_MENU, true)  // Show menu automatically\n                .option(LineReader.Option.MENU_COMPLETE, true)  // Cycle through completions\n                .build();\n        // highlight-end\n\n        System.out.println("Type a command and press Tab to see enhanced completion behavior");\n        String line = reader.readLine("cmd> ");\n        System.out.println("You entered: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-completion-features",children:"Advanced Completion Features"}),"\n",(0,t.jsx)(n.h3,{id:"completion-with-descriptions",children:"Completion with Descriptions"}),"\n",(0,t.jsx)(n.p,{children:"You can provide descriptions for completion candidates:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="CandidatesWithDescriptionsExample.java"',children:'import org.jline.reader.Candidate;\nimport org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CandidatesWithDescriptionsExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        List<Candidate> candidates = new ArrayList<>();\n        candidates.add(new Candidate("help", "help", null, "Display help information", null, null, true));\n        candidates.add(new Candidate("exit", "exit", null, "Exit the application", null, null, true));\n\n        Completer completer = (reader, line, completions) -> {\n            completions.addAll(candidates);\n        };\n        // highlight-end\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(completer)\n                .option(LineReader.Option.AUTO_LIST, true)\n                .build();\n\n        System.out.println("Type a command and press Tab to see completions with descriptions");\n        String line = reader.readLine("desc> ");\n        System.out.println("You entered: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"context-aware-completion",children:"Context-Aware Completion"}),"\n",(0,t.jsx)(n.p,{children:"Create completers that are aware of the current context:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class ContextAwareCompleter implements Completer {\n    private final Map<String, Completer> contextCompleters = new HashMap<>();\n\n    public ContextAwareCompleter() {\n        contextCompleters.put("default", new StringsCompleter("help", "context", "exit"));\n        contextCompleters.put("file", new FileNameCompleter());\n        contextCompleters.put("user", new StringsCompleter("admin", "guest", "user1", "user2"));\n    }\n\n    @Override\n    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {\n        // Get current context from reader variables\n        String context = (String) reader.getVariable("CONTEXT");\n        if (context == null) {\n            context = "default";\n        }\n\n        // Use the appropriate completer for this context\n        Completer contextCompleter = contextCompleters.getOrDefault(context,\n                                                                   contextCompleters.get("default"));\n        contextCompleter.complete(reader, line, candidates);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"completion-with-colors",children:"Completion with Colors"}),"\n",(0,t.jsx)(n.p,{children:"You can colorize completion candidates:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class ColoredCompleter implements Completer {\n    @Override\n    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {\n        // Command in bold red\n        candidates.add(new Candidate("help", "help", null, "Show help", null,\n                                    AttributedStyle.BOLD.foreground(AttributedStyle.RED), true));\n\n        // File in blue\n        candidates.add(new Candidate("file.txt", "file.txt", null, "A text file", null,\n                                    AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE), true));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"additional-completers-in-orgjlinereaderimplcompleter",children:"Additional Completers in org.jline.reader.impl.completer"}),"\n",(0,t.jsxs)(n.p,{children:["Besides the completers already covered, JLine provides several other completers in the ",(0,t.jsx)(n.code,{children:"org.jline.reader.impl.completer"})," package:"]}),"\n",(0,t.jsx)(n.h3,{id:"nullcompleter",children:"NullCompleter"}),"\n",(0,t.jsxs)(n.p,{children:["A completer that always returns no completions. Useful as a terminal completer in an ",(0,t.jsx)(n.code,{children:"ArgumentCompleter"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="NullCompleterExample.java"',children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.ArgumentCompleter;\nimport org.jline.reader.impl.completer.NullCompleter;\nimport org.jline.reader.impl.completer.StringsCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class NullCompleterExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        // Create an argument completer with a null completer at the end\n        Completer completer = new ArgumentCompleter(\n                new StringsCompleter("command"),\n                new StringsCompleter("subcommand1", "subcommand2"),\n                NullCompleter.INSTANCE\n        );\n        // highlight-end\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(completer)\n                .build();\n\n        String line = reader.readLine("null> ");\n        System.out.println("You entered: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"directoriescompleter",children:"DirectoriesCompleter"}),"\n",(0,t.jsx)(n.p,{children:"Completes directory names only:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="DirectoriesCompleterExample.java"',children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.DirectoriesCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.nio.file.Paths;\n\npublic class DirectoriesCompleterExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        // Create a completer that only completes directory names\n        Completer dirCompleter = new DirectoriesCompleter(Paths.get("."));\n        // highlight-end\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(dirCompleter)\n                .build();\n\n        String line = reader.readLine("dir> ");\n        System.out.println("You selected directory: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"filescompleter",children:"FilesCompleter"}),"\n",(0,t.jsx)(n.p,{children:"Completes file names with optional filtering:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="FilesCompleterExample.java"',children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.FilesCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.nio.file.Paths;\nimport java.util.function.Predicate;\n\npublic class FilesCompleterExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        // Create a completer that only completes .txt files\n        Predicate<java.nio.file.Path> filter = path ->\n            path.toString().endsWith(".txt") || path.toFile().isDirectory();\n        Completer filesCompleter = new FilesCompleter(Paths.get("."), filter);\n        // highlight-end\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(filesCompleter)\n                .build();\n\n        String line = reader.readLine("file> ");\n        System.out.println("You selected file: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"regexcompleter",children:"RegexCompleter"}),"\n",(0,t.jsx)(n.p,{children:"Completes based on regular expression patterns:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="RegexCompleterExample.java"',children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.RegexCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class RegexCompleterExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        // Define a regex pattern and completers for each group\n        Map<String, Completer> completers = new HashMap<>();\n        completers.put("COMMAND", new org.jline.reader.impl.completer.StringsCompleter("help", "exit", "connect"));\n        completers.put("TARGET", new org.jline.reader.impl.completer.StringsCompleter("server1", "server2", "server3"));\n        completers.put("OPTION", new org.jline.reader.impl.completer.StringsCompleter("-v", "-f", "-h"));\n\n        // Create a regex completer with the pattern\n        Completer regexCompleter = new RegexCompleter("(COMMAND) (TARGET) (OPTION)", completers);\n        // highlight-end\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(regexCompleter)\n                .build();\n\n        String line = reader.readLine("regex> ");\n        System.out.println("You entered: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"enumcompleter",children:"EnumCompleter"}),"\n",(0,t.jsx)(n.p,{children:"Completes enum values:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="EnumCompleterExample.java"',children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.EnumCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\n\npublic class EnumCompleterExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        // Create a completer that completes enum values\n        Completer enumCompleter = new EnumCompleter(TimeUnit.class);\n        // highlight-end\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(enumCompleter)\n                .build();\n\n        String line = reader.readLine("timeunit> ");\n        System.out.println("You selected: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"completers-in-orgjlinebuiltinscompleters",children:"Completers in org.jline.builtins.Completers"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"org.jline.builtins.Completers"})," class provides additional completers that are useful for building command-line applications:"]}),"\n",(0,t.jsx)(n.h3,{id:"systemcompleter",children:"SystemCompleter"}),"\n",(0,t.jsx)(n.p,{children:"A completer that manages completions for multiple commands:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="SystemCompleterExample.java"',children:'import org.jline.builtins.Completers.SystemCompleter;\nimport org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.ArgumentCompleter;\nimport org.jline.reader.impl.completer.NullCompleter;\nimport org.jline.reader.impl.completer.StringsCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.util.Arrays;\n\npublic class SystemCompleterExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        // Create a system completer\n        SystemCompleter systemCompleter = new SystemCompleter();\n\n        // Add completers for different commands\n        systemCompleter.add("help", new StringsCompleter("commands", "usage", "options"));\n\n        // Add a more complex completer for the "connect" command\n        systemCompleter.add("connect", new ArgumentCompleter(\n                new StringsCompleter("connect"),\n                new StringsCompleter("server1", "server2", "server3"),\n                NullCompleter.INSTANCE\n        ));\n\n        // Compile the completers\n        systemCompleter.compile();\n        // highlight-end\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(systemCompleter)\n                .build();\n\n        String line = reader.readLine("system> ");\n        System.out.println("You entered: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"treecompleter-from-builtins-package",children:"TreeCompleter (from builtins package)"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"org.jline.builtins.Completers.TreeCompleter"})," provides similar functionality to the ",(0,t.jsx)(n.code,{children:"TreeCompleter"})," in the ",(0,t.jsx)(n.code,{children:"impl.completer"})," package but with a different API:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="BuiltinsTreeCompleterExample.java"',children:'import org.jline.builtins.Completers.TreeCompleter;\nimport org.jline.builtins.Completers.TreeCompleter.Node;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\nimport static org.jline.builtins.Completers.TreeCompleter.node;\n\npublic class BuiltinsTreeCompleterExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-start\n        // Create a tree completer\n        TreeCompleter treeCompleter = new TreeCompleter(\n                node("help",\n                        node("commands"),\n                        node("usage")\n                ),\n                node("connect",\n                        node("server1"),\n                        node("server2")\n                ),\n                node("exit")\n        );\n        // highlight-end\n\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(treeCompleter)\n                .build();\n\n        String line = reader.readLine("tree> ");\n        System.out.println("You entered: " + line);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Provide meaningful completions that help users discover functionality"}),"\n",(0,t.jsx)(n.li,{children:"Include descriptions for non-obvious options"}),"\n",(0,t.jsx)(n.li,{children:"Group related completions logically"}),"\n",(0,t.jsx)(n.li,{children:"Consider the context when providing completions"}),"\n",(0,t.jsx)(n.li,{children:"Use appropriate styling to differentiate types of completions"}),"\n",(0,t.jsx)(n.li,{children:"Test completion with various input scenarios"}),"\n",(0,t.jsx)(n.li,{children:"Keep completion fast, especially for large option sets"}),"\n"]})]})}function s(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(6540);const t={},l=i.createContext(t);function o(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);