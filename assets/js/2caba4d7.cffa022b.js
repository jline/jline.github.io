"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[567],{5154:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"modules/console-ui","title":"JLine Console UI","description":"The jline-console-ui module provides UI components for console applications, such as progress bars, spinners, tables, trees, forms, and wizards. These components help you create more interactive and user-friendly command-line interfaces.","source":"@site/docs/modules/console-ui.md","sourceDirName":"modules","slug":"/modules/console-ui","permalink":"/docs/modules/console-ui","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/modules/console-ui.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"JLine Console","permalink":"/docs/modules/console"},"next":{"title":"Terminal Providers","permalink":"/docs/modules/terminal-providers"}}');var t=i(4848),a=i(8453);const l={sidebar_position:5},o="JLine Console UI",s={},d=[{value:"Maven Dependency",id:"maven-dependency",level:2},{value:"Progress Bars",id:"progress-bars",level:2},{value:"Spinners",id:"spinners",level:2},{value:"Tables",id:"tables",level:2},{value:"Trees",id:"trees",level:2},{value:"Forms",id:"forms",level:2},{value:"Wizards",id:"wizards",level:2},{value:"Menus",id:"menus",level:2},{value:"Notifications",id:"notifications",level:2},{value:"Combining UI Components",id:"combining-ui-components",level:2},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"jline-console-ui",children:"JLine Console UI"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"jline-console-ui"})," module provides UI components for console applications, such as progress bars, spinners, tables, trees, forms, and wizards. These components help you create more interactive and user-friendly command-line interfaces."]}),"\n",(0,t.jsx)(n.h2,{id:"maven-dependency",children:"Maven Dependency"}),"\n",(0,t.jsx)(n.p,{children:"To use the console-ui module, add the following dependency to your project:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.jline</groupId>\n    <artifactId>jline-console-ui</artifactId>\n    <version>3.29.0</version>\n</dependency>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"progress-bars",children:"Progress Bars"}),"\n",(0,t.jsx)(n.p,{children:"The console-ui module provides progress bars to show the status of long-running operations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="ProgressBarExample.java" showLineNumbers',children:'import org.jline.console.ui.ProgressBar;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProgressBarExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n\n        // Clear screen\n        terminal.puts(Capability.clear_screen);\n\n        // highlight-start\n        // Create a progress bar\n        ProgressBar progressBar = new ProgressBar(terminal, "Processing", 100);\n        progressBar.setLeftBracket("[");\n        progressBar.setRightBracket("]");\n        progressBar.setFiller("=");\n        progressBar.setRemaining(" ");\n        // highlight-end\n\n        // Start the progress bar\n        progressBar.start();\n\n        // Simulate work\n        for (int i = 0; i <= 100; i++) {\n            progressBar.update(i);\n            try {\n                TimeUnit.MILLISECONDS.sleep(50);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n\n        // Complete the progress bar\n        progressBar.complete();\n\n        terminal.writer().println("\\nOperation completed successfully!");\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"spinners",children:"Spinners"}),"\n",(0,t.jsx)(n.p,{children:"Spinners are useful for indicating activity when you can't measure progress:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="SpinnerExample.java"',children:'import org.jline.console.ui.Spinner;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\n\npublic class SpinnerExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n\n        // Clear screen\n        terminal.puts(Capability.clear_screen);\n\n        // highlight-start\n        // Create a spinner\n        Spinner spinner = new Spinner(terminal, "Loading", Spinner.Style.DOTS);\n\n        // Start the spinner\n        spinner.start();\n        // highlight-end\n\n        // Simulate work\n        try {\n            TimeUnit.SECONDS.sleep(5);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n\n        // Stop the spinner\n        spinner.stop();\n\n        terminal.writer().println("\\nLoading complete!");\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"tables",children:"Tables"}),"\n",(0,t.jsx)(n.p,{children:"The console-ui module provides a table component for displaying tabular data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="TableExample.java" showLineNumbers',children:'import org.jline.console.ui.Table;\nimport org.jline.console.ui.Table.ColumnType;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\nimport org.jline.utils.AttributedStyle;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class TableExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n\n        // highlight-start\n        // Create a table\n        Table table = new Table();\n        table.setHeader(Arrays.asList("ID", "Name", "Role", "Salary"));\n        table.setColumnTypes(Arrays.asList(ColumnType.Number, ColumnType.String, ColumnType.String, ColumnType.Number));\n\n        // Add rows\n        table.addRow(Arrays.asList("1", "John Doe", "Developer", "75000"));\n        table.addRow(Arrays.asList("2", "Jane Smith", "Manager", "85000"));\n        table.addRow(Arrays.asList("3", "Bob Johnson", "Designer", "65000"));\n        // highlight-end\n\n        // Style the header\n        table.setHeaderStyle(AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE).bold());\n\n        // Style specific columns\n        table.setColumnStyle(0, AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN));\n        table.setColumnStyle(3, AttributedStyle.DEFAULT.foreground(AttributedStyle.YELLOW));\n\n        // Display the table\n        AttributedString tableString = table.render(terminal.getWidth());\n        tableString.println(terminal);\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"trees",children:"Trees"}),"\n",(0,t.jsx)(n.p,{children:"The console-ui module provides a tree component for displaying hierarchical data:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="TreeExample.java" showLineNumbers',children:'import org.jline.console.ui.Tree;\nimport org.jline.console.ui.Tree.Node;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\nimport org.jline.utils.AttributedStyle;\n\nimport java.io.IOException;\n\npublic class TreeExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n\n        // highlight-start\n        // Create a tree\n        Tree tree = new Tree();\n\n        // Create nodes\n        Node root = tree.createNode("Project");\n\n        Node src = tree.createNode("src");\n        Node main = tree.createNode("main");\n        Node java = tree.createNode("java");\n        Node resources = tree.createNode("resources");\n\n        Node test = tree.createNode("test");\n        Node testJava = tree.createNode("java");\n        Node testResources = tree.createNode("resources");\n\n        Node docs = tree.createNode("docs");\n\n        // Build the tree structure\n        root.addChild(src);\n        src.addChild(main);\n        main.addChild(java);\n        main.addChild(resources);\n\n        src.addChild(test);\n        test.addChild(testJava);\n        test.addChild(testResources);\n\n        root.addChild(docs);\n        // highlight-end\n\n        // Style nodes\n        root.setStyle(AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE).bold());\n        java.setStyle(AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN));\n        testJava.setStyle(AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN));\n\n        // Display the tree\n        AttributedString treeString = tree.render(terminal.getWidth());\n        treeString.println(terminal);\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"forms",children:"Forms"}),"\n",(0,t.jsx)(n.p,{children:"The console-ui module provides a form component for collecting user input:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="FormExample.java" showLineNumbers',children:'import org.jline.console.ui.Form;\nimport org.jline.console.ui.Form.Field;\nimport org.jline.console.ui.Form.FieldType;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Map;\n\npublic class FormExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n\n        // highlight-start\n        // Create a form\n        Form form = new Form();\n        form.setTitle("User Registration");\n\n        // Add fields\n        form.addField(new Field("username", "Username", FieldType.TEXT)\n                .setRequired(true)\n                .setDescription("Enter your username (3-20 characters)"));\n\n        form.addField(new Field("email", "Email", FieldType.EMAIL)\n                .setRequired(true)\n                .setDescription("Enter your email address"));\n\n        form.addField(new Field("password", "Password", FieldType.PASSWORD)\n                .setRequired(true)\n                .setDescription("Enter a strong password"));\n\n        form.addField(new Field("role", "Role", FieldType.SELECT)\n                .setOptions(Arrays.asList("User", "Admin", "Guest"))\n                .setDefaultValue("User")\n                .setDescription("Select your role"));\n\n        form.addField(new Field("bio", "Biography", FieldType.TEXTAREA)\n                .setDescription("Tell us about yourself"));\n\n        form.addField(new Field("newsletter", "Subscribe to newsletter", FieldType.CHECKBOX)\n                .setDefaultValue("true")\n                .setDescription("Receive updates via email"));\n        // highlight-end\n\n        // Display the form and collect input\n        Map<String, String> values = form.display(reader);\n\n        // Show the collected values\n        terminal.writer().println("\\nForm submitted with the following values:");\n        values.forEach((key, value) -> terminal.writer().println(key + ": " + value));\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"wizards",children:"Wizards"}),"\n",(0,t.jsx)(n.p,{children:"The console-ui module provides a wizard component for guiding users through multi-step processes:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="WizardExample.java" showLineNumbers',children:'import org.jline.console.ui.Wizard;\nimport org.jline.console.ui.Wizard.Page;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class WizardExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n\n        // highlight-start\n        // Create a wizard\n        Wizard wizard = new Wizard();\n        wizard.setTitle("Installation Wizard");\n\n        // Create pages\n        Page welcomePage = new Page("welcome", "Welcome")\n                .setContent("Welcome to the installation wizard. This wizard will guide you through the installation process.")\n                .addAction("next", "Continue", "Go to the next page");\n\n        Page licensePage = new Page("license", "License Agreement")\n                .setContent("Please read the license agreement carefully.\\n\\n" +\n                        "This is a sample license agreement. In a real application, you would include the actual license text here.")\n                .addAction("back", "Back", "Go back to the previous page")\n                .addAction("accept", "Accept", "Accept the license agreement")\n                .addAction("decline", "Decline", "Decline the license agreement and exit");\n\n        Page configPage = new Page("config", "Configuration")\n                .setContent("Please configure the installation options.")\n                .addField("installDir", "Installation Directory", "/usr/local/app")\n                .addField("port", "Port Number", "8080")\n                .addCheckbox("startService", "Start service after installation", true)\n                .addAction("back", "Back", "Go back to the previous page")\n                .addAction("next", "Next", "Go to the next page");\n\n        Page summaryPage = new Page("summary", "Summary")\n                .setContent("Please review your installation settings.")\n                .addAction("back", "Back", "Go back to the previous page")\n                .addAction("install", "Install", "Begin the installation");\n\n        Page finishPage = new Page("finish", "Installation Complete")\n                .setContent("The installation has been completed successfully.")\n                .addAction("finish", "Finish", "Exit the wizard");\n\n        // Add pages to the wizard\n        wizard.addPage(welcomePage);\n        wizard.addPage(licensePage);\n        wizard.addPage(configPage);\n        wizard.addPage(summaryPage);\n        wizard.addPage(finishPage);\n        // highlight-end\n\n        // Run the wizard\n        Map<String, Object> context = new HashMap<>();\n        String result = wizard.run(reader, context);\n\n        // Show the result\n        terminal.writer().println("\\nWizard completed with result: " + result);\n        terminal.writer().println("\\nCollected values:");\n        context.forEach((key, value) -> terminal.writer().println(key + ": " + value));\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"menus",children:"Menus"}),"\n",(0,t.jsx)(n.p,{children:"The console-ui module provides a menu component for displaying options:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="MenuExample.java"',children:'import org.jline.console.ui.Menu;\nimport org.jline.console.ui.Menu.Item;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedStyle;\n\nimport java.io.IOException;\n\npublic class MenuExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n\n        // highlight-start\n        // Create a menu\n        Menu menu = new Menu();\n        menu.setTitle("Main Menu");\n\n        // Add items\n        menu.addItem(new Item("file", "File Operations")\n                .setDescription("Perform file operations"));\n\n        menu.addItem(new Item("edit", "Edit")\n                .setDescription("Edit files"));\n\n        menu.addItem(new Item("view", "View")\n                .setDescription("View files"));\n\n        menu.addItem(new Item("help", "Help")\n                .setDescription("Get help"));\n\n        menu.addItem(new Item("exit", "Exit")\n                .setDescription("Exit the application"));\n        // highlight-end\n\n        // Style the menu\n        menu.setTitleStyle(AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE).bold());\n        menu.setSelectedStyle(AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN).bold());\n\n        // Display the menu and get selection\n        String selection = menu.display(reader);\n\n        // Handle the selection\n        terminal.writer().println("\\nYou selected: " + selection);\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"notifications",children:"Notifications"}),"\n",(0,t.jsx)(n.p,{children:"The console-ui module provides a notification component for displaying messages:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="NotificationExample.java"',children:'import org.jline.console.ui.Notification;\nimport org.jline.console.ui.Notification.Type;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\n\npublic class NotificationExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n\n        // highlight-start\n        // Create notifications\n        Notification infoNotification = new Notification(Type.INFO, "Information", "This is an informational message.");\n        Notification warningNotification = new Notification(Type.WARNING, "Warning", "This is a warning message.");\n        Notification errorNotification = new Notification(Type.ERROR, "Error", "This is an error message.");\n        Notification successNotification = new Notification(Type.SUCCESS, "Success", "This is a success message.");\n        // highlight-end\n\n        // Display notifications\n        infoNotification.display(terminal);\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n\n        warningNotification.display(terminal);\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n\n        errorNotification.display(terminal);\n        try {\n            TimeUnit.SECONDS.sleep(2);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n\n        successNotification.display(terminal);\n\n        terminal.writer().println("\\nAll notifications displayed.");\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"combining-ui-components",children:"Combining UI Components"}),"\n",(0,t.jsx)(n.p,{children:"You can combine multiple UI components to create a more sophisticated interface:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="CombinedUIExample.java" showLineNumbers',children:'import org.jline.console.ui.Menu;\nimport org.jline.console.ui.Menu.Item;\nimport org.jline.console.ui.Notification;\nimport org.jline.console.ui.Notification.Type;\nimport org.jline.console.ui.ProgressBar;\nimport org.jline.console.ui.Spinner;\nimport org.jline.console.ui.Table;\nimport org.jline.console.ui.Table.ColumnType;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.concurrent.TimeUnit;\n\npublic class CombinedUIExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n\n        // Clear screen\n        terminal.puts(Capability.clear_screen);\n\n        // Create a menu\n        Menu menu = new Menu();\n        menu.setTitle("File Operations");\n        menu.addItem(new Item("list", "List Files"));\n        menu.addItem(new Item("copy", "Copy Files"));\n        menu.addItem(new Item("delete", "Delete Files"));\n        menu.addItem(new Item("exit", "Exit"));\n\n        // Main application loop\n        while (true) {\n            // Display the menu\n            String selection = menu.display(reader);\n\n            if ("exit".equals(selection)) {\n                break;\n            }\n\n            // Handle the selection\n            switch (selection) {\n                case "list":\n                    // Show a spinner while "loading" files\n                    Spinner spinner = new Spinner(terminal, "Loading files", Spinner.Style.DOTS);\n                    spinner.start();\n\n                    try {\n                        TimeUnit.SECONDS.sleep(2);\n                    } catch (InterruptedException e) {\n                        Thread.currentThread().interrupt();\n                    }\n\n                    spinner.stop();\n\n                    // Display files in a table\n                    Table table = new Table();\n                    table.setHeader(Arrays.asList("Name", "Size", "Modified"));\n                    table.setColumnTypes(Arrays.asList(ColumnType.String, ColumnType.Number, ColumnType.String));\n\n                    table.addRow(Arrays.asList("file1.txt", "1024", "2023-05-15"));\n                    table.addRow(Arrays.asList("file2.txt", "2048", "2023-05-16"));\n                    table.addRow(Arrays.asList("file3.txt", "4096", "2023-05-17"));\n\n                    table.render(terminal.getWidth()).println(terminal);\n                    break;\n\n                case "copy":\n                    // Show a progress bar for copying\n                    ProgressBar progressBar = new ProgressBar(terminal, "Copying files", 100);\n                    progressBar.start();\n\n                    for (int i = 0; i <= 100; i++) {\n                        progressBar.update(i);\n                        try {\n                            TimeUnit.MILLISECONDS.sleep(50);\n                        } catch (InterruptedException e) {\n                            Thread.currentThread().interrupt();\n                        }\n                    }\n\n                    progressBar.complete();\n\n                    // Show a success notification\n                    new Notification(Type.SUCCESS, "Copy Complete", "Files copied successfully.").display(terminal);\n                    break;\n\n                case "delete":\n                    // Show a warning notification\n                    new Notification(Type.WARNING, "Delete Files", "This operation cannot be undone.").display(terminal);\n\n                    // Ask for confirmation\n                    String confirm = reader.readLine("Are you sure you want to delete the files? (y/n): ");\n\n                    if ("y".equalsIgnoreCase(confirm)) {\n                        // Show a progress bar for deleting\n                        ProgressBar deleteBar = new ProgressBar(terminal, "Deleting files", 100);\n                        deleteBar.start();\n\n                        for (int i = 0; i <= 100; i++) {\n                            deleteBar.update(i);\n                            try {\n                                TimeUnit.MILLISECONDS.sleep(30);\n                            } catch (InterruptedException e) {\n                                Thread.currentThread().interrupt();\n                            }\n                        }\n\n                        deleteBar.complete();\n\n                        // Show a success notification\n                        new Notification(Type.SUCCESS, "Delete Complete", "Files deleted successfully.").display(terminal);\n                    } else {\n                        // Show an info notification\n                        new Notification(Type.INFO, "Delete Cancelled", "Operation cancelled by user.").display(terminal);\n                    }\n                    break;\n            }\n\n            // Wait for user to press Enter before showing the menu again\n            reader.readLine("\\nPress Enter to continue...");\n            terminal.puts(Capability.clear_screen);\n        }\n\n        terminal.writer().println("Goodbye!");\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.p,{children:"When using the JLine console-ui module, consider these best practices:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Use Appropriate UI Components"}),": Choose the right component for each task to provide the best user experience."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Provide Clear Feedback"}),": Use progress bars, spinners, and notifications to keep users informed about what's happening."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Style Components Consistently"}),": Use consistent styling across all UI components to create a cohesive look and feel."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Handle Terminal Resizing"}),": Make sure your UI components adapt to changes in terminal size."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Consider Terminal Capabilities"}),": Some terminals may not support all UI features, so check capabilities before using advanced components."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Provide Keyboard Navigation"}),": Ensure that all UI components can be navigated using the keyboard."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Use Descriptive Labels"}),": Provide clear labels and descriptions for all UI elements."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Handle Errors Gracefully"}),": Display appropriate error messages when something goes wrong."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Combine Components Thoughtfully"}),": When combining multiple UI components, make sure they work well together and don't overwhelm the user."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Test on Different Terminals"}),": Test your UI on different terminal emulators to ensure compatibility."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var r=i(6540);const t={},a=r.createContext(t);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);