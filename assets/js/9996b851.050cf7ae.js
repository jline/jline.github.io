"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[2624],{3381:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"advanced/widgets","title":"Custom Widgets","description":"JLine\'s widget system allows you to extend the functionality of the line reader with custom actions and behaviors. Widgets are reusable components that can be bound to key combinations or called programmatically, making them a powerful tool for customizing the command-line experience.","source":"@site/docs/advanced/widgets.md","sourceDirName":"advanced","slug":"/advanced/widgets","permalink":"/docs/advanced/widgets","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/advanced/widgets.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Key Bindings and Widgets","permalink":"/docs/advanced/key-bindings"},"next":{"title":"Mouse Support","permalink":"/docs/advanced/mouse-support"}}');var i=r(4848),a=r(8453);const l={sidebar_position:7},d="Custom Widgets",s={},o=[{value:"Widget Basics",id:"widget-basics",level:2},{value:"Built-in Widgets",id:"built-in-widgets",level:2},{value:"Creating Custom Widgets",id:"creating-custom-widgets",level:2},{value:"Widget Categories",id:"widget-categories",level:2},{value:"Text Insertion Widgets",id:"text-insertion-widgets",level:3},{value:"Cursor Movement Widgets",id:"cursor-movement-widgets",level:3},{value:"Text Manipulation Widgets",id:"text-manipulation-widgets",level:3},{value:"Command Execution Widgets",id:"command-execution-widgets",level:3},{value:"Calling Widgets Programmatically",id:"calling-widgets-programmatically",level:2},{value:"Widget Composition",id:"widget-composition",level:2},{value:"Creating a Widget Library",id:"creating-a-widget-library",level:2},{value:"Best Practices for Widget Development",id:"best-practices-for-widget-development",level:2},{value:"Conclusion",id:"conclusion",level:2}];function g(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"custom-widgets",children:"Custom Widgets"})}),"\n",(0,i.jsx)(n.p,{children:"JLine's widget system allows you to extend the functionality of the line reader with custom actions and behaviors. Widgets are reusable components that can be bound to key combinations or called programmatically, making them a powerful tool for customizing the command-line experience."}),"\n",(0,i.jsx)(n.h2,{id:"widget-basics",children:"Widget Basics"}),"\n",(0,i.jsxs)(n.p,{children:["A widget in JLine is a function that performs an action on the line buffer, such as inserting text, moving the cursor, or manipulating the content. Widgets are implemented as instances of the ",(0,i.jsx)(n.code,{children:"Widget"})," interface, which is a functional interface with a single method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"@FunctionalInterface\npublic interface Widget {\n    boolean apply();\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"apply()"})," method should return ",(0,i.jsx)(n.code,{children:"true"})," if the widget was successfully applied, or ",(0,i.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,i.jsx)(n.h2,{id:"built-in-widgets",children:"Built-in Widgets"}),"\n",(0,i.jsxs)(n.p,{children:["JLine comes with many built-in widgets that provide common line editing functionality. These widgets are identified by string constants in the ",(0,i.jsx)(n.code,{children:"LineReader"})," class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="BuiltinWidgetsExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.util.Map;\n\npublic class BuiltinWidgetsExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // highlight-start\n        // Get all registered widgets\n        Map<String, Widget> widgets = reader.getWidgets();\n        \n        // Print some common built-in widgets\n        terminal.writer().println("Common built-in widgets:");\n        terminal.writer().println("  " + LineReader.ACCEPT_LINE + ": Accept the current line");\n        terminal.writer().println("  " + LineReader.BACKWARD_CHAR + ": Move cursor backward one character");\n        terminal.writer().println("  " + LineReader.FORWARD_CHAR + ": Move cursor forward one character");\n        terminal.writer().println("  " + LineReader.BACKWARD_WORD + ": Move cursor backward one word");\n        terminal.writer().println("  " + LineReader.FORWARD_WORD + ": Move cursor forward one word");\n        terminal.writer().println("  " + LineReader.BEGINNING_OF_LINE + ": Move cursor to beginning of line");\n        terminal.writer().println("  " + LineReader.END_OF_LINE + ": Move cursor to end of line");\n        terminal.writer().println("  " + LineReader.KILL_LINE + ": Kill text from cursor to end of line");\n        terminal.writer().println("  " + LineReader.BACKWARD_KILL_WORD + ": Kill text from cursor to start of word");\n        terminal.writer().println("  " + LineReader.CLEAR_SCREEN + ": Clear the screen");\n        terminal.writer().println("  " + LineReader.HISTORY_SEARCH_BACKWARD + ": Search history backward");\n        terminal.writer().println("  " + LineReader.HISTORY_SEARCH_FORWARD + ": Search history forward");\n        terminal.writer().println("  " + LineReader.COMPLETE_WORD + ": Complete the current word");\n        terminal.writer().println("  " + LineReader.YANK + ": Yank (paste) previously killed text");\n        terminal.writer().flush();\n        // highlight-end\n        \n        // Read a line to demonstrate widgets\n        terminal.writer().println("\\nType some text (try using key bindings to activate widgets):");\n        String line = reader.readLine("prompt> ");\n        terminal.writer().println("You entered: " + line);\n        \n        terminal.close();\n    }\n    \n    // Widget interface for reference\n    @FunctionalInterface\n    public interface Widget {\n        boolean apply();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-custom-widgets",children:"Creating Custom Widgets"}),"\n",(0,i.jsx)(n.p,{children:"You can create custom widgets to add new functionality to the line reader:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="CustomWidgetExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.Widget;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\npublic class CustomWidgetExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // highlight-start\n        // Create a custom widget to insert the current timestamp\n        Widget insertTimestampWidget = () -> {\n            // Get the current timestamp\n            String timestamp = LocalDateTime.now().format(\n                    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));\n            \n            // Insert the timestamp at the current cursor position\n            reader.getBuffer().write(timestamp);\n            \n            // Return true to indicate success\n            return true;\n        };\n        \n        // Register the widget with the line reader\n        reader.getWidgets().put("insert-timestamp", insertTimestampWidget);\n        \n        // Bind the widget to a key combination (Alt+T)\n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                insertTimestampWidget, \n                "\\033t");  // Escape followed by \'t\' represents Alt+T\n        // highlight-end\n        \n        // Display instructions\n        terminal.writer().println("Custom widget example:");\n        terminal.writer().println("  Press Alt+T to insert the current timestamp");\n        terminal.writer().println("\\nType some text and try the custom widget:");\n        terminal.writer().flush();\n        \n        // Read lines until "exit" is entered\n        String line;\n        while (!(line = reader.readLine("prompt> ")).equalsIgnoreCase("exit")) {\n            terminal.writer().println("You entered: " + line);\n        }\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"widget-categories",children:"Widget Categories"}),"\n",(0,i.jsx)(n.p,{children:"Widgets can be categorized based on their functionality:"}),"\n",(0,i.jsx)(n.h3,{id:"text-insertion-widgets",children:"Text Insertion Widgets"}),"\n",(0,i.jsx)(n.p,{children:"These widgets insert text at the current cursor position:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="TextInsertionWidgetExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.Widget;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class TextInsertionWidgetExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // highlight-start\n        // Create a map of text snippets\n        Map<String, String> snippets = new HashMap<>();\n        snippets.put("greeting", "Hello, world!");\n        snippets.put("signature", "Best regards,\\nYour Name");\n        snippets.put("date", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE));\n        \n        // Create widgets for each snippet\n        for (Map.Entry<String, String> entry : snippets.entrySet()) {\n            String name = entry.getKey();\n            String text = entry.getValue();\n            \n            // Create a widget that inserts the snippet\n            Widget widget = () -> {\n                reader.getBuffer().write(text);\n                return true;\n            };\n            \n            // Register the widget\n            reader.getWidgets().put("insert-" + name, widget);\n        }\n        \n        // Bind widgets to key combinations\n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                reader.getWidgets().get("insert-greeting"), \n                "\\033g");  // Alt+G\n        \n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                reader.getWidgets().get("insert-signature"), \n                "\\033s");  // Alt+S\n        \n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                reader.getWidgets().get("insert-date"), \n                "\\033d");  // Alt+D\n        // highlight-end\n        \n        // Display instructions\n        terminal.writer().println("Text insertion widgets:");\n        terminal.writer().println("  Alt+G: Insert greeting");\n        terminal.writer().println("  Alt+S: Insert signature");\n        terminal.writer().println("  Alt+D: Insert date");\n        terminal.writer().println("\\nType some text and try the widgets:");\n        terminal.writer().flush();\n        \n        // Read lines until "exit" is entered\n        String line;\n        while (!(line = reader.readLine("prompt> ")).equalsIgnoreCase("exit")) {\n            terminal.writer().println("You entered: " + line);\n        }\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"cursor-movement-widgets",children:"Cursor Movement Widgets"}),"\n",(0,i.jsx)(n.p,{children:"These widgets move the cursor within the line buffer:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="CursorMovementWidgetExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.Widget;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class CursorMovementWidgetExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // highlight-start\n        // Create a widget to move cursor to the middle of the line\n        Widget moveToMiddleWidget = () -> {\n            int length = reader.getBuffer().length();\n            reader.getBuffer().cursor(length / 2);\n            return true;\n        };\n        \n        // Create a widget to move cursor to a specific column\n        Widget moveToColumn10Widget = () -> {\n            int column = 10;\n            if (reader.getBuffer().length() >= column) {\n                reader.getBuffer().cursor(column);\n                return true;\n            }\n            return false;\n        };\n        \n        // Create a widget to move cursor forward by 5 characters\n        Widget moveForward5Widget = () -> {\n            int cursor = reader.getBuffer().cursor();\n            int newCursor = Math.min(cursor + 5, reader.getBuffer().length());\n            reader.getBuffer().cursor(newCursor);\n            return true;\n        };\n        \n        // Register the widgets\n        reader.getWidgets().put("move-to-middle", moveToMiddleWidget);\n        reader.getWidgets().put("move-to-column-10", moveToColumn10Widget);\n        reader.getWidgets().put("move-forward-5", moveForward5Widget);\n        \n        // Bind widgets to key combinations\n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                moveToMiddleWidget, \n                "\\033m");  // Alt+M\n        \n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                moveToColumn10Widget, \n                "\\0330");  // Alt+0\n        \n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                moveForward5Widget, \n                "\\033f");  // Alt+F\n        // highlight-end\n        \n        // Display instructions\n        terminal.writer().println("Cursor movement widgets:");\n        terminal.writer().println("  Alt+M: Move cursor to middle of line");\n        terminal.writer().println("  Alt+0: Move cursor to column 10");\n        terminal.writer().println("  Alt+F: Move cursor forward 5 characters");\n        terminal.writer().println("\\nType some text and try the widgets:");\n        terminal.writer().flush();\n        \n        // Read lines until "exit" is entered\n        String line;\n        while (!(line = reader.readLine("prompt> ")).equalsIgnoreCase("exit")) {\n            terminal.writer().println("You entered: " + line);\n        }\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"text-manipulation-widgets",children:"Text Manipulation Widgets"}),"\n",(0,i.jsx)(n.p,{children:"These widgets modify the text in the line buffer:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="TextManipulationWidgetExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.Widget;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class TextManipulationWidgetExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // highlight-start\n        // Create a widget to convert the current word to uppercase\n        Widget uppercaseWordWidget = () -> {\n            // Get the current buffer\n            String buffer = reader.getBuffer().toString();\n            int cursor = reader.getBuffer().cursor();\n            \n            // Find the start and end of the current word\n            int start = buffer.lastIndexOf(\' \', cursor - 1) + 1;\n            int end = buffer.indexOf(\' \', cursor);\n            if (end == -1) end = buffer.length();\n            \n            // Extract the current word\n            String word = buffer.substring(start, end);\n            \n            // Replace with uppercase version\n            reader.getBuffer().cursor(start);\n            reader.getBuffer().delete(end - start);\n            reader.getBuffer().write(word.toUpperCase());\n            \n            return true;\n        };\n        \n        // Create a widget to reverse the entire line\n        Widget reverseLineWidget = () -> {\n            String line = reader.getBuffer().toString();\n            String reversed = new StringBuilder(line).reverse().toString();\n            \n            reader.getBuffer().clear();\n            reader.getBuffer().write(reversed);\n            \n            return true;\n        };\n        \n        // Create a widget to remove duplicate spaces\n        Widget removeDuplicateSpacesWidget = () -> {\n            String line = reader.getBuffer().toString();\n            String cleaned = line.replaceAll("\\\\s+", " ");\n            \n            reader.getBuffer().clear();\n            reader.getBuffer().write(cleaned);\n            \n            return true;\n        };\n        \n        // Register the widgets\n        reader.getWidgets().put("uppercase-word", uppercaseWordWidget);\n        reader.getWidgets().put("reverse-line", reverseLineWidget);\n        reader.getWidgets().put("remove-duplicate-spaces", removeDuplicateSpacesWidget);\n        \n        // Bind widgets to key combinations\n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                uppercaseWordWidget, \n                "\\033u");  // Alt+U\n        \n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                reverseLineWidget, \n                "\\033r");  // Alt+R\n        \n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                removeDuplicateSpacesWidget, \n                "\\033s");  // Alt+S\n        // highlight-end\n        \n        // Display instructions\n        terminal.writer().println("Text manipulation widgets:");\n        terminal.writer().println("  Alt+U: Convert current word to uppercase");\n        terminal.writer().println("  Alt+R: Reverse the entire line");\n        terminal.writer().println("  Alt+S: Remove duplicate spaces");\n        terminal.writer().println("\\nType some text and try the widgets:");\n        terminal.writer().flush();\n        \n        // Read lines until "exit" is entered\n        String line;\n        while (!(line = reader.readLine("prompt> ")).equalsIgnoreCase("exit")) {\n            terminal.writer().println("You entered: " + line);\n        }\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"command-execution-widgets",children:"Command Execution Widgets"}),"\n",(0,i.jsx)(n.p,{children:"These widgets execute commands or perform actions beyond simple text manipulation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="CommandExecutionWidgetExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.Widget;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.List;\n\npublic class CommandExecutionWidgetExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // highlight-start\n        // Create a widget to list files in the current directory\n        Widget listFilesWidget = () -> {\n            try {\n                terminal.writer().println();\n                Files.list(Paths.get("."))\n                        .forEach(path -> terminal.writer().println(path.getFileName()));\n                terminal.writer().println();\n                terminal.flush();\n                \n                // Redraw the prompt and current buffer\n                reader.callWidget(LineReader.REDRAW_LINE);\n                reader.callWidget(LineReader.REDISPLAY);\n                \n                return true;\n            } catch (IOException e) {\n                return false;\n            }\n        };\n        \n        // Create a widget to show system information\n        Widget systemInfoWidget = () -> {\n            terminal.writer().println();\n            terminal.writer().println("System Information:");\n            terminal.writer().println("  OS: " + System.getProperty("os.name"));\n            terminal.writer().println("  Java: " + System.getProperty("java.version"));\n            terminal.writer().println("  User: " + System.getProperty("user.name"));\n            terminal.writer().println("  Terminal: " + terminal.getType());\n            terminal.writer().println();\n            terminal.flush();\n            \n            // Redraw the prompt and current buffer\n            reader.callWidget(LineReader.REDRAW_LINE);\n            reader.callWidget(LineReader.REDISPLAY);\n            \n            return true;\n        };\n        \n        // Create a widget to show the last 5 history entries\n        Widget showHistoryWidget = () -> {\n            terminal.writer().println();\n            terminal.writer().println("Last 5 history entries:");\n            \n            List<String> history = reader.getHistory().entries();\n            int start = Math.max(0, history.size() - 5);\n            for (int i = start; i < history.size(); i++) {\n                terminal.writer().println("  " + (i + 1) + ": " + history.get(i));\n            }\n            \n            terminal.writer().println();\n            terminal.flush();\n            \n            // Redraw the prompt and current buffer\n            reader.callWidget(LineReader.REDRAW_LINE);\n            reader.callWidget(LineReader.REDISPLAY);\n            \n            return true;\n        };\n        \n        // Register the widgets\n        reader.getWidgets().put("list-files", listFilesWidget);\n        reader.getWidgets().put("system-info", systemInfoWidget);\n        reader.getWidgets().put("show-history", showHistoryWidget);\n        \n        // Bind widgets to key combinations\n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                listFilesWidget, \n                "\\033l");  // Alt+L\n        \n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                systemInfoWidget, \n                "\\033i");  // Alt+I\n        \n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                showHistoryWidget, \n                "\\033h");  // Alt+H\n        // highlight-end\n        \n        // Display instructions\n        terminal.writer().println("Command execution widgets:");\n        terminal.writer().println("  Alt+L: List files in current directory");\n        terminal.writer().println("  Alt+I: Show system information");\n        terminal.writer().println("  Alt+H: Show last 5 history entries");\n        terminal.writer().println("\\nType some text and try the widgets:");\n        terminal.writer().flush();\n        \n        // Read lines until "exit" is entered\n        String line;\n        while (!(line = reader.readLine("prompt> ")).equalsIgnoreCase("exit")) {\n            terminal.writer().println("You entered: " + line);\n        }\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"calling-widgets-programmatically",children:"Calling Widgets Programmatically"}),"\n",(0,i.jsxs)(n.p,{children:["You can call widgets programmatically using the ",(0,i.jsx)(n.code,{children:"callWidget"})," method:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="CallWidgetProgrammaticallyExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class CallWidgetProgrammaticallyExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // Display instructions\n        terminal.writer().println("This example demonstrates calling widgets programmatically.");\n        terminal.writer().println("The line will be pre-filled and manipulated using widgets.");\n        terminal.writer().println("\\nPress Enter to continue...");\n        terminal.writer().flush();\n        terminal.reader().readLine();\n        \n        // highlight-start\n        // Set up a callback to be called before reading a line\n        reader.setVariable(LineReader.PRE_READ_LINE, (Function<LineReader, Boolean>) r -> {\n            // Pre-fill the line buffer\n            r.getBuffer().write("This is a pre-filled line with some extra   spaces");\n            \n            // Call widgets programmatically\n            r.callWidget(LineReader.BEGINNING_OF_LINE);  // Move to beginning of line\n            r.callWidget(LineReader.FORWARD_WORD);       // Move forward one word\n            r.callWidget(LineReader.FORWARD_WORD);       // Move forward another word\n            r.callWidget(LineReader.UPCASE_WORD);        // Uppercase the current word\n            \n            // Call a custom widget to remove duplicate spaces\n            r.callWidget("remove-duplicate-spaces");\n            \n            return true;\n        });\n        \n        // Create and register a custom widget to remove duplicate spaces\n        reader.getWidgets().put("remove-duplicate-spaces", () -> {\n            String line = reader.getBuffer().toString();\n            String cleaned = line.replaceAll("\\\\s+", " ");\n            \n            reader.getBuffer().clear();\n            reader.getBuffer().write(cleaned);\n            \n            return true;\n        });\n        // highlight-end\n        \n        // Read a line\n        String line = reader.readLine("prompt> ");\n        terminal.writer().println("You entered: " + line);\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"widget-composition",children:"Widget Composition"}),"\n",(0,i.jsx)(n.p,{children:"You can compose widgets to create more complex functionality:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="WidgetCompositionExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.Widget;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.util.function.Function;\n\npublic class WidgetCompositionExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // highlight-start\n        // Create a utility method to compose widgets\n        Function<Widget[], Widget> compose = widgets -> () -> {\n            boolean result = true;\n            for (Widget widget : widgets) {\n                result = result && widget.apply();\n            }\n            return result;\n        };\n        \n        // Create individual widgets\n        Widget moveToBeginning = () -> {\n            reader.callWidget(LineReader.BEGINNING_OF_LINE);\n            return true;\n        };\n        \n        Widget deleteToEnd = () -> {\n            reader.callWidget(LineReader.KILL_LINE);\n            return true;\n        };\n        \n        Widget insertTimestamp = () -> {\n            String timestamp = LocalDateTime.now().format(\n                    DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));\n            reader.getBuffer().write(timestamp);\n            return true;\n        };\n        \n        // Compose widgets to create a complex action\n        Widget replaceLineWithTimestamp = compose.apply(new Widget[]{\n            moveToBeginning,\n            deleteToEnd,\n            insertTimestamp\n        });\n        \n        // Register the composed widget\n        reader.getWidgets().put("replace-line-with-timestamp", replaceLineWithTimestamp);\n        \n        // Bind the widget to a key combination\n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                replaceLineWithTimestamp, \n                "\\033t");  // Alt+T\n        // highlight-end\n        \n        // Display instructions\n        terminal.writer().println("Widget composition example:");\n        terminal.writer().println("  Alt+T: Replace the entire line with the current timestamp");\n        terminal.writer().println("\\nType some text and try the composed widget:");\n        terminal.writer().flush();\n        \n        // Read lines until "exit" is entered\n        String line;\n        while (!(line = reader.readLine("prompt> ")).equalsIgnoreCase("exit")) {\n            terminal.writer().println("You entered: " + line);\n        }\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"creating-a-widget-library",children:"Creating a Widget Library"}),"\n",(0,i.jsx)(n.p,{children:"For more complex applications, you might want to create a reusable widget library:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="WidgetLibraryExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.Widget;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class WidgetLibraryExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // highlight-start\n        // Create a widget library\n        WidgetLibrary library = new WidgetLibrary(reader);\n        \n        // Register widgets from the library\n        library.registerAll();\n        \n        // Bind some widgets to key combinations\n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                reader.getWidgets().get("insert-timestamp"), \n                "\\033t");  // Alt+T\n        \n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                reader.getWidgets().get("uppercase-word"), \n                "\\033u");  // Alt+U\n        \n        reader.getKeyMaps().get(LineReader.MAIN).bind(\n                reader.getWidgets().get("duplicate-line"), \n                "\\033d");  // Alt+D\n        // highlight-end\n        \n        // Display instructions\n        terminal.writer().println("Widget library example:");\n        terminal.writer().println("  Alt+T: Insert timestamp");\n        terminal.writer().println("  Alt+U: Uppercase current word");\n        terminal.writer().println("  Alt+D: Duplicate current line");\n        terminal.writer().println("\\nType some text and try the widgets:");\n        terminal.writer().flush();\n        \n        // Read lines until "exit" is entered\n        String line;\n        while (!(line = reader.readLine("prompt> ")).equalsIgnoreCase("exit")) {\n            terminal.writer().println("You entered: " + line);\n        }\n        \n        terminal.close();\n    }\n    \n    // highlight-start\n    // Widget library class\n    static class WidgetLibrary {\n        private final LineReader reader;\n        private final Map<String, Widget> widgets = new HashMap<>();\n        \n        public WidgetLibrary(LineReader reader) {\n            this.reader = reader;\n            initializeWidgets();\n        }\n        \n        private void initializeWidgets() {\n            // Text insertion widgets\n            widgets.put("insert-timestamp", () -> {\n                String timestamp = LocalDateTime.now().format(\n                        DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));\n                reader.getBuffer().write(timestamp);\n                return true;\n            });\n            \n            // Text manipulation widgets\n            widgets.put("uppercase-word", () -> {\n                String buffer = reader.getBuffer().toString();\n                int cursor = reader.getBuffer().cursor();\n                \n                int start = buffer.lastIndexOf(\' \', cursor - 1) + 1;\n                int end = buffer.indexOf(\' \', cursor);\n                if (end == -1) end = buffer.length();\n                \n                String word = buffer.substring(start, end);\n                \n                reader.getBuffer().cursor(start);\n                reader.getBuffer().delete(end - start);\n                reader.getBuffer().write(word.toUpperCase());\n                \n                return true;\n            });\n            \n            widgets.put("duplicate-line", () -> {\n                String line = reader.getBuffer().toString();\n                reader.getBuffer().write("\\n" + line);\n                return true;\n            });\n            \n            // Add more widgets as needed...\n        }\n        \n        public void registerAll() {\n            // Register all widgets with the line reader\n            for (Map.Entry<String, Widget> entry : widgets.entrySet()) {\n                reader.getWidgets().put(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        public Widget getWidget(String name) {\n            return widgets.get(name);\n        }\n    }\n    // highlight-end\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-for-widget-development",children:"Best Practices for Widget Development"}),"\n",(0,i.jsx)(n.p,{children:"When creating custom widgets, follow these best practices:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Keep widgets focused"}),": Each widget should do one thing well."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Handle edge cases"}),": Consider what happens when the buffer is empty, the cursor is at the beginning or end, etc."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Return appropriate values"}),": Return ",(0,i.jsx)(n.code,{children:"true"})," if the widget was successfully applied, or ",(0,i.jsx)(n.code,{children:"false"})," otherwise."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Document your widgets"}),": Provide clear documentation for what each widget does and how to use it."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use meaningful names"}),": Choose descriptive names for your widgets that indicate their purpose."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Compose widgets"}),": Use composition to create complex behaviors from simple widgets."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test thoroughly"}),": Test your widgets with various input scenarios to ensure they work correctly."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Consider performance"}),": For widgets that might be called frequently, optimize for performance."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Provide visual feedback"}),": For complex operations, consider providing visual feedback to the user."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Clean up after yourself"}),": If your widget makes changes to the terminal state, make sure to restore it properly."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"JLine's widget system provides a powerful way to extend and customize the line reader functionality. By creating custom widgets, you can add new features, modify existing behaviors, and create a more tailored command-line experience for your users."}),"\n",(0,i.jsx)(n.p,{children:"Whether you're adding simple text insertion capabilities or complex command execution functionality, widgets offer a clean, modular approach to extending JLine's capabilities."})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>d});var t=r(6540);const i={},a=t.createContext(i);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);