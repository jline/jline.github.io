"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[7582],{6452:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"terminal","title":"Terminal Handling","description":"JLine provides a powerful abstraction for terminal handling through its Terminal interface and implementations. This allows your application to interact with different terminal types in a consistent way.","source":"@site/docs/terminal.md","sourceDirName":".","slug":"/terminal","permalink":"/docs/terminal","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/terminal.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"JLine Architecture","permalink":"/docs/architecture"},"next":{"title":"Line Reading","permalink":"/docs/line-reader"}}');var t=i(4848),a=i(8453);const l={sidebar_position:2},s="Terminal Handling",o={},m=[{value:"Creating a Terminal",id:"creating-a-terminal",level:2},{value:"Terminal Capabilities",id:"terminal-capabilities",level:2},{value:"Terminal Output",id:"terminal-output",level:2},{value:"Terminal Input",id:"terminal-input",level:2},{value:"Terminal Signals",id:"terminal-signals",level:2},{value:"Closing the Terminal",id:"closing-the-terminal",level:2},{value:"Advanced Terminal Features",id:"advanced-terminal-features",level:2},{value:"Raw Mode",id:"raw-mode",level:3},{value:"Cursor Manipulation",id:"cursor-manipulation",level:3},{value:"Screen Clearing",id:"screen-clearing",level:3},{value:"Mouse Support",id:"mouse-support",level:3},{value:"Platform Compatibility",id:"platform-compatibility",level:2},{value:"Related Topics",id:"related-topics",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"terminal-handling",children:"Terminal Handling"})}),"\n",(0,t.jsxs)(n.p,{children:["JLine provides a powerful abstraction for terminal handling through its ",(0,t.jsx)(n.code,{children:"Terminal"})," interface and implementations. This allows your application to interact with different terminal types in a consistent way."]}),"\n",(0,t.jsxs)(n.p,{children:["The Terminal component is the foundation of JLine's architecture, providing the low-level interface to the terminal device. It's used by the ",(0,t.jsx)(n.a,{href:"/docs/line-reader",children:"LineReader"})," to provide advanced line editing capabilities."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-terminal",children:"Creating a Terminal"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"TerminalBuilder"})," class provides a fluent API for creating terminal instances:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="TerminalCreationExample.java"',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.nio.charset.Charset;\n\npublic class TerminalCreationExample {\n    public static void main(String[] args) throws IOException {\n        // highlight-next-line\n        // Create a system terminal (auto-detected)\n        Terminal terminal = TerminalBuilder.builder()\n                .system(true)\n                .build();\n\n        // Create a dumb terminal (minimal functionality)\n        Terminal dumbTerminal = TerminalBuilder.builder()\n                .dumb(true)\n                .build();\n\n        // Create a terminal with specific settings\n        Terminal customTerminal = TerminalBuilder.builder()\n                .name("CustomTerminal")\n                .system(false)\n                .streams(System.in, System.out)\n                .encoding(Charset.forName("UTF-8"))\n                .jansi(true)\n                .build();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"terminal-capabilities",children:"Terminal Capabilities"}),"\n",(0,t.jsx)(n.p,{children:"Once you have a terminal instance, you can query its capabilities:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="TerminalCapabilitiesExample.java"',children:'import org.jline.terminal.Size;\nimport org.jline.terminal.Terminal;\n\npublic class TerminalCapabilitiesExample {\n    public void checkCapabilities(Terminal terminal) {\n        // Check if the terminal supports ANSI\n        boolean supportsAnsi = terminal.getType().contains("ansi");\n\n        // highlight-start\n        // Get terminal size\n        Size size = terminal.getSize();\n        int width = size.getColumns();\n        int height = size.getRows();\n        // highlight-end\n\n        // Check if the terminal is interactive\n        boolean interactive = terminal.isInteractive();\n\n        System.out.printf("Terminal: %s, Size: %dx%d, Interactive: %b%n",\n                terminal.getType(), width, height, interactive);\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"terminal-output",children:"Terminal Output"}),"\n",(0,t.jsx)(n.p,{children:"You can write directly to the terminal:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="TerminalOutputExample.java"',children:'import org.jline.terminal.Terminal;\n\nimport java.io.PrintWriter;\n\npublic class TerminalOutputExample {\n    public void writeOutput(Terminal terminal) {\n        // Get the terminal writer\n        PrintWriter writer = terminal.writer();\n\n        // Write text\n        writer.println("Hello, JLine!");\n        writer.flush();\n\n        // highlight-start\n        // Use ANSI escape sequences for formatting (if supported)\n        writer.println("\\u001B[1;31mThis text is bold and red\\u001B[0m");\n        writer.flush();\n        // highlight-end\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"terminal-input",children:"Terminal Input"}),"\n",(0,t.jsx)(n.p,{children:"For direct terminal input (without using LineReader):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="TerminalInputExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.utils.NonBlockingReader;\n\nimport java.io.IOException;\n\npublic class TerminalInputExample {\n    public void readInput(Terminal terminal) throws IOException {\n        // Get the terminal reader\n        NonBlockingReader reader = terminal.reader();\n\n        // Read a character (blocking)\n        int c = reader.read();\n        System.out.println("Read character: " + (char)c);\n\n        // Check if input is available\n        boolean hasInput = reader.available() > 0;\n\n        // Read with timeout\n        int c2 = reader.read(100); // Wait up to 100ms\n        if (c2 != -1) {\n            System.out.println("Read character with timeout: " + (char)c2);\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"terminal-signals",children:"Terminal Signals"}),"\n",(0,t.jsx)(n.p,{children:"JLine can handle terminal signals:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="TerminalSignalsExample.java"',children:'import org.jline.terminal.Size;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.Terminal.Signal;\n\npublic class TerminalSignalsExample {\n    public void setupSignalHandlers(Terminal terminal) {\n        // highlight-start\n        terminal.handle(Signal.INT, signal -> {\n            // Handle Ctrl+C\n            System.out.println("Received SIGINT");\n        });\n        // highlight-end\n\n        terminal.handle(Signal.WINCH, signal -> {\n            // Handle terminal resize\n            Size size = terminal.getSize();\n            System.out.println("Terminal resized to " + size.getColumns() + "x" + size.getRows());\n        });\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"closing-the-terminal",children:"Closing the Terminal"}),"\n",(0,t.jsx)(n.p,{children:"Always close the terminal when you're done with it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="TerminalCloseExample.java"',children:'import org.jline.terminal.Terminal;\n\npublic class TerminalCloseExample {\n    public void closeTerminal(Terminal terminal) {\n        try {\n            // Always close the terminal when done\n            terminal.close();\n            System.out.println("Terminal closed successfully");\n        } catch (Exception e) {\n            System.err.println("Error closing terminal: " + e.getMessage());\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-terminal-features",children:"Advanced Terminal Features"}),"\n",(0,t.jsx)(n.p,{children:"JLine's terminal handling includes several advanced features:"}),"\n",(0,t.jsx)(n.h3,{id:"raw-mode",children:"Raw Mode"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="RawModeExample.java"',children:'import org.jline.terminal.Terminal;\n\nimport java.io.IOException;\n\npublic class RawModeExample {\n    public void demonstrateRawMode(Terminal terminal) throws IOException {\n        try {\n            // highlight-next-line\n            // Enter raw mode (disable echo, line buffering, etc.)\n            terminal.enterRawMode();\n\n            System.out.println("Terminal is now in raw mode");\n            // Do some raw mode operations...\n\n            // Exit raw mode\n            terminal.setAttributes(terminal.getAttributes().copy());\n            System.out.println("Terminal is back to normal mode");\n        } catch (Exception e) {\n            System.err.println("Error with raw mode: " + e.getMessage());\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"cursor-manipulation",children:"Cursor Manipulation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="CursorManipulationExample.java"',children:'import org.jline.terminal.Cursor;\nimport org.jline.terminal.Terminal;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\npublic class CursorManipulationExample {\n    public void manipulateCursor(Terminal terminal) throws IOException {\n        // Get cursor position\n        Cursor position = terminal.getCursorPosition(null);\n        if (position != null) {\n            System.out.printf("Current cursor position: %d,%d%n",\n                    position.getX(), position.getY());\n        }\n\n        // Get the terminal writer\n        PrintWriter writer = terminal.writer();\n\n        // highlight-start\n        // Move cursor to row 5, column 10\n        writer.write("\\u001B[5;10H");\n        writer.flush();\n        // highlight-end\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"screen-clearing",children:"Screen Clearing"}),"\n",(0,t.jsx)(n.p,{children:"JLine provides a more portable way to clear the screen using terminal capabilities:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="ScreenClearingExample.java"',children:'import org.jline.terminal.Terminal;\nimport org.jline.utils.InfoCmp.Capability;\n\npublic class ScreenClearingExample {\n    public void clearScreen(Terminal terminal) {\n        // highlight-start\n        // Clear screen using terminal capabilities\n        terminal.puts(Capability.clear_screen);\n        // highlight-end\n\n        // Clear line using terminal capabilities\n        terminal.puts(Capability.clr_eol);\n\n        // Move cursor to home position\n        terminal.puts(Capability.cursor_home);\n\n        terminal.writer().println("Screen and line cleared");\n        terminal.flush();\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"This approach is preferred over using raw ANSI escape sequences because:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"It's more portable across different terminal types"}),"\n",(0,t.jsx)(n.li,{children:"It automatically adapts to the terminal's capabilities"}),"\n",(0,t.jsx)(n.li,{children:"It works even on terminals that don't support ANSI sequences"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mouse-support",children:"Mouse Support"}),"\n",(0,t.jsx)(n.p,{children:"JLine supports mouse events in terminals that provide mouse capabilities:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",metastring:'title="MouseSupportExample.java" showLineNumbers',children:"import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.terminal.MouseEvent;\nimport org.jline.terminal.MouseEvent.Type;\nimport org.jline.utils.InfoCmp.Capability;\n\nimport java.io.IOException;\nimport java.util.function.Consumer;\n\npublic class MouseSupportExample {\n    public static void main(String[] args) throws IOException, InterruptedException {\n        Terminal terminal = TerminalBuilder.builder().build();\n\n        try {\n            // Clear screen\n            terminal.puts(Capability.clear_screen);\n            terminal.flush();\n\n            // highlight-start\n            // Enable mouse tracking\n            terminal.trackMouse(Terminal.MouseTracking.Normal);\n            // highlight-end\n\n            terminal.writer().println(\"Mouse tracking enabled. Click anywhere or press q to quit.\");\n            terminal.writer().println();\n            terminal.flush();\n\n            // Set up mouse event handler\n            Consumer<MouseEvent> mouseHandler = event -> {\n                terminal.writer().println(String.format(\"Mouse event: type=%s, button=%s, x=%d, y=%d\",\n                        event.getType(), event.getButton(), event.getX(), event.getY()));\n                terminal.flush();\n            };\n\n            // Register the mouse handler\n            terminal.handle(Terminal.Signal.MOUSE, signal -> {\n                MouseEvent event = terminal.readMouseEvent();\n                mouseHandler.accept(event);\n            });\n\n            // Wait for 'q' key to exit\n            while (true) {\n                int c = terminal.reader().read(1000);\n                if (c == 'q' || c == 'Q') {\n                    break;\n                }\n            }\n        } finally {\n            // Disable mouse tracking before exiting\n            terminal.trackMouse(Terminal.MouseTracking.Off);\n            terminal.close();\n        }\n    }\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Mouse tracking modes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Terminal.MouseTracking.Off"}),": Disables mouse tracking"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Terminal.MouseTracking.Normal"}),": Reports button press and release events"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Terminal.MouseTracking.Button"}),": Reports button press, release, and motion events while buttons are pressed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Terminal.MouseTracking.Any"}),": Reports all mouse events, including motion events"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Not all terminals support mouse tracking. You can check if mouse tracking is supported:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"boolean supportsMouseTracking = terminal.getStringCapability(Capability.key_mouse) != null;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"platform-compatibility",children:"Platform Compatibility"}),"\n",(0,t.jsx)(n.p,{children:"JLine's terminal handling works across different platforms:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Windows (using JNA or Jansi)"}),"\n",(0,t.jsx)(n.li,{children:"Unix/Linux (using native PTY)"}),"\n",(0,t.jsx)(n.li,{children:"macOS (using native PTY)"}),"\n",(0,t.jsx)(n.li,{children:"Dumb terminals (minimal functionality)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This cross-platform compatibility makes JLine ideal for applications that need to run in various environments."}),"\n",(0,t.jsx)(n.h2,{id:"related-topics",children:"Related Topics"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/modules/terminal-providers",children:"Terminal Providers"}),": Learn about the different terminal provider implementations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/advanced/terminal-attributes",children:"Terminal Attributes"}),": Configure terminal attributes like echo and signals"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/advanced/terminal-size",children:"Terminal Size"}),": Handle terminal size changes"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/advanced/screen-clearing",children:"Screen Clearing"}),": Clear the screen and control cursor positioning"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/docs/line-reader",children:"Line Reader"}),": Build on top of the terminal for line editing capabilities"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>s});var r=i(6540);const t={},a=r.createContext(t);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);