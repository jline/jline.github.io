"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[7582],{6452:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"terminal","title":"Terminal Handling","description":"JLine provides a powerful abstraction for terminal handling through its Terminal interface and implementations. This allows your application to interact with different terminal types in a consistent way.","source":"@site/docs/terminal.md","sourceDirName":".","slug":"/terminal","permalink":"/docs/terminal","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/terminal.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started with JLine","permalink":"/docs/intro"},"next":{"title":"Line Reading","permalink":"/docs/line-reader"}}');var a=i(4848),t=i(8453);const l={sidebar_position:2},s="Terminal Handling",o={},d=[{value:"Creating a Terminal",id:"creating-a-terminal",level:2},{value:"Terminal Capabilities",id:"terminal-capabilities",level:2},{value:"Terminal Output",id:"terminal-output",level:2},{value:"Terminal Input",id:"terminal-input",level:2},{value:"Terminal Signals",id:"terminal-signals",level:2},{value:"Closing the Terminal",id:"closing-the-terminal",level:2},{value:"Advanced Terminal Features",id:"advanced-terminal-features",level:2},{value:"Raw Mode",id:"raw-mode",level:3},{value:"Cursor Manipulation",id:"cursor-manipulation",level:3},{value:"Screen Clearing",id:"screen-clearing",level:3},{value:"Platform Compatibility",id:"platform-compatibility",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"terminal-handling",children:"Terminal Handling"})}),"\n",(0,a.jsxs)(n.p,{children:["JLine provides a powerful abstraction for terminal handling through its ",(0,a.jsx)(n.code,{children:"Terminal"})," interface and implementations. This allows your application to interact with different terminal types in a consistent way."]}),"\n",(0,a.jsx)(n.h2,{id:"creating-a-terminal",children:"Creating a Terminal"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"TerminalBuilder"})," class provides a fluent API for creating terminal instances:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\n// Create a system terminal (auto-detected)\nTerminal terminal = TerminalBuilder.builder()\n        .system(true)\n        .build();\n\n// Create a dumb terminal (minimal functionality)\nTerminal dumbTerminal = TerminalBuilder.builder()\n        .dumb(true)\n        .build();\n\n// Create a terminal with specific settings\nTerminal customTerminal = TerminalBuilder.builder()\n        .name("CustomTerminal")\n        .system(false)\n        .streams(System.in, System.out)\n        .encoding(Charset.forName("UTF-8"))\n        .jansi(true)\n        .build();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"terminal-capabilities",children:"Terminal Capabilities"}),"\n",(0,a.jsx)(n.p,{children:"Once you have a terminal instance, you can query its capabilities:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Check if the terminal supports ANSI\nboolean supportsAnsi = terminal.getType().contains("ansi");\n\n// Get terminal size\nSize size = terminal.getSize();\nint width = size.getColumns();\nint height = size.getRows();\n\n// Check if the terminal is interactive\nboolean interactive = terminal.isInteractive();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"terminal-output",children:"Terminal Output"}),"\n",(0,a.jsx)(n.p,{children:"You can write directly to the terminal:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Get the terminal writer\nPrintWriter writer = terminal.writer();\n\n// Write text\nwriter.println("Hello, JLine!");\nwriter.flush();\n\n// Use ANSI escape sequences for formatting (if supported)\nwriter.println("\\u001B[1;31mThis text is bold and red\\u001B[0m");\nwriter.flush();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"terminal-input",children:"Terminal Input"}),"\n",(0,a.jsx)(n.p,{children:"For direct terminal input (without using LineReader):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Get the terminal reader\nNonBlockingReader reader = terminal.reader();\n\n// Read a character (blocking)\nint c = reader.read();\n\n// Check if input is available\nboolean hasInput = reader.available() > 0;\n\n// Read with timeout\nint c = reader.read(100); // Wait up to 100ms\n"})}),"\n",(0,a.jsx)(n.h2,{id:"terminal-signals",children:"Terminal Signals"}),"\n",(0,a.jsx)(n.p,{children:"JLine can handle terminal signals:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'terminal.handle(Signal.INT, signal -> {\n    // Handle Ctrl+C\n    System.out.println("Received SIGINT");\n});\n\nterminal.handle(Signal.WINCH, signal -> {\n    // Handle terminal resize\n    Size size = terminal.getSize();\n    System.out.println("Terminal resized to " + size.getColumns() + "x" + size.getRows());\n});\n'})}),"\n",(0,a.jsx)(n.h2,{id:"closing-the-terminal",children:"Closing the Terminal"}),"\n",(0,a.jsx)(n.p,{children:"Always close the terminal when you're done with it:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"terminal.close();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"advanced-terminal-features",children:"Advanced Terminal Features"}),"\n",(0,a.jsx)(n.p,{children:"JLine's terminal handling includes several advanced features:"}),"\n",(0,a.jsx)(n.h3,{id:"raw-mode",children:"Raw Mode"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// Enter raw mode (disable echo, line buffering, etc.)\nterminal.enterRawMode();\n\n// Exit raw mode\nterminal.setAttributes(terminal.getAttributes().copy());\n"})}),"\n",(0,a.jsx)(n.h3,{id:"cursor-manipulation",children:"Cursor Manipulation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Get cursor position\nCursorPosition position = terminal.getCursorPosition(null);\n\n// Move cursor\nwriter.write("\\u001B[5;10H"); // Move to row 5, column 10\nwriter.flush();\n'})}),"\n",(0,a.jsx)(n.h3,{id:"screen-clearing",children:"Screen Clearing"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Clear screen\nwriter.write("\\u001B[2J");\nwriter.flush();\n\n// Clear line\nwriter.write("\\u001B[K");\nwriter.flush();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"platform-compatibility",children:"Platform Compatibility"}),"\n",(0,a.jsx)(n.p,{children:"JLine's terminal handling works across different platforms:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Windows (using JNA or Jansi)"}),"\n",(0,a.jsx)(n.li,{children:"Unix/Linux (using native PTY)"}),"\n",(0,a.jsx)(n.li,{children:"macOS (using native PTY)"}),"\n",(0,a.jsx)(n.li,{children:"Dumb terminals (minimal functionality)"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This cross-platform compatibility makes JLine ideal for applications that need to run in various environments."})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>s});var r=i(6540);const a={},t=r.createContext(a);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);