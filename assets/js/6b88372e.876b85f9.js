"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[7406],{7364:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>a,contentTitle:()=>s,default:()=>c,frontMatter:()=>d,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"advanced/attributed-strings","title":"Attributed Strings","description":"JLine provides powerful support for styled text through its attributed string classes. These classes allow you to create text with colors, formatting, and other visual attributes for rich terminal output.","source":"@site/docs/advanced/attributed-strings.md","sourceDirName":"advanced","slug":"/advanced/attributed-strings","permalink":"/docs/advanced/attributed-strings","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/advanced/attributed-strings.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Terminal Attributes and Modes","permalink":"/docs/advanced/terminal-attributes"},"next":{"title":"Key Bindings and Widgets","permalink":"/docs/advanced/key-bindings"}}');var r=n(4848),l=n(8453);const d={sidebar_position:5},s="Attributed Strings",a={},u=[{value:"Core Classes",id:"core-classes",level:2},{value:"AttributedStyle",id:"attributedstyle",level:2},{value:"Creating Styles",id:"creating-styles",level:3},{value:"Available Colors",id:"available-colors",level:3},{value:"Text Attributes",id:"text-attributes",level:3},{value:"AttributedString",id:"attributedstring",level:2},{value:"Creating AttributedStrings",id:"creating-attributedstrings",level:3},{value:"Displaying AttributedStrings",id:"displaying-attributedstrings",level:3},{value:"AttributedStringBuilder",id:"attributedstringbuilder",level:2},{value:"Building Complex Strings",id:"building-complex-strings",level:3},{value:"Styling Specific Sections",id:"styling-specific-sections",level:3},{value:"Common Use Cases",id:"common-use-cases",level:2},{value:"Status Messages",id:"status-messages",level:3},{value:"Progress Bars",id:"progress-bars",level:3},{value:"Syntax Highlighting",id:"syntax-highlighting",level:3},{value:"Integration with Other JLine Features",id:"integration-with-other-jline-features",level:2},{value:"Status Bar",id:"status-bar",level:3},{value:"PrintAbove",id:"printabove",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Conclusion",id:"conclusion",level:2}];function o(t){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"attributed-strings",children:"Attributed Strings"})}),"\n",(0,r.jsx)(e.p,{children:"JLine provides powerful support for styled text through its attributed string classes. These classes allow you to create text with colors, formatting, and other visual attributes for rich terminal output."}),"\n",(0,r.jsx)(e.h2,{id:"core-classes",children:"Core Classes"}),"\n",(0,r.jsx)(e.p,{children:"JLine's attributed string functionality is built around three main classes:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"AttributedString"}),": An immutable string with style attributes"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"AttributedStyle"}),": Defines style attributes like colors and formatting"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"AttributedStringBuilder"}),": A builder for creating attributed strings"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"attributedstyle",children:"AttributedStyle"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"AttributedStyle"})," class represents the styling attributes that can be applied to text. It includes support for:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Foreground colors"}),"\n",(0,r.jsx)(e.li,{children:"Background colors"}),"\n",(0,r.jsx)(e.li,{children:"Text attributes (bold, italic, underline, etc.)"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"creating-styles",children:"Creating Styles"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:'title="AttributedStyleExample.java" showLineNumbers',children:"import org.jline.utils.AttributedStyle;\n\n// Create a default style\nAttributedStyle defaultStyle = AttributedStyle.DEFAULT;\n\n// Create a style with foreground color\nAttributedStyle redText = AttributedStyle.DEFAULT.foreground(AttributedStyle.RED);\n\n// Create a style with background color\nAttributedStyle blueBackground = AttributedStyle.DEFAULT.background(AttributedStyle.BLUE);\n\n// Create a style with text attributes\nAttributedStyle boldText = AttributedStyle.DEFAULT.bold();\nAttributedStyle italicText = AttributedStyle.DEFAULT.italic();\nAttributedStyle underlinedText = AttributedStyle.DEFAULT.underline();\n\n// Combine multiple attributes\nAttributedStyle boldRedOnBlue = AttributedStyle.DEFAULT\n        .foreground(AttributedStyle.RED)\n        .background(AttributedStyle.BLUE)\n        .bold();\n"})}),"\n",(0,r.jsx)(e.h3,{id:"available-colors",children:"Available Colors"}),"\n",(0,r.jsx)(e.p,{children:"JLine supports 8 basic colors and their bright variants:"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Color Constant"}),(0,r.jsx)(e.th,{children:"Description"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"AttributedStyle.BLACK"})}),(0,r.jsx)(e.td,{children:"Black"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"AttributedStyle.RED"})}),(0,r.jsx)(e.td,{children:"Red"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"AttributedStyle.GREEN"})}),(0,r.jsx)(e.td,{children:"Green"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"AttributedStyle.YELLOW"})}),(0,r.jsx)(e.td,{children:"Yellow"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"AttributedStyle.BLUE"})}),(0,r.jsx)(e.td,{children:"Blue"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"AttributedStyle.MAGENTA"})}),(0,r.jsx)(e.td,{children:"Magenta"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"AttributedStyle.CYAN"})}),(0,r.jsx)(e.td,{children:"Cyan"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"AttributedStyle.WHITE"})}),(0,r.jsx)(e.td,{children:"White"})]})]})]}),"\n",(0,r.jsxs)(e.p,{children:["You can also use bright variants with the ",(0,r.jsx)(e.code,{children:"bright()"})," method:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"AttributedStyle brightRed = AttributedStyle.DEFAULT.foreground(AttributedStyle.RED).bold();\n"})}),"\n",(0,r.jsx)(e.p,{children:"For terminals that support it, you can also use 256-color mode:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"// Use a specific color from the 256-color palette\nAttributedStyle color123 = AttributedStyle.DEFAULT.foreground(123);\n"})}),"\n",(0,r.jsx)(e.h3,{id:"text-attributes",children:"Text Attributes"}),"\n",(0,r.jsx)(e.p,{children:"JLine supports several text attributes:"}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Method"}),(0,r.jsx)(e.th,{children:"Description"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"bold()"})}),(0,r.jsx)(e.td,{children:"Bold text"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"faint()"})}),(0,r.jsx)(e.td,{children:"Faint text (reduced intensity)"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"italic()"})}),(0,r.jsx)(e.td,{children:"Italic text"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"underline()"})}),(0,r.jsx)(e.td,{children:"Underlined text"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"blink()"})}),(0,r.jsx)(e.td,{children:"Blinking text"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"inverse()"})}),(0,r.jsx)(e.td,{children:"Inverse colors (swap foreground and background)"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"conceal()"})}),(0,r.jsx)(e.td,{children:"Hidden text"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.code,{children:"crossedOut()"})}),(0,r.jsx)(e.td,{children:"Crossed-out text"})]})]})]}),"\n",(0,r.jsx)(e.h2,{id:"attributedstring",children:"AttributedString"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"AttributedString"})," class represents an immutable string with style attributes. It's the final product that you'll display to the terminal."]}),"\n",(0,r.jsx)(e.h3,{id:"creating-attributedstrings",children:"Creating AttributedStrings"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:'title="AttributedStringExample.java" showLineNumbers',children:'import org.jline.utils.AttributedString;\nimport org.jline.utils.AttributedStyle;\n\n// Create an AttributedString with a style\nAttributedString errorMessage = new AttributedString(\n        "Error: File not found",\n        AttributedStyle.DEFAULT.foreground(AttributedStyle.RED).bold()\n);\n\n// Create an AttributedString with default style\nAttributedString plainText = new AttributedString("Plain text");\n'})}),"\n",(0,r.jsx)(e.h3,{id:"displaying-attributedstrings",children:"Displaying AttributedStrings"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:'title="DisplayAttributedStringExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\nimport org.jline.utils.AttributedStyle;\n\nimport java.io.IOException;\n\npublic class DisplayAttributedStringExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create an attributed string\n        AttributedString message = new AttributedString(\n                "This is a styled message",\n                AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN).bold()\n        );\n        \n        // Print the attributed string to the terminal\n        message.println(terminal);\n        \n        // Or get the ANSI escape sequence string\n        String ansiString = message.toAnsi(terminal);\n        System.out.println("ANSI string: " + ansiString);\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"attributedstringbuilder",children:"AttributedStringBuilder"}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"AttributedStringBuilder"})," class provides a builder pattern for creating complex attributed strings with multiple styles."]}),"\n",(0,r.jsx)(e.h3,{id:"building-complex-strings",children:"Building Complex Strings"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:'title="AttributedStringBuilderExample.java" showLineNumbers',children:'import org.jline.utils.AttributedStringBuilder;\nimport org.jline.utils.AttributedStyle;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\n\npublic class AttributedStringBuilderExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Create a builder\n        AttributedStringBuilder builder = new AttributedStringBuilder();\n        \n        // Append text with different styles\n        builder.append("System status: ")\n               .style(AttributedStyle.DEFAULT.bold())\n               .append("ONLINE")\n               .style(AttributedStyle.DEFAULT)\n               .append(" (")\n               .style(AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN))\n               .append("All systems operational")\n               .style(AttributedStyle.DEFAULT)\n               .append(")");\n        \n        // Build the final AttributedString\n        AttributedString result = builder.toAttributedString();\n        \n        // Print to terminal\n        result.println(terminal);\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"styling-specific-sections",children:"Styling Specific Sections"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:'title="StylingSpecificSectionsExample.java" showLineNumbers',children:'import org.jline.utils.AttributedStringBuilder;\nimport org.jline.utils.AttributedStyle;\n\n// Create a builder\nAttributedStringBuilder builder = new AttributedStringBuilder();\n\n// Append text with default style\nbuilder.append("Command: ");\n\n// Append text with a specific style\nbuilder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.YELLOW).bold())\n       .append("git")\n       .style(AttributedStyle.DEFAULT)\n       .append(" ");\n\n// Append more styled text\nbuilder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE))\n       .append("commit")\n       .style(AttributedStyle.DEFAULT)\n       .append(" ");\n\n// Append an option with a different style\nbuilder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN))\n       .append("-m")\n       .style(AttributedStyle.DEFAULT)\n       .append(" ");\n\n// Append a quoted string with yet another style\nbuilder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.MAGENTA))\n       .append("\\"Fix critical bug\\"");\n'})}),"\n",(0,r.jsx)(e.h2,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,r.jsx)(e.h3,{id:"status-messages",children:"Status Messages"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:'title="StatusMessageExample.java" showLineNumbers',children:'import org.jline.utils.AttributedStringBuilder;\nimport org.jline.utils.AttributedStyle;\n\npublic class StatusMessageExample {\n    public static AttributedString createStatusMessage(String status) {\n        AttributedStringBuilder builder = new AttributedStringBuilder();\n        builder.append("Status: ");\n        \n        switch (status.toLowerCase()) {\n            case "success":\n                builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN))\n                       .append("SUCCESS");\n                break;\n            case "warning":\n                builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.YELLOW))\n                       .append("WARNING");\n                break;\n            case "error":\n                builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.RED))\n                       .append("ERROR");\n                break;\n            default:\n                builder.append(status);\n                break;\n        }\n        \n        return builder.toAttributedString();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"progress-bars",children:"Progress Bars"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:'title="ProgressBarExample.java" showLineNumbers',children:'import org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedStringBuilder;\nimport org.jline.utils.AttributedStyle;\n\nimport java.io.IOException;\n\npublic class ProgressBarExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        for (int i = 0; i <= 100; i += 5) {\n            // Create a progress bar\n            AttributedString progressBar = createProgressBar(i, 50);\n            \n            // Clear the line and print the progress bar\n            terminal.writer().print("\\r");\n            progressBar.print(terminal);\n            \n            // Sleep to simulate work\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n        \n        terminal.writer().println();\n        terminal.close();\n    }\n    \n    private static AttributedString createProgressBar(int percentage, int width) {\n        AttributedStringBuilder builder = new AttributedStringBuilder();\n        \n        // Calculate the number of completed and remaining segments\n        int completed = width * percentage / 100;\n        int remaining = width - completed;\n        \n        // Add the percentage\n        builder.style(AttributedStyle.DEFAULT.bold())\n               .append(String.format("%3d%% ", percentage));\n        \n        // Add the progress bar\n        builder.append("[");\n        \n        // Add completed segments\n        builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN))\n               .append("=".repeat(completed));\n        \n        // Add remaining segments\n        builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.BLACK))\n               .append(" ".repeat(remaining));\n        \n        // Close the progress bar\n        builder.style(AttributedStyle.DEFAULT)\n               .append("]");\n        \n        return builder.toAttributedString();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"syntax-highlighting",children:"Syntax Highlighting"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:'title="SyntaxHighlightingExample.java" showLineNumbers',children:'import org.jline.reader.Highlighter;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\nimport org.jline.utils.AttributedStringBuilder;\nimport org.jline.utils.AttributedStyle;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SyntaxHighlightingExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // Define keywords for highlighting\n        Set<String> commands = new HashSet<>(Arrays.asList("select", "from", "where", "insert", "update", "delete"));\n        Set<String> operators = new HashSet<>(Arrays.asList("and", "or", "not", "in", "like", "between"));\n        \n        // Create a custom highlighter\n        Highlighter highlighter = (reader, buffer, candidates) -> {\n            AttributedStringBuilder builder = new AttributedStringBuilder();\n            \n            // Simple SQL syntax highlighting\n            String[] tokens = buffer.toString().split("\\\\s+");\n            for (int i = 0; i < tokens.length; i++) {\n                String token = tokens[i];\n                \n                if (i > 0) {\n                    builder.append(" ");\n                }\n                \n                if (commands.contains(token.toLowerCase())) {\n                    // Highlight commands\n                    builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE).bold())\n                           .append(token);\n                } else if (operators.contains(token.toLowerCase())) {\n                    // Highlight operators\n                    builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.YELLOW))\n                           .append(token);\n                } else if (token.matches("\\\\d+")) {\n                    // Highlight numbers\n                    builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.MAGENTA))\n                           .append(token);\n                } else if (token.startsWith("\'") && token.endsWith("\'")) {\n                    // Highlight strings\n                    builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN))\n                           .append(token);\n                } else {\n                    // Default style\n                    builder.style(AttributedStyle.DEFAULT)\n                           .append(token);\n                }\n            }\n            \n            AttributedString result = builder.toAttributedString();\n            candidates.add(result);\n            return result;\n        };\n        \n        // Create a line reader with the highlighter\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .highlighter(highlighter)\n                .build();\n        \n        // Read input with syntax highlighting\n        String line = reader.readLine("SQL> ");\n        System.out.println("You entered: " + line);\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"integration-with-other-jline-features",children:"Integration with Other JLine Features"}),"\n",(0,r.jsx)(e.h3,{id:"status-bar",children:"Status Bar"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:'title="StatusBarExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedStringBuilder;\nimport org.jline.utils.AttributedStyle;\nimport org.jline.utils.Status;\n\nimport java.io.IOException;\n\npublic class StatusBarExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // Get the status instance\n        Status status = Status.getStatus(terminal);\n        if (status != null) {\n            // Create a styled status message\n            AttributedStringBuilder builder = new AttributedStringBuilder();\n            builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE))\n                   .append("Server: ")\n                   .style(AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN))\n                   .append("Connected")\n                   .style(AttributedStyle.DEFAULT)\n                   .append(" | ")\n                   .style(AttributedStyle.DEFAULT.foreground(AttributedStyle.YELLOW))\n                   .append("Users: ")\n                   .style(AttributedStyle.DEFAULT)\n                   .append("42");\n            \n            // Update the status bar\n            status.update(builder.toAttributedString());\n        }\n        \n        // Read input normally\n        String line = reader.readLine("prompt> ");\n        System.out.println("You entered: " + line);\n        \n        terminal.close();\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"printabove",children:"PrintAbove"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",metastring:'title="PrintAboveExample.java" showLineNumbers',children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedStringBuilder;\nimport org.jline.utils.AttributedStyle;\n\nimport java.io.IOException;\n\npublic class PrintAboveExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .build();\n        \n        // Start a background thread to print styled messages\n        new Thread(() -> {\n            try {\n                for (int i = 0; i < 5; i++) {\n                    Thread.sleep(2000);\n                    \n                    // Create a styled notification\n                    AttributedStringBuilder builder = new AttributedStringBuilder();\n                    builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE).bold())\n                           .append("[INFO] ")\n                           .style(AttributedStyle.DEFAULT)\n                           .append("Notification #")\n                           .style(AttributedStyle.DEFAULT.foreground(AttributedStyle.YELLOW))\n                           .append(String.valueOf(i));\n                    \n                    // Print above the current line\n                    reader.printAbove(builder.toAttributedString());\n                }\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }).start();\n        \n        // Read input normally\n        while (true) {\n            String line = reader.readLine("prompt> ");\n            System.out.println("You entered: " + line);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Reuse Styles"}),": Create and reuse common styles for consistency."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:"// Define common styles\nprivate static final AttributedStyle ERROR_STYLE = AttributedStyle.DEFAULT.foreground(AttributedStyle.RED).bold();\nprivate static final AttributedStyle WARNING_STYLE = AttributedStyle.DEFAULT.foreground(AttributedStyle.YELLOW);\nprivate static final AttributedStyle SUCCESS_STYLE = AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN);\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Consider Terminal Capabilities"}),": Not all terminals support all styling features. Use ",(0,r.jsx)(e.code,{children:"terminal.getType()"})," to check terminal capabilities."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Reset Styles"}),": Always reset styles after use to avoid unintended styling."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-java",children:'builder.style(AttributedStyle.DEFAULT.foreground(AttributedStyle.RED))\n       .append("Error")\n       .style(AttributedStyle.DEFAULT)  // Reset to default style\n       .append(": Something went wrong");\n'})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Use Builder Pattern"}),": For complex strings with multiple styles, use ",(0,r.jsx)(e.code,{children:"AttributedStringBuilder"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Test on Different Terminals"}),": Test your styled output on different terminals to ensure compatibility."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsxs)(e.p,{children:["JLine's attributed string classes provide a powerful way to create rich, styled terminal output. By combining ",(0,r.jsx)(e.code,{children:"AttributedStyle"}),", ",(0,r.jsx)(e.code,{children:"AttributedString"}),", and ",(0,r.jsx)(e.code,{children:"AttributedStringBuilder"}),", you can create visually appealing and informative terminal interfaces that enhance the user experience."]})]})}function c(t={}){const{wrapper:e}={...(0,l.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(o,{...t})}):o(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>d,x:()=>s});var i=n(6540);const r={},l=i.createContext(r);function d(t){const e=i.useContext(l);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:d(t.components),i.createElement(l.Provider,{value:e},t.children)}}}]);