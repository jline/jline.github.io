"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[8559],{8453:(e,i,n)=>{n.d(i,{R:()=>d,x:()=>a});var r=n(6540);const s={},l=r.createContext(s);function d(e){const i=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(l.Provider,{value:i},e.children)}},9274:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>t,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"api/overview","title":"API Overview","description":"JLine provides a comprehensive API for building interactive command-line applications. This section provides an overview of the key interfaces and classes in JLine.","source":"@site/docs/api/overview.md","sourceDirName":"api","slug":"/api/overview","permalink":"/docs/api/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/api/overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"JLine Console UI","permalink":"/docs/modules/console-ui"}}');var s=n(4848),l=n(8453);const d={sidebar_position:1},a="API Overview",t={},c=[{value:"Core Components",id:"core-components",level:2},{value:"Terminal",id:"terminal",level:3},{value:"LineReader",id:"linereader",level:3},{value:"Completer",id:"completer",level:3},{value:"History",id:"history",level:3},{value:"Parser",id:"parser",level:3},{value:"Highlighter",id:"highlighter",level:3},{value:"Utility Classes",id:"utility-classes",level:2},{value:"AttributedString",id:"attributedstring",level:3},{value:"Display",id:"display",level:3},{value:"Package Structure",id:"package-structure",level:2},{value:"API Stability",id:"api-stability",level:2},{value:"Thread Safety",id:"thread-safety",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Further Reading",id:"further-reading",level:2}];function o(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"api-overview",children:"API Overview"})}),"\n",(0,s.jsx)(i.p,{children:"JLine provides a comprehensive API for building interactive command-line applications. This section provides an overview of the key interfaces and classes in JLine."}),"\n",(0,s.jsx)(i.h2,{id:"core-components",children:"Core Components"}),"\n",(0,s.jsx)(i.p,{children:"JLine's API is organized around several core components:"}),"\n",(0,s.jsx)(i.h3,{id:"terminal",children:"Terminal"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"Terminal"})," interface represents the terminal device. It provides methods for:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Reading input"}),"\n",(0,s.jsx)(i.li,{children:"Writing output"}),"\n",(0,s.jsx)(i.li,{children:"Querying terminal capabilities"}),"\n",(0,s.jsx)(i.li,{children:"Handling signals"}),"\n",(0,s.jsx)(i.li,{children:"Managing terminal attributes"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Key classes:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Terminal"}),": The main interface"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"TerminalBuilder"}),": Factory for creating terminals"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Attributes"}),": Terminal attributes (raw mode, echo, etc.)"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Size"}),": Terminal dimensions"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://github.com/jline/jline3/blob/master/terminal/src/main/java/org/jline/terminal/Terminal.java",children:"View Terminal JavaDoc"})}),"\n",(0,s.jsx)(i.h3,{id:"linereader",children:"LineReader"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"LineReader"})," interface provides line editing capabilities. It handles:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Reading lines with editing"}),"\n",(0,s.jsx)(i.li,{children:"History management"}),"\n",(0,s.jsx)(i.li,{children:"Completion"}),"\n",(0,s.jsx)(i.li,{children:"Syntax highlighting"}),"\n",(0,s.jsx)(i.li,{children:"Key binding"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Key classes:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"LineReader"}),": The main interface"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"LineReaderBuilder"}),": Factory for creating line readers"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"ParsedLine"}),": Parsed command line"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Candidate"}),": Completion candidate"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://github.com/jline/jline3/blob/master/reader/src/main/java/org/jline/reader/LineReader.java",children:"View LineReader JavaDoc"})}),"\n",(0,s.jsx)(i.h3,{id:"completer",children:"Completer"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"Completer"})," interface provides tab completion. Key classes:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Completer"}),": The main interface"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"StringsCompleter"}),": Completes from a list of strings"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"FileNameCompleter"}),": Completes file names"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"ArgumentCompleter"}),": Completes command arguments"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"TreeCompleter"}),": Hierarchical completion"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://github.com/jline/jline3/blob/master/reader/src/main/java/org/jline/reader/Completer.java",children:"View Completer JavaDoc"})}),"\n",(0,s.jsx)(i.h3,{id:"history",children:"History"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"History"})," interface manages command history. Key classes:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"History"}),": The main interface"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"DefaultHistory"}),": Standard history implementation"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"MemoryHistory"}),": In-memory history"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"FileHistory"}),": File-based history"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://github.com/jline/jline3/blob/master/reader/src/main/java/org/jline/reader/History.java",children:"View History JavaDoc"})}),"\n",(0,s.jsx)(i.h3,{id:"parser",children:"Parser"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"Parser"})," interface parses command lines. Key classes:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Parser"}),": The main interface"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"DefaultParser"}),": Standard parser implementation"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"ParsedLine"}),": Parsed command line"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://github.com/jline/jline3/blob/master/reader/src/main/java/org/jline/reader/Parser.java",children:"View Parser JavaDoc"})}),"\n",(0,s.jsx)(i.h3,{id:"highlighter",children:"Highlighter"}),"\n",(0,s.jsxs)(i.p,{children:["The ",(0,s.jsx)(i.code,{children:"Highlighter"})," interface provides syntax highlighting. Key classes:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Highlighter"}),": The main interface"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"DefaultHighlighter"}),": Standard highlighter implementation"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://github.com/jline/jline3/blob/master/reader/src/main/java/org/jline/reader/Highlighter.java",children:"View Highlighter JavaDoc"})}),"\n",(0,s.jsx)(i.h2,{id:"utility-classes",children:"Utility Classes"}),"\n",(0,s.jsx)(i.p,{children:"JLine provides several utility classes:"}),"\n",(0,s.jsx)(i.h3,{id:"attributedstring",children:"AttributedString"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"AttributedString"})," represents styled text with ANSI colors and attributes:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"AttributedString"}),": Immutable styled string"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"AttributedStringBuilder"}),": Builder for creating attributed strings"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"AttributedStyle"}),": Style attributes (color, bold, etc.)"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://github.com/jline/jline3/blob/master/terminal/src/main/java/org/jline/utils/AttributedString.java",children:"View AttributedString JavaDoc"})}),"\n",(0,s.jsx)(i.h3,{id:"display",children:"Display"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"Display"})," manages the terminal display:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Display"}),": Terminal display manager"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"InfoCmp"}),": Terminal capability database"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Curses"}),": Terminal control sequences"]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.a,{href:"https://github.com/jline/jline3/blob/master/terminal/src/main/java/org/jline/utils/Display.java",children:"View Display JavaDoc"})}),"\n",(0,s.jsx)(i.h2,{id:"package-structure",children:"Package Structure"}),"\n",(0,s.jsx)(i.p,{children:"JLine is organized into several packages:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"org.jline.terminal"}),": Terminal handling"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"org.jline.reader"}),": Line reading and editing"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"org.jline.reader.impl"}),": Implementation classes"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"org.jline.reader.impl.completer"}),": Completion implementations"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"org.jline.reader.impl.history"}),": History implementations"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"org.jline.utils"}),": Utility classes"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"org.jline.builtins"}),": Built-in commands and widgets"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"api-stability",children:"API Stability"}),"\n",(0,s.jsx)(i.p,{children:"JLine follows semantic versioning:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Major version changes may include breaking API changes"}),"\n",(0,s.jsx)(i.li,{children:"Minor version changes add functionality in a backward-compatible manner"}),"\n",(0,s.jsx)(i.li,{children:"Patch version changes include backward-compatible bug fixes"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["Classes and methods marked with ",(0,s.jsx)(i.code,{children:"@Deprecated"})," may be removed in future major versions."]}),"\n",(0,s.jsx)(i.h2,{id:"thread-safety",children:"Thread Safety"}),"\n",(0,s.jsx)(i.p,{children:"Most JLine classes are not thread-safe. In particular:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Terminal"})," methods should be called from a single thread"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"LineReader"})," methods should be called from a single thread"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"History"})," can be accessed concurrently if properly synchronized"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(i.p,{children:"JLine uses exceptions to indicate errors:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"IOError"}),": I/O-related errors"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"UserInterruptException"}),": User pressed Ctrl+C"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"EndOfFileException"}),": End of input (Ctrl+D)"]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"SyntaxError"}),": Syntax error in input"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,s.jsx)(i.p,{children:"For detailed API documentation, refer to the JavaDoc for each class. The JLine GitHub repository also includes examples demonstrating various aspects of the API."})]})}function h(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);