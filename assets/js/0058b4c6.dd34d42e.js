"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Getting Started with JLine","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"link","label":"JLine Architecture","href":"/docs/architecture","docId":"architecture","unlisted":false},{"type":"link","label":"Terminal Handling","href":"/docs/terminal","docId":"terminal","unlisted":false},{"type":"link","label":"Line Reading","href":"/docs/line-reader","docId":"line-reader","unlisted":false},{"type":"link","label":"Tab Completion","href":"/docs/tab-completion","docId":"tab-completion","unlisted":false},{"type":"link","label":"History Management","href":"/docs/history","docId":"history","unlisted":false},{"type":"link","label":"Troubleshooting Guide","href":"/docs/troubleshooting","docId":"troubleshooting","unlisted":false},{"type":"category","label":"Advanced Features","items":[{"type":"link","label":"Syntax Highlighting","href":"/docs/advanced/syntax-highlighting","docId":"advanced/syntax-highlighting","unlisted":false},{"type":"link","label":"Interactive Features","href":"/docs/advanced/interactive-features","docId":"advanced/interactive-features","unlisted":false},{"type":"link","label":"Non-Blocking Input","href":"/docs/advanced/non-blocking-input","docId":"advanced/non-blocking-input","unlisted":false},{"type":"link","label":"Terminal Attributes and Modes","href":"/docs/advanced/terminal-attributes","docId":"advanced/terminal-attributes","unlisted":false},{"type":"link","label":"Attributed Strings","href":"/docs/advanced/attributed-strings","docId":"advanced/attributed-strings","unlisted":false},{"type":"link","label":"Key Bindings and Widgets","href":"/docs/advanced/key-bindings","docId":"advanced/key-bindings","unlisted":false},{"type":"link","label":"Custom Widgets","href":"/docs/advanced/widgets","docId":"advanced/widgets","unlisted":false},{"type":"link","label":"Mouse Support","href":"/docs/advanced/mouse-support","docId":"advanced/mouse-support","unlisted":false},{"type":"link","label":"Terminal Size Changes","href":"/docs/advanced/terminal-size","docId":"advanced/terminal-size","unlisted":false},{"type":"link","label":"Screen Clearing and Terminal Control","href":"/docs/advanced/screen-clearing","docId":"advanced/screen-clearing","unlisted":false},{"type":"link","label":"JLine Integration with Other Libraries","href":"/docs/advanced/library-integration","docId":"advanced/library-integration","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Modules","items":[{"type":"link","label":"JLine Modules Overview","href":"/docs/modules/overview","docId":"modules/overview","unlisted":false},{"type":"link","label":"JLine Builtins","href":"/docs/modules/builtins","docId":"modules/builtins","unlisted":false},{"type":"link","label":"JLine Style","href":"/docs/modules/style","docId":"modules/style","unlisted":false},{"type":"link","label":"JLine Console","href":"/docs/modules/console","docId":"modules/console","unlisted":false},{"type":"link","label":"JLine Console UI","href":"/docs/modules/console-ui","docId":"modules/console-ui","unlisted":false},{"type":"link","label":"Terminal Providers","href":"/docs/modules/terminal-providers","docId":"modules/terminal-providers","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"API Reference","items":[{"type":"link","label":"API Overview","href":"/docs/api/overview","docId":"api/overview","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"advanced/attributed-strings":{"id":"advanced/attributed-strings","title":"Attributed Strings","description":"JLine provides powerful support for styled text through its attributed string classes. These classes allow you to create text with colors, formatting, and other visual attributes for rich terminal output.","sidebar":"tutorialSidebar"},"advanced/interactive-features":{"id":"advanced/interactive-features","title":"Interactive Features","description":"JLine provides several advanced features that enhance the interactive experience of command-line applications. This guide covers some of the most powerful interactive features: PrintAboveWriter, LineReader#printAbove, Status, and Tailtips.","sidebar":"tutorialSidebar"},"advanced/key-bindings":{"id":"advanced/key-bindings","title":"Key Bindings and Widgets","description":"JLine provides a powerful system for customizing key bindings and creating widgets. This allows you to tailor the behavior of your command-line interface to meet your specific needs.","sidebar":"tutorialSidebar"},"advanced/library-integration":{"id":"advanced/library-integration","title":"JLine Integration with Other Libraries","description":"JLine works well with other Java libraries to create powerful command-line applications. This guide covers how to integrate JLine with popular command-line frameworks and libraries to enhance your terminal applications.","sidebar":"tutorialSidebar"},"advanced/mouse-support":{"id":"advanced/mouse-support","title":"Mouse Support","description":"JLine provides support for mouse events in terminal applications, allowing you to create more interactive and user-friendly command-line interfaces. This feature is particularly useful for applications that require point-and-click interactions, such as text editors, file browsers, or interactive menus.","sidebar":"tutorialSidebar"},"advanced/non-blocking-input":{"id":"advanced/non-blocking-input","title":"Non-Blocking Input","description":"JLine provides support for non-blocking input, allowing you to read user input without blocking the execution of your application. This is particularly useful for applications that need to perform background tasks while still being responsive to user input.","sidebar":"tutorialSidebar"},"advanced/screen-clearing":{"id":"advanced/screen-clearing","title":"Screen Clearing and Terminal Control","description":"Controlling the terminal display is an important aspect of creating interactive command-line applications. JLine provides several methods for clearing the screen, positioning the cursor, and controlling other terminal attributes. This guide covers the proper techniques for screen clearing and terminal control in JLine applications.","sidebar":"tutorialSidebar"},"advanced/syntax-highlighting":{"id":"advanced/syntax-highlighting","title":"Syntax Highlighting","description":"JLine provides powerful syntax highlighting capabilities that can enhance the user experience of your command-line application.","sidebar":"tutorialSidebar"},"advanced/terminal-attributes":{"id":"advanced/terminal-attributes","title":"Terminal Attributes and Modes","description":"JLine provides fine-grained control over terminal attributes and modes, allowing you to customize how the terminal behaves. Understanding these attributes is essential for creating sophisticated terminal applications.","sidebar":"tutorialSidebar"},"advanced/terminal-size":{"id":"advanced/terminal-size","title":"Terminal Size Changes","description":"Terminal applications need to adapt to changes in terminal size to provide a good user experience. JLine provides mechanisms to detect and handle terminal size changes, allowing your application to respond appropriately when the user resizes their terminal window.","sidebar":"tutorialSidebar"},"advanced/unicode-support":{"id":"advanced/unicode-support","title":"Unicode and Wide Character Support","description":"JLine provides robust support for Unicode and wide characters, allowing you to create applications that work with international text and special symbols. This guide covers how to handle Unicode characters, wide characters (like CJK characters), and emoji in your JLine applications."},"advanced/widgets":{"id":"advanced/widgets","title":"Custom Widgets","description":"JLine\'s widget system allows you to extend the functionality of the line reader with custom actions and behaviors. Widgets are reusable components that can be bound to key combinations or called programmatically, making them a powerful tool for customizing the command-line experience.","sidebar":"tutorialSidebar"},"api/overview":{"id":"api/overview","title":"API Overview","description":"JLine provides a comprehensive API for building interactive command-line applications. This section provides an overview of the key interfaces and classes in JLine.","sidebar":"tutorialSidebar"},"architecture":{"id":"architecture","title":"JLine Architecture","description":"This page provides a high-level overview of JLine\'s architecture and how its components interact with each other.","sidebar":"tutorialSidebar"},"history":{"id":"history","title":"History Management","description":"JLine provides sophisticated history management capabilities, allowing users to recall, search, and reuse previous commands.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Getting Started with JLine","description":"JLine is a Java library that brings advanced console input handling capabilities to your applications. It provides functionality similar to BSD editline and GNU readline, while offering additional features that rival the sophisticated ZSH line editor.","sidebar":"tutorialSidebar"},"line-reader":{"id":"line-reader","title":"Line Reading","description":"The LineReader is one of JLine\'s core components, providing sophisticated line editing capabilities for your command-line applications.","sidebar":"tutorialSidebar"},"modules/builtins":{"id":"modules/builtins","title":"JLine Builtins","description":"The jline-builtins module provides a set of ready-to-use commands and utilities that you can incorporate into your command-line applications. These built-in components save you time and effort when implementing common command-line functionality.","sidebar":"tutorialSidebar"},"modules/console":{"id":"modules/console","title":"JLine Console","description":"The jline-console module provides a framework for building interactive console applications. It includes infrastructure for command processing, argument parsing, and help generation, making it easier to create sophisticated command-line interfaces.","sidebar":"tutorialSidebar"},"modules/console-ui":{"id":"modules/console-ui","title":"JLine Console UI","description":"The jline-console-ui module provides UI components for console applications, such as progress bars, spinners, tables, trees, forms, and wizards. These components help you create more interactive and user-friendly command-line interfaces.","sidebar":"tutorialSidebar"},"modules/overview":{"id":"modules/overview","title":"JLine Modules Overview","description":"JLine is organized into several modules, each providing specific functionality. This modular architecture allows you to include only the components you need in your application, reducing dependencies and improving maintainability.","sidebar":"tutorialSidebar"},"modules/style":{"id":"modules/style","title":"JLine Style","description":"The jline-style module provides a powerful styling API for terminal output. It allows you to define and apply styles to text, create color schemes, and maintain consistent styling across your application.","sidebar":"tutorialSidebar"},"modules/terminal-providers":{"id":"modules/terminal-providers","title":"Terminal Providers","description":"JLine uses a provider architecture to support different terminal implementations across various platforms. This modular approach allows JLine to work in different environments and adapt to the capabilities of the underlying system.","sidebar":"tutorialSidebar"},"tab-completion":{"id":"tab-completion","title":"Tab Completion","description":"Tab completion is one of JLine\'s most powerful features, allowing users to efficiently navigate and use your command-line application.","sidebar":"tutorialSidebar"},"terminal":{"id":"terminal","title":"Terminal Handling","description":"JLine provides a powerful abstraction for terminal handling through its Terminal interface and implementations. This allows your application to interact with different terminal types in a consistent way.","sidebar":"tutorialSidebar"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting Guide","description":"JLine is designed to work across different platforms and terminal environments, but you may encounter issues due to platform differences, terminal capabilities, or configuration problems. This guide addresses common issues and provides solutions to help you troubleshoot JLine-related problems.","sidebar":"tutorialSidebar"}}}}')}}]);