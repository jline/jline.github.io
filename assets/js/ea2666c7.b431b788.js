"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[2291],{7698:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"modules/builtins","title":"JLine Builtins","description":"The jline-builtins module provides a set of ready-to-use commands and utilities that you can incorporate into your command-line applications. These built-in components save you time and effort when implementing common command-line functionality.","source":"@site/docs/modules/builtins.md","sourceDirName":"modules","slug":"/modules/builtins","permalink":"/docs/modules/builtins","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/modules/builtins.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"JLine Modules Overview","permalink":"/docs/modules/overview"},"next":{"title":"JLine Style","permalink":"/docs/modules/style"}}');var r=i(4848),l=i(8453);const a={sidebar_position:2},s="JLine Builtins",o={},d=[{value:"Maven Dependency",id:"maven-dependency",level:2},{value:"Built-in Commands",id:"built-in-commands",level:2},{value:"File Operations",id:"file-operations",level:3},{value:"Table Formatting",id:"table-formatting",level:3},{value:"Widgets",id:"widgets",level:2},{value:"SystemRegistryImpl",id:"systemregistryimpl",level:2},{value:"Nano Text Editor",id:"nano-text-editor",level:2},{value:"Best Practices",id:"best-practices",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"jline-builtins",children:"JLine Builtins"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"jline-builtins"})," module provides a set of ready-to-use commands and utilities that you can incorporate into your command-line applications. These built-in components save you time and effort when implementing common command-line functionality."]}),"\n",(0,r.jsx)(n.h2,{id:"maven-dependency",children:"Maven Dependency"}),"\n",(0,r.jsx)(n.p,{children:"To use the builtins module, add the following dependency to your project:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.jline</groupId>\n    <artifactId>jline-builtins</artifactId>\n    <version>3.25.0</version>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.h2,{id:"built-in-commands",children:"Built-in Commands"}),"\n",(0,r.jsx)(n.p,{children:"The builtins module includes several ready-to-use commands that you can incorporate into your application:"}),"\n",(0,r.jsx)(n.h3,{id:"file-operations",children:"File Operations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="FileOperationsExample.java" showLineNumbers',children:'import org.jline.builtins.Commands;\nimport org.jline.builtins.Completers.FilesCompleter;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.ArgumentCompleter;\nimport org.jline.reader.impl.completer.StringsCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class FileOperationsExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        PrintWriter writer = terminal.writer();\n        \n        // Create a line reader with file operations completers\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(new ArgumentCompleter(\n                        new StringsCompleter("ls", "cat", "less"),\n                        new FilesCompleter(Paths.get("."))))\n                .build();\n        \n        // Main command loop\n        while (true) {\n            String line = reader.readLine("builtin> ");\n            String[] arguments = line.split("\\\\s+");\n            \n            try {\n                if (arguments.length > 0) {\n                    switch (arguments[0]) {\n                        // highlight-start\n                        case "ls":\n                            // List files in a directory\n                            Path path = arguments.length > 1 ? Paths.get(arguments[1]) : Paths.get(".");\n                            Commands.ls(terminal, writer, path, false, false, false, false);\n                            break;\n                        // highlight-end\n                            \n                        case "cat":\n                            // Display file contents\n                            if (arguments.length > 1) {\n                                Commands.cat(terminal, writer, Paths.get(arguments[1]));\n                            } else {\n                                writer.println("Usage: cat <file>");\n                            }\n                            break;\n                            \n                        case "less":\n                            // Display file contents with paging\n                            if (arguments.length > 1) {\n                                Commands.less(terminal, Paths.get(arguments[1]));\n                            } else {\n                                writer.println("Usage: less <file>");\n                            }\n                            break;\n                            \n                        case "exit":\n                            return;\n                            \n                        default:\n                            writer.println("Unknown command: " + arguments[0]);\n                    }\n                }\n            } catch (Exception e) {\n                writer.println("Error: " + e.getMessage());\n            }\n            writer.flush();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"table-formatting",children:"Table Formatting"}),"\n",(0,r.jsx)(n.p,{children:"The builtins module includes utilities for formatting tabular data:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="TableFormattingExample.java"',children:'import org.jline.builtins.Styles;\nimport org.jline.builtins.Styles.AttributedStringBuilder;\nimport org.jline.builtins.Styles.AttributedStyle;\nimport org.jline.builtins.Tables;\nimport org.jline.builtins.Tables.Column;\nimport org.jline.builtins.Tables.ColumnType;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class TableFormattingExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        PrintWriter writer = terminal.writer();\n        \n        // highlight-start\n        // Define table columns\n        List<Column> columns = Arrays.asList(\n                new Column("ID", ColumnType.Number),\n                new Column("Name", ColumnType.String),\n                new Column("Role", ColumnType.String),\n                new Column("Salary", ColumnType.Number)\n        );\n        // highlight-end\n        \n        // Create table data\n        List<List<String>> data = new ArrayList<>();\n        data.add(Arrays.asList("1", "John Doe", "Developer", "75000"));\n        data.add(Arrays.asList("2", "Jane Smith", "Manager", "85000"));\n        data.add(Arrays.asList("3", "Bob Johnson", "Designer", "65000"));\n        \n        // Print the table\n        Tables.TableBuilder tableBuilder = new Tables.TableBuilder(columns);\n        tableBuilder.addAll(data);\n        \n        // Format and display the table\n        Tables.Table table = tableBuilder.build();\n        String result = table.toStringWithColumns(\n                terminal.getWidth(), \n                true, // display borders\n                true  // display header\n        );\n        \n        writer.println(result);\n        writer.flush();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"widgets",children:"Widgets"}),"\n",(0,r.jsx)(n.p,{children:"The builtins module provides several widgets that can be used with the LineReader:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="WidgetsExample.java"',children:'import org.jline.builtins.Widgets;\nimport org.jline.builtins.Widgets.TailTipWidgets;\nimport org.jline.builtins.Widgets.TailTipWidgets.TipType;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.DefaultParser;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class WidgetsExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        DefaultParser parser = new DefaultParser();\n        \n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .parser(parser)\n                .build();\n        \n        // highlight-start\n        // Create command descriptions for TailTip widget\n        Map<String, List<String>> commandDescriptions = new HashMap<>();\n        commandDescriptions.put("help", Arrays.asList("Display help information"));\n        commandDescriptions.put("exit", Arrays.asList("Exit the application"));\n        commandDescriptions.put("ls", Arrays.asList("[path]", "List directory contents"));\n        commandDescriptions.put("cat", Arrays.asList("<file>", "Display file contents"));\n        \n        // Create and install the TailTip widget\n        TailTipWidgets widgets = new TailTipWidgets(reader, commandDescriptions, 5, TipType.COMPLETER);\n        widgets.enable();\n        // highlight-end\n        \n        // Main command loop\n        while (true) {\n            String line = reader.readLine("widgets> ");\n            if ("exit".equals(line)) {\n                break;\n            }\n            terminal.writer().println("You entered: " + line);\n            terminal.writer().flush();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"systemregistryimpl",children:"SystemRegistryImpl"}),"\n",(0,r.jsxs)(n.p,{children:["The builtins module includes a ",(0,r.jsx)(n.code,{children:"SystemRegistryImpl"})," class that provides a registry for commands:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="SystemRegistryExample.java" showLineNumbers',children:'import org.jline.builtins.Builtins;\nimport org.jline.builtins.Completers.SystemCompleter;\nimport org.jline.builtins.Options.HelpException;\nimport org.jline.builtins.SystemRegistry;\nimport org.jline.builtins.SystemRegistryImpl;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.DefaultParser;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.nio.file.Paths;\nimport java.util.function.Supplier;\n\npublic class SystemRegistryExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        DefaultParser parser = new DefaultParser();\n        \n        // highlight-start\n        // Create the registry\n        SystemRegistry registry = new SystemRegistryImpl(parser, terminal, () -> Paths.get("."), null);\n        \n        // Create builtins\n        Builtins builtins = new Builtins(registry::commandRegistry, () -> Paths.get("."), null, null);\n        // highlight-end\n        \n        // Register commands\n        registry.register("help", builtins::help);\n        registry.register("ls", builtins::ls);\n        registry.register("cat", builtins::cat);\n        registry.register("less", builtins::less);\n        \n        // Set up completers\n        SystemCompleter completer = builtins.compileCompleters();\n        \n        // Create line reader\n        LineReader reader = LineReaderBuilder.builder()\n                .terminal(terminal)\n                .completer(completer)\n                .parser(parser)\n                .build();\n        \n        registry.setLineReader(reader);\n        \n        // Main command loop\n        PrintWriter writer = terminal.writer();\n        while (true) {\n            try {\n                String line = reader.readLine("registry> ");\n                if (line.trim().equalsIgnoreCase("exit")) {\n                    break;\n                }\n                \n                // Execute the command\n                registry.execute(line);\n            } catch (HelpException e) {\n                writer.println(e.getMessage());\n            } catch (Exception e) {\n                writer.println("Error: " + e.getMessage());\n                e.printStackTrace(writer);\n            }\n            writer.flush();\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"nano-text-editor",children:"Nano Text Editor"}),"\n",(0,r.jsx)(n.p,{children:"The builtins module includes a Nano-like text editor:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="NanoEditorExample.java"',children:'import org.jline.builtins.Nano;\nimport org.jline.builtins.Nano.NanoConfig;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\nimport java.io.IOException;\nimport java.nio.file.Paths;\n\npublic class NanoEditorExample {\n    public static void main(String[] args) throws IOException {\n        Terminal terminal = TerminalBuilder.builder().build();\n        \n        // highlight-start\n        // Configure Nano\n        NanoConfig config = new NanoConfig.Builder()\n                .tabSize(4)\n                .tabToSpaces(true)\n                .build();\n        \n        // Launch Nano editor\n        Nano nano = new Nano(terminal, config);\n        nano.open(Paths.get("example.txt"));\n        // highlight-end\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.p,{children:"When using the JLine builtins module, consider these best practices:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use SystemRegistry for Command Management"}),": The ",(0,r.jsx)(n.code,{children:"SystemRegistryImpl"})," provides a clean way to register and manage commands."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Leverage Built-in Commands"}),": Use the provided commands like ",(0,r.jsx)(n.code,{children:"ls"}),", ",(0,r.jsx)(n.code,{children:"cat"}),", and ",(0,r.jsx)(n.code,{children:"less"})," instead of reimplementing them."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Combine with Completers"}),": Pair built-in commands with appropriate completers for a better user experience."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use TailTipWidgets for Contextual Help"}),": The TailTip widgets provide inline help that improves usability."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Customize Table Formatting"}),": Adjust table formatting to match your application's style and the terminal's capabilities."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Handle Exceptions Properly"}),": Built-in commands may throw exceptions that should be caught and handled appropriately."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Consider Terminal Capabilities"}),": Some built-in features may depend on terminal capabilities, so check for support before using them."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(6540);const r={},l=t.createContext(r);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);