"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[5127],{4338:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>g,contentTitle:()=>a,default:()=>o,frontMatter:()=>h,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"advanced/syntax-highlighting","title":"Syntax Highlighting","description":"JLine provides powerful syntax highlighting capabilities that can enhance the user experience of your command-line application.","source":"@site/docs/advanced/syntax-highlighting.md","sourceDirName":"advanced","slug":"/advanced/syntax-highlighting","permalink":"/docs/advanced/syntax-highlighting","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/advanced/syntax-highlighting.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Troubleshooting Guide","permalink":"/docs/troubleshooting"},"next":{"title":"Interactive Features","permalink":"/docs/advanced/interactive-features"}}');var r=i(4848),l=i(8453);const h={sidebar_position:1},a="Syntax Highlighting",g={},d=[{value:"Basic Highlighting",id:"basic-highlighting",level:2},{value:"Syntax-Aware Highlighting",id:"syntax-aware-highlighting",level:2},{value:"Highlighting with Regular Expressions",id:"highlighting-with-regular-expressions",level:2},{value:"Error Highlighting",id:"error-highlighting",level:2},{value:"Advanced Highlighting Techniques",id:"advanced-highlighting-techniques",level:2},{value:"Incremental Highlighting",id:"incremental-highlighting",level:3},{value:"Context-Aware Highlighting",id:"context-aware-highlighting",level:3},{value:"Best Practices",id:"best-practices",level:2}];function s(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"syntax-highlighting",children:"Syntax Highlighting"})}),"\n",(0,r.jsx)(t.p,{children:"JLine provides powerful syntax highlighting capabilities that can enhance the user experience of your command-line application."}),"\n",(0,r.jsx)(t.h2,{id:"basic-highlighting",children:"Basic Highlighting"}),"\n",(0,r.jsxs)(t.p,{children:["To add syntax highlighting to your ",(0,r.jsx)(t.code,{children:"LineReader"}),", you need to implement the ",(0,r.jsx)(t.code,{children:"Highlighter"})," interface:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'import org.jline.reader.Highlighter;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\nimport org.jline.utils.AttributedString;\nimport org.jline.utils.AttributedStringBuilder;\nimport org.jline.utils.AttributedStyle;\n\n// Create a simple highlighter\nHighlighter highlighter = (reader, buffer, candidates) -> {\n    // Create a highlighted version of the buffer\n    AttributedString highlighted = new AttributedStringBuilder()\n            .append(buffer.toString(), AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE))\n            .toAttributedString();\n    \n    // Add the highlighted buffer to the candidates list\n    candidates.add(highlighted);\n    \n    // Return the highlighted buffer\n    return highlighted;\n};\n\n// Create a line reader with the highlighter\nTerminal terminal = TerminalBuilder.builder().build();\nLineReader reader = LineReaderBuilder.builder()\n        .terminal(terminal)\n        .highlighter(highlighter)\n        .build();\n\n// Now when the user types, the input will be highlighted in blue\nString line = reader.readLine("prompt> ");\n'})}),"\n",(0,r.jsx)(t.h2,{id:"syntax-aware-highlighting",children:"Syntax-Aware Highlighting"}),"\n",(0,r.jsx)(t.p,{children:"For more sophisticated highlighting, you can create a highlighter that understands your command syntax:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'public class CommandHighlighter implements Highlighter {\n    private static final AttributedStyle COMMAND_STYLE = AttributedStyle.BOLD.foreground(AttributedStyle.RED);\n    private static final AttributedStyle OPTION_STYLE = AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE);\n    private static final AttributedStyle ARG_STYLE = AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN);\n    \n    private final Set<String> commands = Set.of("help", "list", "add", "remove", "exit");\n    private final Set<String> options = Set.of("-v", "--verbose", "-h", "--help", "-f", "--force");\n    \n    @Override\n    public AttributedString highlight(LineReader reader, String buffer) {\n        AttributedStringBuilder builder = new AttributedStringBuilder();\n        \n        // Simple parsing for demonstration\n        String[] words = buffer.split("\\\\s+");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            \n            if (i > 0) {\n                builder.append(" ");\n            }\n            \n            if (i == 0 && commands.contains(word)) {\n                // First word is a command\n                builder.append(word, COMMAND_STYLE);\n            } else if (options.contains(word)) {\n                // Word is an option\n                builder.append(word, OPTION_STYLE);\n            } else {\n                // Word is an argument\n                builder.append(word, ARG_STYLE);\n            }\n        }\n        \n        return builder.toAttributedString();\n    }\n    \n    @Override\n    public void setErrorPattern(Pattern pattern) {\n        // Not used in this example\n    }\n    \n    @Override\n    public void setErrorIndex(int errorIndex) {\n        // Not used in this example\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"highlighting-with-regular-expressions",children:"Highlighting with Regular Expressions"}),"\n",(0,r.jsx)(t.p,{children:"You can use regular expressions for more flexible highlighting:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'public class RegexHighlighter implements Highlighter {\n    private final List<Pair<Pattern, AttributedStyle>> patterns = new ArrayList<>();\n    \n    public RegexHighlighter() {\n        // Add patterns with corresponding styles\n        patterns.add(new Pair<>(Pattern.compile("\\\\b(help|exit|list|add|remove)\\\\b"), \n                               AttributedStyle.BOLD.foreground(AttributedStyle.RED)));\n        patterns.add(new Pair<>(Pattern.compile("\\\\b(\\\\d+)\\\\b"), \n                               AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN)));\n        patterns.add(new Pair<>(Pattern.compile("\\\\b(true|false)\\\\b"), \n                               AttributedStyle.DEFAULT.foreground(AttributedStyle.YELLOW)));\n        patterns.add(new Pair<>(Pattern.compile("\\"([^\\"]*)\\""), \n                               AttributedStyle.DEFAULT.foreground(AttributedStyle.MAGENTA)));\n    }\n    \n    @Override\n    public AttributedString highlight(LineReader reader, String buffer) {\n        AttributedString result = new AttributedString(buffer);\n        \n        for (Pair<Pattern, AttributedStyle> pattern : patterns) {\n            Matcher matcher = pattern.getLeft().matcher(buffer);\n            while (matcher.find()) {\n                result = result.styleMatches(matcher, pattern.getRight());\n            }\n        }\n        \n        return result;\n    }\n    \n    @Override\n    public void setErrorPattern(Pattern pattern) {\n        // Not used in this example\n    }\n    \n    @Override\n    public void setErrorIndex(int errorIndex) {\n        // Not used in this example\n    }\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"error-highlighting",children:"Error Highlighting"}),"\n",(0,r.jsx)(t.p,{children:"JLine can highlight syntax errors:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:"public class ErrorHighlighter implements Highlighter {\n    private Pattern errorPattern;\n    private int errorIndex = -1;\n    \n    @Override\n    public AttributedString highlight(LineReader reader, String buffer) {\n        AttributedStringBuilder builder = new AttributedStringBuilder();\n        builder.append(buffer);\n        \n        // Highlight error if present\n        if (errorIndex >= 0 && errorIndex < buffer.length()) {\n            builder.styleAt(errorIndex, AttributedStyle.DEFAULT.foreground(AttributedStyle.RED));\n        }\n        \n        // Highlight pattern matches\n        if (errorPattern != null) {\n            Matcher matcher = errorPattern.matcher(buffer);\n            while (matcher.find()) {\n                builder.styleMatches(matcher, AttributedStyle.DEFAULT.foreground(AttributedStyle.RED));\n            }\n        }\n        \n        return builder.toAttributedString();\n    }\n    \n    @Override\n    public void setErrorPattern(Pattern pattern) {\n        this.errorPattern = pattern;\n    }\n    \n    @Override\n    public void setErrorIndex(int errorIndex) {\n        this.errorIndex = errorIndex;\n    }\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"advanced-highlighting-techniques",children:"Advanced Highlighting Techniques"}),"\n",(0,r.jsx)(t.h3,{id:"incremental-highlighting",children:"Incremental Highlighting"}),"\n",(0,r.jsx)(t.p,{children:"For better performance with long input:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'public class IncrementalHighlighter implements Highlighter {\n    private AttributedString lastHighlighted;\n    private String lastBuffer = "";\n    \n    @Override\n    public AttributedString highlight(LineReader reader, String buffer) {\n        // If the buffer hasn\'t changed, return the cached result\n        if (buffer.equals(lastBuffer) && lastHighlighted != null) {\n            return lastHighlighted;\n        }\n        \n        // Perform highlighting\n        AttributedStringBuilder builder = new AttributedStringBuilder();\n        // ... highlighting logic ...\n        \n        // Cache the result\n        lastBuffer = buffer;\n        lastHighlighted = builder.toAttributedString();\n        \n        return lastHighlighted;\n    }\n    \n    // Other methods...\n}\n'})}),"\n",(0,r.jsx)(t.h3,{id:"context-aware-highlighting",children:"Context-Aware Highlighting"}),"\n",(0,r.jsx)(t.p,{children:"Create highlighters that are aware of the current context:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'public class ContextAwareHighlighter implements Highlighter {\n    private final Map<String, Highlighter> contextHighlighters = new HashMap<>();\n    \n    public ContextAwareHighlighter() {\n        contextHighlighters.put("sql", new SqlHighlighter());\n        contextHighlighters.put("java", new JavaHighlighter());\n        contextHighlighters.put("default", new DefaultHighlighter());\n    }\n    \n    @Override\n    public AttributedString highlight(LineReader reader, String buffer) {\n        // Get current context from reader variables\n        String context = (String) reader.getVariable("SYNTAX_CONTEXT");\n        if (context == null) {\n            context = "default";\n        }\n        \n        // Use the appropriate highlighter for this context\n        Highlighter contextHighlighter = contextHighlighters.getOrDefault(context, \n                                                                        contextHighlighters.get("default"));\n        return contextHighlighter.highlight(reader, buffer);\n    }\n    \n    // Other methods...\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Keep highlighting logic simple and efficient"}),"\n",(0,r.jsx)(t.li,{children:"Use caching for complex highlighting patterns"}),"\n",(0,r.jsx)(t.li,{children:"Consider the context when highlighting"}),"\n",(0,r.jsx)(t.li,{children:"Use consistent colors for similar elements"}),"\n",(0,r.jsx)(t.li,{children:"Test highlighting with various input scenarios"}),"\n",(0,r.jsx)(t.li,{children:"Provide a way to disable highlighting for users who prefer plain text"}),"\n",(0,r.jsx)(t.li,{children:"Consider accessibility when choosing colors"}),"\n"]})]})}function o(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>h,x:()=>a});var n=i(6540);const r={},l=n.createContext(r);function h(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:h(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);