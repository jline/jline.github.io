"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[9441],{8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>d});var r=i(6540);const t={},a=r.createContext(t);function l(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(a.Provider,{value:n},e.children)}},9472:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"line-reader","title":"Line Reading","description":"The LineReader is one of JLine\'s core components, providing sophisticated line editing capabilities for your command-line applications.","source":"@site/docs/line-reader.md","sourceDirName":".","slug":"/line-reader","permalink":"/docs/line-reader","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/line-reader.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Terminal Handling","permalink":"/docs/terminal"},"next":{"title":"Tab Completion","permalink":"/docs/tab-completion"}}');var t=i(4848),a=i(8453);const l={sidebar_position:3},d="Line Reading",s={},o=[{value:"Creating a LineReader",id:"creating-a-linereader",level:2},{value:"Reading Input",id:"reading-input",level:2},{value:"Line Reader Options",id:"line-reader-options",level:2},{value:"Customizing Prompts",id:"customizing-prompts",level:2},{value:"Handling Special Keys",id:"handling-special-keys",level:2},{value:"Line Editing Features",id:"line-editing-features",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Multi-line Input",id:"multi-line-input",level:3},{value:"Custom Validators",id:"custom-validators",level:3},{value:"Custom Highlighters",id:"custom-highlighters",level:3},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"line-reading",children:"Line Reading"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"LineReader"})," is one of JLine's core components, providing sophisticated line editing capabilities for your command-line applications."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-linereader",children:"Creating a LineReader"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"LineReaderBuilder"})," to create a ",(0,t.jsx)(n.code,{children:"LineReader"})," instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\n// Create a terminal\nTerminal terminal = TerminalBuilder.builder().build();\n\n// Create a basic line reader\nLineReader reader = LineReaderBuilder.builder()\n        .terminal(terminal)\n        .build();\n\n// Create a line reader with custom configuration\nLineReader customReader = LineReaderBuilder.builder()\n        .terminal(terminal)\n        .appName("MyApp")\n        .variable(LineReader.HISTORY_FILE, Paths.get("history.txt"))\n        .option(LineReader.Option.AUTO_FRESH_LINE, true)\n        .option(LineReader.Option.HISTORY_BEEP, false)\n        .build();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"reading-input",children:"Reading Input"}),"\n",(0,t.jsxs)(n.p,{children:["The basic method for reading input is ",(0,t.jsx)(n.code,{children:"readLine()"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Read a line with a prompt\nString line = reader.readLine("prompt> ");\n\n// Read a line with a right prompt (displayed at the right edge)\nString line = reader.readLine("prompt> ", "right prompt", (Character) null);\n\n// Read a masked line (for passwords)\nString password = reader.readLine(\'*\');\n'})}),"\n",(0,t.jsx)(n.h2,{id:"line-reader-options",children:"Line Reader Options"}),"\n",(0,t.jsxs)(n.p,{children:["JLine's ",(0,t.jsx)(n.code,{children:"LineReader"})," supports numerous options to customize behavior:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Configure options during creation\nLineReader reader = LineReaderBuilder.builder()\n        .terminal(terminal)\n        .option(LineReader.Option.CASE_INSENSITIVE, true)\n        .option(LineReader.Option.AUTO_REMOVE_SLASH, true)\n        .build();\n\n// Or set options after creation\nreader.setOpt(LineReader.Option.HISTORY_IGNORE_DUPS);\nreader.unsetOpt(LineReader.Option.HISTORY_BEEP);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Common options include:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CASE_INSENSITIVE"}),": Case-insensitive completion"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"AUTO_FRESH_LINE"}),": Automatically add a newline if the cursor isn't at the start of a line"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HISTORY_BEEP"}),": Beep when navigating past the end of history"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HISTORY_IGNORE_DUPS"}),": Don't add duplicate entries to history"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"HISTORY_IGNORE_SPACE"}),": Don't add entries starting with space to history"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"MENU_COMPLETE"}),": Cycle through completions on tab"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"customizing-prompts",children:"Customizing Prompts"}),"\n",(0,t.jsx)(n.p,{children:"JLine supports rich prompt customization:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Simple text prompt\nString line = reader.readLine("simple> ");\n\n// Colored prompt (ANSI escape sequences)\nString line = reader.readLine("\\u001B[1;32msimple>\\u001B[0m ");\n\n// Dynamic prompt\nString line = reader.readLine(() -> {\n    LocalTime now = LocalTime.now();\n    return now.format(DateTimeFormatter.ofPattern("HH:mm:ss")) + "> ";\n});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"handling-special-keys",children:"Handling Special Keys"}),"\n",(0,t.jsxs)(n.p,{children:["You can customize how the ",(0,t.jsx)(n.code,{children:"LineReader"})," responds to key presses:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Create a custom key map\nKeyMap<Binding> keyMap = reader.getKeyMaps().get(LineReader.MAIN);\n\n// Bind a key to a widget\nkeyMap.bind(new Reference(\"clear-screen\"), KeyMap.ctrl('L'));\n\n// Bind a key to a custom action\nkeyMap.bind(\n    () -> {\n        System.out.println(\"Custom action executed!\");\n        return true;\n    },\n    KeyMap.alt('X')\n);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"line-editing-features",children:"Line Editing Features"}),"\n",(0,t.jsxs)(n.p,{children:["JLine's ",(0,t.jsx)(n.code,{children:"LineReader"})," provides numerous line editing features:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Navigation"}),": Move by character, word, or line"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Editing"}),": Insert, delete, cut, paste, transpose"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"History"}),": Navigate, search, and filter command history"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Completion"}),": Tab completion with customizable behavior"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Search"}),": Incremental search through current line or history"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,t.jsx)(n.h3,{id:"multi-line-input",children:"Multi-line Input"}),"\n",(0,t.jsx)(n.p,{children:"JLine supports multi-line input with proper continuation:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Configure multi-line support\nLineReader reader = LineReaderBuilder.builder()\n        .terminal(terminal)\n        .parser(new DefaultParser())\n        .variable(LineReader.SECONDARY_PROMPT_PATTERN, "%M> ")\n        .build();\n\n// Read multi-line input (e.g., with unclosed quotes or brackets)\nString multiLine = reader.readLine("multi> ");\n'})}),"\n",(0,t.jsx)(n.h3,{id:"custom-validators",children:"Custom Validators"}),"\n",(0,t.jsx)(n.p,{children:"You can validate input before accepting it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Create a validator\nValidator validator = line -> {\n    if (line.isEmpty()) {\n        throw new ValidationException("Input cannot be empty");\n    }\n};\n\n// Use the validator\nLineReader reader = LineReaderBuilder.builder()\n        .terminal(terminal)\n        .validator(validator)\n        .build();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"custom-highlighters",children:"Custom Highlighters"}),"\n",(0,t.jsx)(n.p,{children:"JLine can highlight input as it's typed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Create a highlighter\nHighlighter highlighter = (reader, buffer, list) -> {\n    AttributedString highlighted = new AttributedStringBuilder()\n            .append(buffer.toString(), AttributedStyle.BOLD)\n            .toAttributedString();\n    list.add(highlighted);\n    return highlighted;\n};\n\n// Use the highlighter\nLineReader reader = LineReaderBuilder.builder()\n        .terminal(terminal)\n        .highlighter(highlighter)\n        .build();\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Always close the terminal when your application exits"}),"\n",(0,t.jsx)(n.li,{children:"Use try-with-resources for automatic resource management"}),"\n",(0,t.jsx)(n.li,{children:"Configure history appropriately for your application"}),"\n",(0,t.jsx)(n.li,{children:"Consider using a parser for complex command syntax"}),"\n",(0,t.jsx)(n.li,{children:"Provide helpful completion options for better user experience"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);