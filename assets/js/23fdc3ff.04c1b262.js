"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[5766],{7388:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"tab-completion","title":"Tab Completion","description":"Tab completion is one of JLine\'s most powerful features, allowing users to efficiently navigate and use your command-line application.","source":"@site/docs/tab-completion.md","sourceDirName":".","slug":"/tab-completion","permalink":"/docs/tab-completion","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/tab-completion.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Line Reading","permalink":"/docs/line-reader"},"next":{"title":"History Management","permalink":"/docs/history"}}');var l=t(4848),r=t(8453);const o={sidebar_position:4},a="Tab Completion",s={},d=[{value:"Basic Completion",id:"basic-completion",level:2},{value:"Completer Types",id:"completer-types",level:2},{value:"StringsCompleter",id:"stringscompleter",level:3},{value:"FileNameCompleter",id:"filenamecompleter",level:3},{value:"ArgumentCompleter",id:"argumentcompleter",level:3},{value:"TreeCompleter",id:"treecompleter",level:3},{value:"AggregateCompleter",id:"aggregatecompleter",level:3},{value:"Custom Completers",id:"custom-completers",level:2},{value:"Completion Behavior",id:"completion-behavior",level:2},{value:"Advanced Completion Features",id:"advanced-completion-features",level:2},{value:"Completion with Descriptions",id:"completion-with-descriptions",level:3},{value:"Context-Aware Completion",id:"context-aware-completion",level:3},{value:"Completion with Colors",id:"completion-with-colors",level:3},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"tab-completion",children:"Tab Completion"})}),"\n",(0,l.jsx)(n.p,{children:"Tab completion is one of JLine's most powerful features, allowing users to efficiently navigate and use your command-line application."}),"\n",(0,l.jsx)(n.h2,{id:"basic-completion",children:"Basic Completion"}),"\n",(0,l.jsxs)(n.p,{children:["To add completion to your ",(0,l.jsx)(n.code,{children:"LineReader"}),", you need to implement the ",(0,l.jsx)(n.code,{children:"Completer"})," interface:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'import org.jline.reader.Completer;\nimport org.jline.reader.LineReader;\nimport org.jline.reader.LineReaderBuilder;\nimport org.jline.reader.impl.completer.StringsCompleter;\nimport org.jline.terminal.Terminal;\nimport org.jline.terminal.TerminalBuilder;\n\n// Create a simple completer with fixed options\nCompleter completer = new StringsCompleter("help", "exit", "list", "version");\n\n// Create a line reader with the completer\nTerminal terminal = TerminalBuilder.builder().build();\nLineReader reader = LineReaderBuilder.builder()\n        .terminal(terminal)\n        .completer(completer)\n        .build();\n\n// Now when the user presses Tab, they\'ll see the available commands\nString line = reader.readLine("prompt> ");\n'})}),"\n",(0,l.jsx)(n.h2,{id:"completer-types",children:"Completer Types"}),"\n",(0,l.jsx)(n.p,{children:"JLine provides several built-in completers:"}),"\n",(0,l.jsx)(n.h3,{id:"stringscompleter",children:"StringsCompleter"}),"\n",(0,l.jsx)(n.p,{children:"Completes from a fixed set of strings:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// Complete with fixed strings\nCompleter stringsCompleter = new StringsCompleter("add", "remove", "list", "help");\n\n// Complete with dynamic strings\nSupplier<Collection<String>> dynamicStrings = () -> getCurrentCommands();\nCompleter dynamicCompleter = new StringsCompleter(dynamicStrings);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"filenamecompleter",children:"FileNameCompleter"}),"\n",(0,l.jsx)(n.p,{children:"Completes file and directory names:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"Completer fileCompleter = new FileNameCompleter();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"argumentcompleter",children:"ArgumentCompleter"}),"\n",(0,l.jsx)(n.p,{children:"Handles command-line arguments with different completers for each position:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// First argument is a command, second is a file\nCompleter commandCompleter = new StringsCompleter("open", "save", "delete");\nCompleter fileCompleter = new FileNameCompleter();\n\nCompleter argCompleter = new ArgumentCompleter(\n        commandCompleter,\n        fileCompleter\n);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"treecompleter",children:"TreeCompleter"}),"\n",(0,l.jsx)(n.p,{children:"Creates a tree of completion options:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'Completer treeCompleter = new TreeCompleter(\n        node("help",\n                node("commands"),\n                node("syntax")\n        ),\n        node("set",\n                node("color",\n                        node("red", "green", "blue")\n                ),\n                node("size",\n                        node("small", "medium", "large")\n                )\n        )\n);\n'})}),"\n",(0,l.jsx)(n.h3,{id:"aggregatecompleter",children:"AggregateCompleter"}),"\n",(0,l.jsx)(n.p,{children:"Combines multiple completers:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'Completer aggregateCompleter = new AggregateCompleter(\n        new StringsCompleter("help", "exit"),\n        new ArgumentCompleter(\n                new StringsCompleter("open"),\n                new FileNameCompleter()\n        )\n);\n'})}),"\n",(0,l.jsx)(n.h2,{id:"custom-completers",children:"Custom Completers"}),"\n",(0,l.jsxs)(n.p,{children:["You can create your own completers by implementing the ",(0,l.jsx)(n.code,{children:"Completer"})," interface:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'public class CustomCompleter implements Completer {\n    @Override\n    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {\n        // Get the word being completed\n        String word = line.word();\n        \n        // Add completion candidates based on the current word\n        if ("he".startsWith(word)) {\n            candidates.add(new Candidate("help", "help", null, "Show help", null, null, true));\n        }\n        if ("ex".startsWith(word)) {\n            candidates.add(new Candidate("exit", "exit", null, "Exit application", null, null, true));\n        }\n        \n        // You can add more sophisticated logic here\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"completion-behavior",children:"Completion Behavior"}),"\n",(0,l.jsx)(n.p,{children:"You can customize how completion works:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"LineReader reader = LineReaderBuilder.builder()\n        .terminal(terminal)\n        .completer(completer)\n        .option(LineReader.Option.AUTO_LIST, true)  // Automatically list options\n        .option(LineReader.Option.LIST_PACKED, true)  // Display completions in a compact form\n        .option(LineReader.Option.AUTO_MENU, true)  // Show menu automatically\n        .option(LineReader.Option.MENU_COMPLETE, true)  // Cycle through completions\n        .build();\n"})}),"\n",(0,l.jsx)(n.h2,{id:"advanced-completion-features",children:"Advanced Completion Features"}),"\n",(0,l.jsx)(n.h3,{id:"completion-with-descriptions",children:"Completion with Descriptions"}),"\n",(0,l.jsx)(n.p,{children:"You can provide descriptions for completion candidates:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'List<Candidate> candidates = new ArrayList<>();\ncandidates.add(new Candidate("help", "help", null, "Display help information", null, null, true));\ncandidates.add(new Candidate("exit", "exit", null, "Exit the application", null, null, true));\n\nCompleter completer = (reader, line, completions) -> {\n    completions.addAll(candidates);\n};\n'})}),"\n",(0,l.jsx)(n.h3,{id:"context-aware-completion",children:"Context-Aware Completion"}),"\n",(0,l.jsx)(n.p,{children:"Create completers that are aware of the current context:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'public class ContextAwareCompleter implements Completer {\n    private final Map<String, Completer> contextCompleters = new HashMap<>();\n    \n    public ContextAwareCompleter() {\n        contextCompleters.put("default", new StringsCompleter("help", "context", "exit"));\n        contextCompleters.put("file", new FileNameCompleter());\n        contextCompleters.put("user", new StringsCompleter("admin", "guest", "user1", "user2"));\n    }\n    \n    @Override\n    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {\n        // Get current context from reader variables\n        String context = (String) reader.getVariable("CONTEXT");\n        if (context == null) {\n            context = "default";\n        }\n        \n        // Use the appropriate completer for this context\n        Completer contextCompleter = contextCompleters.getOrDefault(context, \n                                                                   contextCompleters.get("default"));\n        contextCompleter.complete(reader, line, candidates);\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"completion-with-colors",children:"Completion with Colors"}),"\n",(0,l.jsx)(n.p,{children:"You can colorize completion candidates:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'public class ColoredCompleter implements Completer {\n    @Override\n    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {\n        // Command in bold red\n        candidates.add(new Candidate("help", "help", null, "Show help", null, \n                                    AttributedStyle.BOLD.foreground(AttributedStyle.RED), true));\n        \n        // File in blue\n        candidates.add(new Candidate("file.txt", "file.txt", null, "A text file", null, \n                                    AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE), true));\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Provide meaningful completions that help users discover functionality"}),"\n",(0,l.jsx)(n.li,{children:"Include descriptions for non-obvious options"}),"\n",(0,l.jsx)(n.li,{children:"Group related completions logically"}),"\n",(0,l.jsx)(n.li,{children:"Consider the context when providing completions"}),"\n",(0,l.jsx)(n.li,{children:"Use appropriate styling to differentiate types of completions"}),"\n",(0,l.jsx)(n.li,{children:"Test completion with various input scenarios"}),"\n",(0,l.jsx)(n.li,{children:"Keep completion fast, especially for large option sets"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const l={},r=i.createContext(l);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);