"use strict";(self.webpackChunkjline_docs=self.webpackChunkjline_docs||[]).push([[9013],{269:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"troubleshooting","title":"Troubleshooting Guide","description":"JLine is designed to work across different platforms and terminal environments, but you may encounter issues due to platform differences, terminal capabilities, or configuration problems. This guide addresses common issues and provides solutions to help you troubleshoot JLine-related problems.","source":"@site/docs/troubleshooting.md","sourceDirName":".","slug":"/troubleshooting","permalink":"/docs/troubleshooting","draft":false,"unlisted":false,"editUrl":"https://github.com/jline/jline.github.io/edit/main/docs/troubleshooting.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"History Management","permalink":"/docs/history"},"next":{"title":"Syntax Highlighting","permalink":"/docs/advanced/syntax-highlighting"}}');var r=i(4848),l=i(8453);const t={sidebar_position:8},a="Troubleshooting Guide",o={},d=[{value:"Common Issues",id:"common-issues",level:2},{value:"Unable to Create a System Terminal",id:"unable-to-create-a-system-terminal",level:3},{value:"Possible Causes and Solutions:",id:"possible-causes-and-solutions",level:4},{value:"ANSI Color Codes Not Working",id:"ansi-color-codes-not-working",level:3},{value:"Possible Causes and Solutions:",id:"possible-causes-and-solutions-1",level:4},{value:"Line Editing Features Not Working",id:"line-editing-features-not-working",level:3},{value:"Possible Causes and Solutions:",id:"possible-causes-and-solutions-2",level:4},{value:"Terminal Size Issues",id:"terminal-size-issues",level:3},{value:"Possible Causes and Solutions:",id:"possible-causes-and-solutions-3",level:4},{value:"Performance Issues",id:"performance-issues",level:3},{value:"Possible Causes and Solutions:",id:"possible-causes-and-solutions-4",level:4},{value:"Platform-Specific Issues",id:"platform-specific-issues",level:2},{value:"Windows Issues",id:"windows-issues",level:3},{value:"Common Windows Issues and Solutions:",id:"common-windows-issues-and-solutions",level:4},{value:"Unix/Linux Issues",id:"unixlinux-issues",level:3},{value:"Common Unix/Linux Issues and Solutions:",id:"common-unixlinux-issues-and-solutions",level:4},{value:"Advanced Troubleshooting",id:"advanced-troubleshooting",level:2},{value:"Enable Debug Logging",id:"enable-debug-logging",level:3},{value:"Inspect Terminal Capabilities",id:"inspect-terminal-capabilities",level:3},{value:"Test with Different Terminal Providers",id:"test-with-different-terminal-providers",level:3},{value:"Check for Native Library Issues",id:"check-for-native-library-issues",level:3},{value:"Getting Help",id:"getting-help",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"troubleshooting-guide",children:"Troubleshooting Guide"})}),"\n",(0,r.jsx)(n.p,{children:"JLine is designed to work across different platforms and terminal environments, but you may encounter issues due to platform differences, terminal capabilities, or configuration problems. This guide addresses common issues and provides solutions to help you troubleshoot JLine-related problems."}),"\n",(0,r.jsx)(n.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsx)(n.h3,{id:"unable-to-create-a-system-terminal",children:"Unable to Create a System Terminal"}),"\n",(0,r.jsx)(n.p,{children:'One of the most common issues is the "Unable to create a system terminal" error:'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"java.io.IOError: Unable to create a system terminal\n"})}),"\n",(0,r.jsx)(n.p,{children:"This error occurs when JLine cannot initialize a terminal for the current environment."}),"\n",(0,r.jsx)(n.h4,{id:"possible-causes-and-solutions",children:"Possible Causes and Solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Missing Terminal Provider Dependencies"})}),"\n",(0,r.jsx)(n.p,{children:"JLine requires specific dependencies for different terminal providers."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Add the appropriate dependencies to your project:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"\x3c!-- For JNA support --\x3e\n<dependency>\n    <groupId>org.jline</groupId>\n    <artifactId>jline-terminal-jna</artifactId>\n    <version>3.29.0</version>\n</dependency>\n\n\x3c!-- For Jansi support --\x3e\n<dependency>\n    <groupId>org.jline</groupId>\n    <artifactId>jline-terminal-jansi</artifactId>\n    <version>3.29.0</version>\n</dependency>\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Running in a Non-Interactive Environment"})}),"\n",(0,r.jsx)(n.p,{children:"JLine may fail when running in a non-interactive environment, such as when input/output is redirected."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Fall back to a dumb terminal:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Terminal terminal;\ntry {\n    terminal = TerminalBuilder.builder()\n            .system(true)\n            .build();\n} catch (IOException e) {\n    System.err.println("Unable to create a system terminal: " + e.getMessage());\n    terminal = TerminalBuilder.builder()\n            .dumb(true)\n            .build();\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"IDE Console Limitations"})}),"\n",(0,r.jsx)(n.p,{children:"Some IDE consoles (like IntelliJ's) don't fully support all terminal features."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Run your application in a real terminal outside the IDE, or configure your IDE to use an external terminal."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Windows-Specific Issues"})}),"\n",(0,r.jsx)(n.p,{children:"On Windows, you might encounter issues with the console or with Cygwin/MinGW environments."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Explicitly specify the Jansi provider, which has better Windows support:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Terminal terminal = TerminalBuilder.builder()\n        .system(true)\n        .provider("jansi")\n        .build();\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"ansi-color-codes-not-working",children:"ANSI Color Codes Not Working"}),"\n",(0,r.jsx)(n.p,{children:"If ANSI color codes or other escape sequences aren't working properly:"}),"\n",(0,r.jsx)(n.h4,{id:"possible-causes-and-solutions-1",children:"Possible Causes and Solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Terminal Doesn't Support ANSI"})}),"\n",(0,r.jsx)(n.p,{children:"Some terminals don't support ANSI escape sequences."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Check terminal capabilities before using ANSI codes:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'boolean supportsAnsi = terminal.getType().contains("ansi");\nif (supportsAnsi) {\n    // Use ANSI escape sequences\n} else {\n    // Use plain text alternative\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Windows Command Prompt"})}),"\n",(0,r.jsx)(n.p,{children:"The standard Windows Command Prompt has limited ANSI support."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Use the Jansi provider, which provides ANSI support on Windows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Terminal terminal = TerminalBuilder.builder()\n        .system(true)\n        .provider("jansi")\n        .build();\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Output Redirection"})}),"\n",(0,r.jsx)(n.p,{children:"ANSI escape sequences might not work when output is redirected to a file."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Detect if output is being redirected and disable ANSI codes accordingly:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"boolean interactive = terminal.isInteractive();\nif (interactive) {\n    // Use ANSI escape sequences\n} else {\n    // Use plain text alternative\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"line-editing-features-not-working",children:"Line Editing Features Not Working"}),"\n",(0,r.jsx)(n.p,{children:"If line editing features like history navigation, tab completion, or key bindings aren't working:"}),"\n",(0,r.jsx)(n.h4,{id:"possible-causes-and-solutions-2",children:"Possible Causes and Solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Terminal in Non-Raw Mode"})}),"\n",(0,r.jsx)(n.p,{children:"Line editing features require the terminal to be in raw mode."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Ensure the terminal is properly initialized:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Terminal terminal = TerminalBuilder.builder()\n        .system(true)\n        .build();\n\nLineReader reader = LineReaderBuilder.builder()\n        .terminal(terminal)\n        .build();\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Key Binding Conflicts"})}),"\n",(0,r.jsx)(n.p,{children:"Custom key bindings might conflict with default ones."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Check for conflicts and use different key combinations:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Get the current binding for Ctrl+A\nKeyMap<Binding> keyMap = reader.getKeyMaps().get(LineReader.MAIN);\nBinding currentBinding = keyMap.getBound(KeyMap.ctrl('A'));\n\n// Only bind if not already bound to something important\nif (currentBinding == null) {\n    keyMap.bind(myWidget, KeyMap.ctrl('A'));\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Incorrect Terminal Type"})}),"\n",(0,r.jsx)(n.p,{children:"If the terminal type is incorrectly detected, some features might not work."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Explicitly specify the terminal type:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Terminal terminal = TerminalBuilder.builder()\n        .system(true)\n        .type("xterm-256color")\n        .build();\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"terminal-size-issues",children:"Terminal Size Issues"}),"\n",(0,r.jsx)(n.p,{children:"If the terminal size is incorrectly detected or not updated when the window is resized:"}),"\n",(0,r.jsx)(n.h4,{id:"possible-causes-and-solutions-3",children:"Possible Causes and Solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Non-Interactive Terminal"})}),"\n",(0,r.jsx)(n.p,{children:"Size detection might not work in non-interactive terminals."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Provide default dimensions:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"Terminal terminal = TerminalBuilder.builder()\n        .system(true)\n        .build();\n\nif (terminal.getWidth() <= 0 || terminal.getHeight() <= 0) {\n    terminal.setSize(new Size(80, 24));\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Resize Events Not Handled"})}),"\n",(0,r.jsx)(n.p,{children:"Terminal resize events need to be handled explicitly."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Add a signal handler for window resize events:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'terminal.handle(Signal.WINCH, signal -> {\n    // Terminal has been resized\n    Size size = terminal.getSize();\n    System.out.println("Terminal resized to " + size.getColumns() + "x" + size.getRows());\n\n    // Update your UI accordingly\n});\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"performance-issues",children:"Performance Issues"}),"\n",(0,r.jsx)(n.p,{children:"If you experience performance issues with JLine:"}),"\n",(0,r.jsx)(n.h4,{id:"possible-causes-and-solutions-4",children:"Possible Causes and Solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Too Many Terminal Operations"})}),"\n",(0,r.jsx)(n.p,{children:"Excessive terminal operations can slow down your application."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Batch updates and minimize terminal operations:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Instead of updating line by line\nfor (String line : lines) {\n    terminal.writer().println(line);\n    terminal.flush();  // Avoid flushing after each line\n}\n\n// Batch updates\nfor (String line : lines) {\n    terminal.writer().println(line);\n}\nterminal.flush();  // Flush once at the end\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Inefficient Redrawing"})}),"\n",(0,r.jsx)(n.p,{children:"Redrawing the entire screen too frequently can cause flickering and performance issues."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Use the ",(0,r.jsx)(n.code,{children:"Display"})," class for efficient screen updates:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Display display = new Display(terminal, true);\nList<AttributedString> lines = new ArrayList<>();\n\n// Update only what changed\nlines.add(new AttributedString("Line 1"));\nlines.add(new AttributedString("Line 2"));\ndisplay.update(lines, 0);\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Complex Completers"})}),"\n",(0,r.jsx)(n.p,{children:"Complex tab completion logic can slow down input handling."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Optimize your completers and consider caching results:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// Cache completion results\nprivate Map<String, List<Candidate>> completionCache = new HashMap<>();\n\n@Override\npublic void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {\n    String buffer = line.line();\n\n    // Check cache first\n    if (completionCache.containsKey(buffer)) {\n        candidates.addAll(completionCache.get(buffer));\n        return;\n    }\n\n    // Compute completions\n    List<Candidate> results = computeCompletions(line);\n\n    // Cache results\n    completionCache.put(buffer, new ArrayList<>(results));\n\n    // Add to candidates\n    candidates.addAll(results);\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"platform-specific-issues",children:"Platform-Specific Issues"}),"\n",(0,r.jsx)(n.h3,{id:"windows-issues",children:"Windows Issues"}),"\n",(0,r.jsx)(n.p,{children:"Windows has some specific challenges for terminal applications:"}),"\n",(0,r.jsx)(n.h4,{id:"common-windows-issues-and-solutions",children:"Common Windows Issues and Solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Console API Limitations"})}),"\n",(0,r.jsx)(n.p,{children:"The Windows Console API has limitations compared to Unix terminals."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Use the Jansi provider for better Windows support:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Terminal terminal = TerminalBuilder.builder()\n        .system(true)\n        .provider("jansi")\n        .build();\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Ctrl+C Handling"})}),"\n",(0,r.jsx)(n.p,{children:"By default, Ctrl+C terminates the application on Windows."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Install a custom signal handler:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"terminal.handle(Signal.INT, signal -> {\n    // Handle Ctrl+C gracefully\n    terminal.writer().println(\"Ctrl+C pressed, type 'exit' to quit\");\n    terminal.flush();\n});\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Unicode Support"})}),"\n",(0,r.jsx)(n.p,{children:"Windows Command Prompt has limited Unicode support."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Use Windows Terminal or ConEmu for better Unicode support, or set an appropriate code page:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Set UTF-8 code page (requires JNA)\nif (System.getProperty("os.name").toLowerCase().contains("win")) {\n    try {\n        new ProcessBuilder("cmd", "/c", "chcp", "65001").inheritIO().start().waitFor();\n    } catch (Exception e) {\n        // Handle exception\n    }\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Line Ending Issues"})}),"\n",(0,r.jsx)(n.p,{children:"Windows uses CRLF line endings, which can cause issues."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Normalize line endings:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'String normalized = input.replace("\\r\\n", "\\n");\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"unixlinux-issues",children:"Unix/Linux Issues"}),"\n",(0,r.jsx)(n.p,{children:"Unix and Linux systems also have their own challenges:"}),"\n",(0,r.jsx)(n.h4,{id:"common-unixlinux-issues-and-solutions",children:"Common Unix/Linux Issues and Solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Terminal Reset on Exit"})}),"\n",(0,r.jsx)(n.p,{children:"The terminal might not be properly reset when the application exits."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Ensure proper cleanup:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"try {\n    // Your application code\n} finally {\n    terminal.close();\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Signal Handling"})}),"\n",(0,r.jsx)(n.p,{children:"Unix signals need proper handling for a good user experience."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Install signal handlers for common signals:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"terminal.handle(Signal.INT, signal -> {\n    // Handle Ctrl+C\n});\n\nterminal.handle(Signal.WINCH, signal -> {\n    // Handle terminal resize\n});\n\nterminal.handle(Signal.TSTP, signal -> {\n    // Handle Ctrl+Z (suspend)\n    terminal.pause();\n});\n\nterminal.handle(Signal.CONT, signal -> {\n    // Handle resume from suspension\n    terminal.resume();\n});\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"SSH Session Issues"})}),"\n",(0,r.jsx)(n.p,{children:"JLine might behave differently in SSH sessions."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Check if running in an SSH session and adjust accordingly:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'boolean isSsh = System.getenv("SSH_CLIENT") != null || System.getenv("SSH_TTY") != null;\nif (isSsh) {\n    // Adjust settings for SSH session\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-troubleshooting",children:"Advanced Troubleshooting"}),"\n",(0,r.jsx)(n.p,{children:"For more complex issues, try these advanced troubleshooting techniques:"}),"\n",(0,r.jsx)(n.h3,{id:"enable-debug-logging",children:"Enable Debug Logging"}),"\n",(0,r.jsx)(n.p,{children:"JLine uses SLF4J for logging. Enable debug logging to see what's happening:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Configure SLF4J with a binding like Logback\n// logback.xml\n<configuration>\n    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">\n        <encoder>\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n\n    <logger name="org.jline" level="DEBUG"/>\n\n    <root level="INFO">\n        <appender-ref ref="STDOUT" />\n    </root>\n</configuration>\n'})}),"\n",(0,r.jsx)(n.h3,{id:"inspect-terminal-capabilities",children:"Inspect Terminal Capabilities"}),"\n",(0,r.jsx)(n.p,{children:"Check what capabilities are available in your terminal:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'Terminal terminal = TerminalBuilder.builder().build();\n\nSystem.out.println("Terminal type: " + terminal.getType());\nSystem.out.println("Interactive: " + terminal.isInteractive());\nSystem.out.println("Ansi supported: " + terminal.getType().contains("ansi"));\nSystem.out.println("Width: " + terminal.getWidth());\nSystem.out.println("Height: " + terminal.getHeight());\n\n// Check specific capabilities\nString enterAm = terminal.getStringCapability(Capability.enter_am_mode);\nString exitAm = terminal.getStringCapability(Capability.exit_am_mode);\nSystem.out.println("Auto-margin mode supported: " + (enterAm != null && exitAm != null));\n'})}),"\n",(0,r.jsx)(n.h3,{id:"test-with-different-terminal-providers",children:"Test with Different Terminal Providers"}),"\n",(0,r.jsx)(n.p,{children:"Try different terminal providers to isolate the issue:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Try with JNA provider\ntry {\n    Terminal jnaTerminal = TerminalBuilder.builder()\n            .provider("jna")\n            .build();\n    System.out.println("JNA terminal created successfully: " + jnaTerminal.getType());\n    jnaTerminal.close();\n} catch (Exception e) {\n    System.err.println("JNA terminal failed: " + e.getMessage());\n}\n\n// Try with Jansi provider\ntry {\n    Terminal jansiTerminal = TerminalBuilder.builder()\n            .provider("jansi")\n            .build();\n    System.out.println("Jansi terminal created successfully: " + jansiTerminal.getType());\n    jansiTerminal.close();\n} catch (Exception e) {\n    System.err.println("Jansi terminal failed: " + e.getMessage());\n}\n\n// Try with dumb terminal\ntry {\n    Terminal dumbTerminal = TerminalBuilder.builder()\n            .dumb(true)\n            .build();\n    System.out.println("Dumb terminal created successfully: " + dumbTerminal.getType());\n    dumbTerminal.close();\n} catch (Exception e) {\n    System.err.println("Dumb terminal failed: " + e.getMessage());\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"check-for-native-library-issues",children:"Check for Native Library Issues"}),"\n",(0,r.jsx)(n.p,{children:"JLine uses native libraries through JNA or Jansi. Check for native library issues:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'try {\n    // Force loading of JNA\n    Class.forName("com.sun.jna.Native");\n    System.out.println("JNA loaded successfully");\n} catch (Throwable t) {\n    System.err.println("Error loading JNA: " + t.getMessage());\n}\n\ntry {\n    // Force loading of Jansi\n    Class.forName("org.fusesource.jansi.AnsiConsole");\n    System.out.println("Jansi loaded successfully");\n} catch (Throwable t) {\n    System.err.println("Error loading Jansi: " + t.getMessage());\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"getting-help",children:"Getting Help"}),"\n",(0,r.jsx)(n.p,{children:"If you're still experiencing issues after trying the solutions in this guide:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Check the JLine GitHub Issues"}),": Search the ",(0,r.jsx)(n.a,{href:"https://github.com/jline/jline3/issues",children:"JLine GitHub issues"})," to see if your problem has been reported and if there's a solution."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"JLine Mailing Lists"}),": Post your question to the ",(0,r.jsx)(n.a,{href:"https://groups.google.com/g/jline-users",children:"JLine Users mailing list"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Stack Overflow"}),": Ask a question on Stack Overflow with the ",(0,r.jsx)(n.code,{children:"jline"})," tag."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Create a Minimal Reproducible Example"}),": If you're reporting a bug, create a minimal example that demonstrates the issue."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Include Environment Information"}),": When seeking help, include details about your environment:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"JLine version"}),"\n",(0,r.jsx)(n.li,{children:"Java version"}),"\n",(0,r.jsx)(n.li,{children:"Operating system"}),"\n",(0,r.jsx)(n.li,{children:"Terminal emulator"}),"\n",(0,r.jsx)(n.li,{children:"Relevant code snippets"}),"\n",(0,r.jsx)(n.li,{children:"Error messages and stack traces"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"JLine is a powerful library for creating interactive command-line applications, but it can sometimes be challenging to get it working perfectly across all environments. By understanding common issues and their solutions, you can troubleshoot problems more effectively and create robust terminal applications that work well on all platforms."})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var s=i(6540);const r={},l=s.createContext(r);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);